Text Content,Code,has_code,len,aa,begauth,first_turn,last_turn,clen,tlen,cloc,tloc,tpos1,tpos2,ppau,npau
"JVMVRFY038 invokespecial on invalid target; class=die/verwandlung/GregorSamsa, ",Observed Bug Behaviour,False,79,NONE,True,True,False,0.09473684211,0.06766917293,0.125,0.002544529262,0.0,1.0,0.0,0.0001794494051
"Java -version output
--------------------

openjdk version ""11.0.5"" 2019-10-15
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.5+10)
Eclipse OpenJ9 VM AdoptOpenJDK (build openj9-0.17.0, JRE 11 Mac OS X amd64-64-Bit Compressed References 20191016_371 (JIT enabled, AOT enabled)",Observed Bug Behaviour,False,286,NONE,True,True,False,0.4526315789,0.3233082707,0.25,0.005089058524,0.0,1.0,0.0,0.0001794494051
"OpenJ9   - 77c1cf708
OMR      - 20db4fbc
JCL      - 2a7af5674b based on jdk-jdk-11.0.5+10)

Summary of problem
------------------

When building ODPi egeria  URL  master, the build fails on a maven step using the Apache RAT plugin 0.13 with

An API incompatibility was encountered while executing org.apache.rat:apache-rat-plugin:0.13:check: java.lang.VerifyError: JVMVRFY038 invokespecial on invalid target; class=die/verwandlung/GregorSamsa, method=template$dot$0(Lcom/sun/org/apache/xalan/internal/xsltc/DOM;Lcom/sun/org/apache/xml/internal/dtm/DTMAxisIterator;Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;I)V, pc=698
[ERROR]",Observed Bug Behaviour,False,658,NONE,True,True,False,1.0,0.7142857143,0.375,0.007633587786,0.0,1.0,0.0,0.0001794494051
"Exception Details:
[ERROR]   Location:
[ERROR]     die/verwandlung/GregorSamsa.template$dot$0(Lcom/sun/org/apache/xalan/internal/xsltc/DOM;Lcom/sun/org/apache/xml/internal/dtm/DTMAxisIterator;Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;I)V @698: JBinvokespecial
[ERROR]   Reason:",Observed Bug Behaviour,False,303,NONE,True,True,False,0.4105263158,0.2932330827,0.5,0.01017811705,0.0,1.0,0.0,0.0001794494051
[ERROR],Task Progress,False,7,NONE,True,True,False,0.01052631579,0.007518796992,0.625,0.01272264631,0.0,1.0,0.0,0.0001794494051
The method invoked via invokespecial is invalid.,Investigation and Exploration,False,48,NONE,True,True,False,0.07368421053,0.05263157895,0.75,0.01526717557,0.0,1.0,0.0,0.0001794494051
"This was when attempting to reproduce #7539 (my environment doesn't yet have the fix), but I had also cleaned up my build environment by removing all of my ~/.m2 - as well as pulled current updates from master.",Investigation and Exploration,False,210,NONE,True,True,False,0.3894736842,0.2781954887,0.875,0.01781170483,0.0,1.0,0.0,0.0001794494051
"I had previously only seen this failure with a nightly build

Diagnostic files
----------------

Full log from the exceptions is posted to https://gist.github.com/f640872cc6608793e8988f54c68363d7",Investigation and Exploration,False,200,NONE,True,True,False,0.2736842105,0.1954887218,1.0,0.0203562341,0.0,1.0,0.0,0.0001794494051
@planetf1 Do you have the .class file that causes the verifyerror?,Investigation and Exploration,False,66,MEMBER,False,False,False,0.6875,0.08270676692,0.5,0.02290076336,3.12e-05,0.999968832,0.0001794494051,0.0004950187461
We need to see the bytecodes to see why the check in the verifier is failing.,Investigation and Exploration,False,77,MEMBER,False,False,False,1.0,0.1203007519,1.0,0.02544529262,3.12e-05,0.999968832,0.0001794494051,0.0004950187461
The maven dependency I'm using is from https://repo1.maven.org/maven2/org/apache/rat/apache-rat-plugin/0.13/ ie with the jar at https://repo1.maven.org/maven2/org/apache/rat/apache-rat-plugin/0.13/apache-rat-plugin-0.13.jarapache-rat-plugin-0.13.jar,Investigation and Exploration,False,249,NONE,True,False,False,1.0,0.1052631579,0.5,0.02798982188,0.0001171462243,0.9998828538,0.0004950187461,5.15e-05
but I'm unclear which class specifically you need ?,Investigation and Exploration,False,51,NONE,True,False,False,0.5714285714,0.06015037594,1.0,0.03053435115,0.0001171462243,0.9998828538,0.0004950187461,5.15e-05
"The VerifyError is flagging a problem in:
CODE",Investigation and Exploration,True,47,MEMBER,False,False,False,0.5294117647,0.06766917293,0.5,0.03307888041,0.0001260919359,0.9998739081,5.15e-05,1.64e-05
So I need the CODE class so I can look at the bytecodes for the CODE method,Investigation and Exploration,True,75,MEMBER,False,False,False,1.0,0.1278195489,1.0,0.03562340967,0.0001260919359,0.9998739081,5.15e-05,1.64e-05
I found a few hits like https://stackoverflow.com/questions/49758534/java-lang-verifyerror-class-gregorsamsa-method-illegal-target-of-jump - or more helpfully perhaps http://www.jguru.com/faq/view.jsp?EID=1340163 ie this is in the XLST processor which I assume is bundled with the jvm?,Investigation and Exploration,False,285,NONE,True,False,False,1.0,0.2030075188,1.0,0.03816793893,0.0001289318444,0.9998710682,1.64e-05,5.31e-06
This is an AdoptOpenJDK build,Investigation and Exploration,False,29,NONE,True,False,False,1.0,0.03759398496,1.0,0.04071246819,0.0001298548146,0.9998701452,5.31e-06,0.0001565583648
also some explanations at https://github.com/eclipse/openj9/issues/6642,Investigation and Exploration,False,71,NONE,True,False,False,1.0,0.03759398496,1.0,0.04325699746,0.0001570469382,0.9998429531,0.0001565583648,0.0001463391504
"I found a few hits like https://stackoverflow.com/questions/49758534/java-lang-verifyerror-class-gregorsamsa-method-illegal-target-of-jump

That link shows an issue with branch/jump targets and should be fixed in [JDK10] URL .  According to the java -version above, you're using JDK11 so it may be related to the XLST processor but shouldn't be the same issue.",Investigation and Exploration,False,362,MEMBER,False,False,False,1.0,0.3684210526,0.5,0.04580152672,0.000182464119,0.9998175359,0.0001463391504,0.0001643249677
We need the bytecode to figure out what's going on,Investigation and Exploration,False,50,MEMBER,False,False,False,0.2040816327,0.07518796992,1.0,0.04834605598,0.000182464119,0.9998175359,0.0001463391504,0.0001643249677
Can you recommend how to get the byte code?,Investigation and Exploration,False,43,NONE,True,False,False,0.4285714286,0.06766917293,0.3333333333,0.05089058524,0.0002110051991,0.9997889948,0.0001643249677,0.0008114056243
Any ideas?,Social Conversation,False,10,NONE,True,False,False,0.09523809524,0.01503759398,0.6666666667,0.0534351145,0.0002110051991,0.9997889948,0.0001643249677,0.0008114056243
This class is being created dynamically by the XSLT processing as far as I can see (an area I'm unfamiliar with),Investigation and Exploration,False,112,NONE,True,False,False,1.0,0.1578947368,1.0,0.05597964377,0.0002110051991,0.9997889948,0.0001643249677,0.0008114056243
I don't know enough about the XSLT processing to know how to dump the generated files.,Investigation and Exploration,False,86,MEMBER,False,False,False,0.7619047619,0.1203007519,0.5,0.05852417303,0.0003519356568,0.9996480643,0.0008114056243,0.0007002205715
@hzongaro Are you aware of a CODE or other option to have the XSLT transformer dump the generated classes to disk?,Solution Discussion,True,114,MEMBER,False,False,False,1.0,0.1578947368,1.0,0.06106870229,0.0003519356568,0.9996480643,0.0008114056243,0.0007002205715
Another observation.,Social Conversation,False,20,NONE,True,False,False,0.09523809524,0.01503759398,0.1666666667,0.06361323155,0.0004735547369,0.9995264453,0.0007002205715,0.0002080632054
The exact stage of the build the failure happens on varies.,Observed Bug Behaviour,False,59,NONE,True,False,False,0.5238095238,0.08270676692,0.3333333333,0.06615776081,0.0004735547369,0.9995264453,0.0007002205715,0.0002080632054
Sometimes it may get all the way through (supposition - since I originally only noticed this on a nightly).,Observed Bug Behaviour,False,107,NONE,True,False,False,0.8571428571,0.1353383459,0.5,0.06870229008,0.0004735547369,0.9995264453,0.0007002205715,0.0002080632054
For example I ran now and it got 50% further.,Bug Reproduction,False,45,NONE,True,False,False,0.4761904762,0.07518796992,0.6666666667,0.07124681934,0.0004735547369,0.9995264453,0.0007002205715,0.0002080632054
"Still failing with the same report, managing RAT.",Bug Reproduction,False,49,NONE,True,False,False,0.380952381,0.06015037594,0.8333333333,0.0737913486,0.0004735547369,0.9995264453,0.0007002205715,0.0002080632054
"Our 'master' code is changing - a few updates constantly through the day, but it may also point to odd corruption perhaps?",Investigation and Exploration,False,122,NONE,True,False,False,1.0,0.1578947368,1.0,0.07633587786,0.0004735547369,0.9995264453,0.0007002205715,0.0002080632054
Only seen on MacOS so far.,Bug Reproduction,False,26,NONE,True,False,False,0.6,0.04511278195,0.5,0.07888040712,0.0005096925721,0.9994903074,0.0002080632054,0.0005207711664
"trying same code/version on linux, but not seen yet.",Bug Reproduction,False,52,NONE,True,False,False,1.0,0.07518796992,1.0,0.08142493639,0.0005096925721,0.9994903074,0.0002080632054,0.0005207711664
"Dan @DanHeidinga, I'm not aware of a CODE option or other JVM option that can be specified to have the XSLT processor dump the generated classes.",Investigation and Exploration,True,145,MEMBER,False,False,False,0.7222222222,0.1954887218,0.1428571429,0.08396946565,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
The only way I'm aware of doing it is programmatically.,Investigation and Exploration,False,55,MEMBER,False,False,False,0.2777777778,0.07518796992,0.2857142857,0.08651399491,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
"There is a [CODE](https://xml.apache.org/xalan-j/apidocs/javax/xml/transform/TransformerFactory.html#setAttribute(java.lang.String,%20java.lang.Object)) method that can be used to specify settings on the XSLT processor.",Investigation and Exploration,True,219,MEMBER,False,False,False,0.6944444444,0.1879699248,0.4285714286,0.08905852417,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
"In particular, with XSLTC, there are attributes that can be used to indicate that generated classes should be written to a particular directory or a jar file - in particular [CODE, CODE, CODE](https://xml.apache.org/xalan-j/xsltc_usage.html#api-attributes).",Investigation and Exploration,True,257,MEMBER,False,False,False,1.0,0.2706766917,0.5714285714,0.09160305344,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
The difficulty of course is that @planetf1 might not have access to the source that's processing the XSLT stylesheet in order to set those attributes on the CODE instance.,Investigation and Exploration,True,171,MEMBER,False,False,False,0.8055555556,0.2180451128,0.7142857143,0.0941475827,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
"If they do not, they might have to do something like override the default CODE implementation by specifying CODE.",Investigation and Exploration,True,113,MEMBER,False,False,False,0.5277777778,0.1428571429,0.8571428571,0.09669211196,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
"This implementation could delegate to CODE, but would also call CODE on the underlying implementation to request that the classes by written out, using some sort of sequence number on the destination directories and/or jar names.",Investigation and Exploration,True,229,MEMBER,False,False,False,1.0,0.2706766917,1.0,0.09923664122,0.0006001436568,0.9993998563,0.0005207711664,0.003847329842
"Thanks for the update, but I think that will be rather tricky.",Social Conversation,False,62,NONE,True,False,False,0.2,0.09022556391,0.5,0.1017811705,0.001268374119,0.9987316259,0.003847329842,0.0003249710183
"Can we dump a core file when the VerifyError occurs and get the bytecode that way?

CODE",Investigation and Exploration,True,90,CONTRIBUTOR,False,False,False,1.0,0.1353383459,1.0,0.106870229,0.0013248173,0.9986751827,0.0003249710183,0.01873100248
Typically I cannot get a failure this morning.,Bug Reproduction,False,46,NONE,True,False,False,0.3103448276,0.06766917293,0.5,0.1094147583,0.004578145442,0.9954218546,0.01873100248,0.002785757849
"I've set MAVEN_OPTS with the above, so if/when I get a failure hopefully I'll find a core (also added a ulimit -c unlimited in my build invocation).",Investigation and Exploration,False,148,NONE,True,False,False,1.0,0.2180451128,1.0,0.1119592875,0.004578145442,0.9954218546,0.01873100248,0.002785757849
"After around 8 attempts I had another failure
with
CODE
CODE
Also CODE shows
CODE",Bug Reproduction,True,86,NONE,True,False,False,0.7142857143,0.1503759398,0.5,0.1145038168,0.005061994847,0.9949380052,0.002785757849,0.005541266823
"However I can't see any core file in the current directory from where the sw was launched, nor the relevant maven directory nor indeed anywhere down the tree",Investigation and Exploration,False,157,NONE,True,False,False,1.0,0.2105263158,1.0,0.1170483461,0.005061994847,0.9949380052,0.002785757849,0.005541266823
Can you set the CODE environment variable to CODE?,Solution Discussion,True,50,MEMBER,False,False,False,1.0,0.06766917293,0.5,0.1195928753,0.006024439826,0.9939755602,0.005541266823,0.0006940890429
I'm not sure how MAVEN_OPTS gets passed through,Solution Discussion,False,47,MEMBER,False,False,False,0.8888888889,0.06015037594,1.0,0.1221374046,0.006024439826,0.9939755602,0.005541266823,0.0006940890429
"I will try that too, though I've used it for other JVM options and it appears to pass through fine (or through JAVA_TOOL_OPTIONS).",Solution Discussion,False,130,NONE,True,False,False,1.0,0.1804511278,0.5,0.1246819338,0.006144993941,0.9938550061,0.0006940890429,0.03656966316
But will set OPENJ9_JAVA_OPTIONS,Solution Discussion,False,32,NONE,True,False,False,0.1666666667,0.03007518797,1.0,0.1272264631,0.006144993941,0.9938550061,0.0006940890429,0.03656966316
"Needed to do a build today and hit the issue again - those options are set but I still see no evidence of a core?
CODE",Solution Discussion,True,119,NONE,True,False,False,1.0,0.1954887218,1.0,0.1297709924,0.01249666222,0.9875033378,0.03656966316,6.54e-06
CODE,Investigation and Exploration,True,4,NONE,True,False,False,1.0,0.007518796992,1.0,0.1323155216,0.01249779818,0.9875022018,6.54e-06,0.0001921212309
"New information - I just hit the same issue on linux (Ubuntu 19.10) - though I did not have the same environment set there to capture debug:

Again
CODE
CODE",Bug Reproduction,True,161,NONE,True,False,False,1.0,0.2330827068,1.0,0.1348600509,0.01253116711,0.9874688329,0.0001921212309,9.24e-05
No sign of cores on linux either,Investigation and Exploration,False,32,NONE,True,False,False,1.0,0.05263157895,1.0,0.1374045802,0.01254721259,0.9874527874,9.24e-05,0.002394157552
Try just CODE without the filter.,Investigation and Exploration,True,33,CONTRIBUTOR,False,False,False,0.25,0.04511278195,0.5,0.1399491094,0.01296304619,0.9870369538,0.002394157552,0.003545658632
"I don't think any other exceptions would be thrown from the VM normally, and the CODE may be a ClassFormatError instead of a VerifyError.",Investigation and Exploration,True,137,CONTRIBUTOR,False,False,False,1.0,0.1804511278,1.0,0.1424936387,0.01296304619,0.9870369538,0.002394157552,0.003545658632
"Tried that, and this time my maven build failed in 27s which is pretty impressive.",Bug Reproduction,False,82,NONE,True,False,False,0.46875,0.1127819549,0.1666666667,0.1450381679,0.01357888034,0.9864211197,0.003545658632,0.0002252314856
Same error.,Observed Bug Behaviour,False,11,NONE,True,False,False,0.0625,0.01503759398,0.3333333333,0.1475826972,0.01357888034,0.9864211197,0.003545658632,0.0002252314856
No sign of a core.,Investigation and Exploration,False,18,NONE,True,False,False,0.15625,0.03759398496,0.5,0.1501272265,0.01357888034,0.9864211197,0.003545658632,0.0002252314856
This was on ubuntu.,Bug Reproduction,False,19,NONE,True,False,False,0.125,0.03007518797,0.6666666667,0.1526717557,0.01357888034,0.9864211197,0.003545658632,0.0002252314856
"Clearly the RAT plugin is the cause, yet I've never seen this with hotspot, nor with earlier J9 builds which I've been using intermittently since macOS came out from adoptopenjdk.",Investigation and Exploration,False,179,NONE,True,False,False,1.0,0.2406015038,0.8333333333,0.155216285,0.01357888034,0.9864211197,0.003545658632,0.0002252314856
"The version of the rat plugin is current, and has been around for about a year.",Social Conversation,False,79,NONE,True,False,False,0.5,0.1203007519,1.0,0.1577608142,0.01357888034,0.9864211197,0.003545658632,0.0002252314856
This is a ClassFormatError.,Observed Bug Behaviour,False,27,MEMBER,False,False,False,0.25,0.03007518797,0.5,0.1628498728,0.01361800008,0.9863819999,0.0002252314856,0.002938228528
Can you try with CODE in the OPENJ9_JAVA_OPTIONS?,Investigation and Exploration,True,49,MEMBER,False,False,False,0.5,0.06015037594,0.75,0.165394402,0.01361800008,0.9863819999,0.0002252314856,0.002938228528
We may need to hack a VM that dumps the classfile on a verifyerror/classformaterror....,Investigation and Exploration,False,87,MEMBER,False,False,False,1.0,0.1203007519,1.0,0.1679389313,0.01361800008,0.9863819999,0.0002252314856,0.002938228528
"I expect that if CODE didn't work, then the version with the filter won't work either.",Investigation and Exploration,True,86,CONTRIBUTOR,False,False,False,1.0,0.1203007519,0.25,0.1704834606,0.01412833163,0.9858716684,0.002938228528,0.0009773656664
The one without the filter should dump a core for any systhrow.,Investigation and Exploration,False,63,CONTRIBUTOR,False,False,False,0.75,0.09022556391,0.5,0.1730279898,0.01412833163,0.9858716684,0.002938228528,0.0009773656664
Another possibility is the core is going to an unexpected place.,Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.6875,0.08270676692,0.75,0.1755725191,0.01412833163,0.9858716684,0.002938228528,0.0009773656664
"If the -Xdump command triggers, there are messages printed to stderr like the following.
CODE",Investigation and Exploration,True,94,CONTRIBUTOR,False,False,False,1.0,0.1203007519,1.0,0.1781170483,0.01412833163,0.9858716684,0.002938228528,0.0009773656664
"I don't see any messages like this, but of course I am running a maven build composed of 200+ modules, and within that the rat plugin is being invoked >200 times.",Investigation and Exploration,False,162,NONE,True,False,False,1.0,0.2330827068,0.1428571429,0.1806615776,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
The failure seems to happen randomly.,Bug Reproduction,False,37,NONE,True,False,False,0.1935483871,0.04511278195,0.2857142857,0.1832061069,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
I have no idea if anything about that environment is masking properties sent to the jvm.,Investigation and Exploration,False,88,NONE,True,False,False,0.5161290323,0.1203007519,0.4285714286,0.1857506361,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
So there's a fair gap between the user perceived problem and the nitty gritty in the jvm.,Investigation and Exploration,False,89,NONE,True,False,False,0.5483870968,0.1278195489,0.5714285714,0.1882951654,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
"I can try to repeatedly call rat directly, but unsure I'll be able to repro.",Bug Reproduction,False,76,NONE,True,False,False,0.4838709677,0.1127819549,0.7142857143,0.1908396947,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
"I could try to go back to 11.0.4 and ensure the issue doesn't happen there, again.",Bug Reproduction,False,82,NONE,True,False,False,0.5161290323,0.1203007519,0.8571428571,0.1933842239,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
Would that help given any thoughts on changes going to 11.0.5 (or the packaging from adoptopenjdk),Investigation and Exploration,False,98,NONE,True,False,False,0.5161290323,0.1203007519,1.0,0.1959287532,0.01429808716,0.9857019128,0.0009773656664,0.000475806623
Did you try searching the file system for CODE?,Investigation and Exploration,True,47,CONTRIBUTOR,False,False,False,1.0,0.06766917293,1.0,0.1984732824,0.01438072849,0.9856192715,0.000475806623,0.01328334366
"No sign of a filename of the form core.20191106.* (especially on linux, from / )",Investigation and Exploration,False,80,NONE,True,False,False,1.0,0.0977443609,1.0,0.2010178117,0.01668787013,0.9833121299,0.01328334366,0.01296082525
Try running CODE and see what that shows.,Investigation and Exploration,True,41,CONTRIBUTOR,False,False,False,0.32,0.06015037594,0.5,0.203562341,0.01893899458,0.9810610054,0.01296082525,0.01135477352
"It validates the OS is setup properly for collecting dumps, although not sure how well it works on Mac, it may work better on Linux.",Investigation and Exploration,False,132,CONTRIBUTOR,False,False,False,1.0,0.1879699248,1.0,0.2061068702,0.01893899458,0.9810610054,0.01296082525,0.01135477352
"On MacOS, that had zero effect ie
CODE
^^^ that first line is our app starting up

On linux (where I did also see issues)
CODE",Investigation and Exploration,True,131,NONE,True,False,False,1.0,0.2255639098,1.0,0.2086513995,0.02091116901,0.979088831,0.01135477352,0.03206912113
What version of Linux is it?,Investigation and Exploration,False,28,CONTRIBUTOR,False,False,False,0.2727272727,0.04511278195,0.5,0.2111959288,0.02648115249,0.9735188475,0.03206912113,0.05548420273
"It seems to be telling us the core may not be called core.20191106.* since it couldn't be renamed, but might be core.*",Investigation and Exploration,False,118,CONTRIBUTOR,False,False,False,1.0,0.1654135338,1.0,0.213740458,0.02648115249,0.9735188475,0.03206912113,0.05548420273
"CODE
Though note that reference to core only happened when I 'broke' the jvm in another way (I experimented with class cache & had run out of disk space).",Investigation and Exploration,True,155,NONE,True,False,False,1.0,0.2180451128,0.5,0.2162849873,0.03611802688,0.9638819731,0.05548420273,0.2798752602
"- so it proves  the jvm can dump, but in this case it was unrelated to the xslt issue.",Investigation and Exploration,False,86,NONE,True,False,False,0.6551724138,0.1428571429,1.0,0.2188295165,0.03611802688,0.9638819731,0.05548420273,0.2798752602
"My intent is to avoid this problem until 11.0.6 is released (skip rat), then I will retest and report back - since we don't seem to have been able to capture further debugging info.",Investigation and Exploration,False,181,NONE,True,False,False,1.0,0.2481203008,1.0,0.2213740458,0.08472866911,0.9152713309,0.2798752602,0.04671162031
"On Linux, the JVMJ9VM135W message means that the system has a core redirection configured into the CODE program, which may be deleting, renaming, and/or truncating the core from my experience.",Investigation and Exploration,True,192,CONTRIBUTOR,False,False,False,1.0,0.2255639098,0.5,0.2239185751,0.09284186161,0.9071581384,0.04671162031,0.4323046536
Try CODE and restart Java and see if JVMJ9VM135W is gone and then reproduce.,Investigation and Exploration,True,76,CONTRIBUTOR,False,False,False,0.4666666667,0.1052631579,1.0,0.2264631043,0.09284186161,0.9071581384,0.04671162031,0.4323046536
"Note - I was able to use nightly builds from 28 Nov onwards on windows, mac, linux & no longer see this issue.",Task Progress,False,110,NONE,True,False,False,1.0,0.1578947368,0.3333333333,0.2290076336,0.1679274795,0.8320725205,0.4323046536,0.2641000633
I had been disabling this plugin (-Drat.skip=true) but am now back at default configuration.,Task Progress,False,92,NONE,True,False,False,0.7142857143,0.1127819549,0.6666666667,0.2315521628,0.1679274795,0.8320725205,0.4323046536,0.2641000633
"I intent to continue using the nightly some of the time now, and suggest closing, and I'll reopen if it resurfaces.",Action on Issue,False,115,NONE,True,False,False,1.0,0.1578947368,1.0,0.2340966921,0.1679274795,0.8320725205,0.4323046536,0.2641000633
"I had this again for the first time today under MacOS Catalina 19C56a with this build
CODE
No sign of any core.",Bug Reproduction,True,113,NONE,True,False,False,1.0,0.1804511278,1.0,0.2366412214,0.2137981781,0.7862018219,0.2641000633,0.005956575697
I'll re-open and assign to the next milestone.,Action on Issue,False,46,CONTRIBUTOR,False,False,False,1.0,0.06766917293,1.0,0.2391857506,0.2148327567,0.7851672433,0.005956575697,0.0009205468343
"@planetf1 I recently wrote an article on how to configure or disable Linux core processing: https://publib.boulder.ibm.com/httpserv/cookbook/Troubleshooting-Troubleshooting_Java.html#Troubleshooting-Troubleshooting_Java-Core_Dumps-Ensure_core_piping_is_configured_properly_or_disabled_on_Linux

> It is preferable to completely disable piping when running J9 JVMs because when the J9 JVM produces a core dump or handles a crash, it will post-process the core dump to rename it with additional information and also add some additional details into the core dump.",Investigation and Exploration,False,563,CONTRIBUTOR,False,False,False,1.0,0.4812030075,0.3333333333,0.2417302799,0.2149926436,0.7850073564,0.0009205468343,0.02955805577
The J9 JVM is not able to do this post-processing if a pipe program processes the core dump first.,Investigation and Exploration,False,98,CONTRIBUTOR,False,False,False,0.3125,0.1503759398,0.6666666667,0.2442748092,0.2149926436,0.7850073564,0.0009205468343,0.02955805577
"However, disabling piping will disable piping for all processes, so keep that in mind.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.21875,0.1052631579,1.0,0.2468193384,0.2149926436,0.7850073564,0.0009205468343,0.02955805577
"I primarily run on MacOS which is the environment where I am currently seeing this - for example I had this again just now

I tried 'java -Xcheck:dump' but that by itself reports a usage error, and combined with -jar xxx doesn't elicit any additional output on MacOS

I tried adding back the options to generate a dump

CODE
but then just get
CODE

The core files are NOT generated, even with 'ulimit -c unlimited' - nothing at the paths given or under /cores

I've therefore unset the option again, and gone back to skipping the execution of apache rat - this is the only component so far I've seen the error in, but it occurs fairly often in my environment",Investigation and Exploration,True,670,NONE,True,False,False,1.0,0.962406015,1.0,0.2493638677,0.2201264881,0.7798735119,0.02955805577,0.003175723071
Is CODE world writable?,Investigation and Exploration,True,23,MEMBER,False,False,False,0.2857142857,0.03007518797,0.5,0.2519083969,0.2206780693,0.7793219307,0.003175723071,0.005021721962
With the Catalina OS update the default changed to only be writeable by root.,Investigation and Exploration,False,77,MEMBER,False,False,False,1.0,0.1052631579,1.0,0.2544529262,0.2206780693,0.7793219307,0.003175723071,0.005021721962
"No, I cannot write to /cores.",Investigation and Exploration,False,29,NONE,True,False,False,0.3181818182,0.05263157895,0.1428571429,0.2569974555,0.2215502762,0.7784497238,0.005021721962,0.0366849359
I am using Catalina.,Investigation and Exploration,False,20,NONE,True,False,False,0.1818181818,0.03007518797,0.2857142857,0.2595419847,0.2215502762,0.7784497238,0.005021721962,0.0366849359
"I've now made that dir writeable, and a simple maven build resulted in an immediate core (just running maven).",Task Progress,False,110,NONE,True,False,False,0.9090909091,0.1503759398,0.4285714286,0.262086514,0.2215502762,0.7784497238,0.005021721962,0.0366849359
At least that's good.,Investigation and Exploration,False,21,NONE,True,False,False,0.1818181818,0.03007518797,0.5714285714,0.2646310433,0.2215502762,0.7784497238,0.005021721962,0.0366849359
>2GB.,Investigation and Exploration,False,4,NONE,True,False,False,0.09090909091,0.01503759398,0.7142857143,0.2671755725,0.2215502762,0.7784497238,0.005021721962,0.0366849359
"I then added the filter, and will now run a build.",Task Progress,False,50,NONE,True,False,False,0.5,0.08270676692,0.8571428571,0.2697201018,0.2215502762,0.7784497238,0.005021721962,0.0366849359
"It appears to be progressing, so will look out for the originally reported problem and see if we get a core.........",Task Progress,False,116,NONE,True,False,False,1.0,0.1654135338,1.0,0.272264631,0.2215502762,0.7784497238,0.005021721962,0.0366849359
"Finally I had a core on MacOS
CODE

The file is 7.2GB which surprised me - please advise how you want it made available... or what should be run on it.",Investigation and Exploration,True,154,NONE,True,False,False,0.7857142857,0.2481203008,0.5,0.2748091603,0.2279219658,0.7720780342,0.0366849359,0.0001733178764
"To clarify java version is a nightly build 
CODE
I can of course update/revert to GA, but it's taken a while to get the dump you asked for, and here it is...

Have moved for safety:
CODE",Solution Discussion,True,191,NONE,True,False,False,1.0,0.3157894737,1.0,0.2773536896,0.2279219658,0.7720780342,0.0366849359,0.0001733178764
"Any of this help?
CODECODE__pthread_kill",Solution Discussion,True,41,NONE,True,False,False,0.1111111111,0.04511278195,0.3333333333,0.2798982188,0.2279520689,0.7720479311,0.0001733178764,0.0007382360491
"+ 10, stop reason = signal SIGSTOP
(lldb) thread backtrace
* thread #1, stop reason = signal SIGSTOP
  * frame #0: 0x00007fff6b2ad7fa libsystem_kernel.dylibCODEpthread_kill + 432
    frame #2: 0x000000000bb15123 libj9prt29.dylibCODEdoSystemDump + 297
    frame #4: 0x000000000bb83f55 libj9dmp29.dylibCODEomrsig_protect + 949
    frame #6: 0x000000000bb83b56 libj9dmp29.dylibCODEtriggerDumpAgents + 1030
    frame #8: 0x000000000bb9a438 libj9dmp29.dylibCODEJ9HookDispatch(J9HookInterface**, unsigned long, void*) + 415
    frame #10: 0x000000000cca0b25 libj9vm29.dylibCODEsetCurrentExceptionUTF",Solution Discussion,True,601,NONE,True,False,False,1.0,0.4060150376,0.6666666667,0.2824427481,0.2279520689,0.7720479311,0.0001733178764,0.0007382360491
"+ 230
    frame #12: 0x000000000cdd4e67 libj9vm29.dylibCODEdefineClassCommon + 1791
    frame #14: 0x000000000eaf5b3d libjclse29.dylibCODEsidecarInvokeReflectMethodImpl + 1474
    frame #17: 0x000000000cc904c1 libj9vm29.dylibCODEJVM_InvokeMethod_Impl + 109
    frame #19: 0x000000002e5a1760
    frame #20: 0x000000000cc8f5a9 libj9vm29.dylibCODEgpProtectedRunCallInMethod(void*) + 125
    frame #22: 0x000000000bb16505 libj9prt29.dylibCODEgpProtectAndRun + 202
    frame #24: 0x000000000cca6947 libj9vm29.dylibCODEcallStaticVoidMethod + 145
    frame #26: 0x000000000ba447a0 libjli.dylibCODE_pthread_start + 148
    frame #28: 0x00007fff6b36683b libsystem_pthread.dylibCODECODE",Solution Discussion,True,685,NONE,True,False,False,0.962962963,0.3909774436,1.0,0.2849872774,0.2279520689,0.7720479311,0.0001733178764,0.0007382360491
Pls compress the core file (it should compress nicely) and share it using your favorite file sharing service.,Solution Discussion,False,109,CONTRIBUTOR,False,False,False,1.0,0.1353383459,0.5,0.2875318066,0.2280802907,0.7719197093,0.0007382360491,0.001171121972
Box should work in this case.,Solution Discussion,False,29,CONTRIBUTOR,False,False,False,0.3333333333,0.04511278195,1.0,0.2900763359,0.2280802907,0.7719197093,0.0007382360491,0.001171121972
Ok. uploading to https://ibm.box.com/s/zjjc76l8o7yac05y5sqvqjywdee0qpx3 (all public open source so protection not needed including the code),Task Progress,False,140,NONE,True,False,False,1.0,0.1127819549,1.0,0.2926208651,0.2282836992,0.7717163008,0.001171121972,0.002379441884
I don't have access.,Social Conversation,False,20,CONTRIBUTOR,False,False,False,1.0,0.03007518797,1.0,0.2951653944,0.2286969769,0.7713030231,0.002379441884,0.004233616147
Ok I'm not that familar with Box.,Social Conversation,False,33,NONE,True,False,False,1.0,0.05263157895,0.5,0.2977099237,0.2294323002,0.7705676998,0.004233616147,0.006261517055
Let's try OneDrive -> https://1drv.ms/u/s!ApVqcIDT57-flq5Z_z3td2RT1aZGpw?e=g8Xf6Q,Social Conversation,False,81,NONE,True,False,False,0.5714285714,0.03007518797,1.0,0.3002544529,0.2294323002,0.7705676998,0.004233616147,0.006261517055
"For Box, you need to change the permissions and create a shared link.",Social Conversation,False,69,CONTRIBUTOR,False,False,False,1.0,0.0977443609,0.3333333333,0.3027989822,0.2305198431,0.7694801569,0.006261517055,1.0
Anyway the OneDrive download worked.,Social Conversation,False,36,CONTRIBUTOR,False,False,False,0.3846153846,0.03759398496,0.6666666667,0.3053435115,0.2305198431,0.7694801569,0.006261517055,1.0
I copied the core to triage/openj9-7684,Task Progress,False,39,CONTRIBUTOR,False,False,False,0.6153846154,0.06015037594,1.0,0.3078880407,0.2305198431,0.7694801569,0.006261517055,1.0
Is there any news on this.,Task Progress,False,26,NONE,True,False,False,0.6,0.04511278195,0.5,0.31043257,0.404206657,0.595793343,1.0,0.004984524022
I continue to get these exceptions - today was on windows.,Bug Reproduction,False,58,NONE,True,False,False,1.0,0.07518796992,1.0,0.3129770992,0.404206657,0.595793343,1.0,0.004984524022
We've been focused on shipping the 0.18 release and haven't gotten to the bottom of this yet.,Task Progress,False,93,MEMBER,False,False,False,1.0,0.1353383459,0.5,0.3155216285,0.4050724031,0.5949275969,0.004984524022,1.06e-05
It's targeted for 0.19 so expect progress as we ramp on that release,Task Progress,False,68,MEMBER,False,False,False,0.7222222222,0.0977443609,1.0,0.3180661578,0.4050724031,0.5949275969,0.004984524022,1.06e-05
@ChengJin01 Can you take a look at this after the 0.18 issue you're looking at is dealt with?,Contribution and Commitment,False,93,MEMBER,False,False,False,1.0,0.1353383459,1.0,0.320610687,0.4050742491,0.5949257509,1.06e-05,0.001000256707
Will investigate later after addressing the issue at #8140.,Contribution and Commitment,False,59,CONTRIBUTOR,False,False,False,1.0,0.06766917293,1.0,0.3231552163,0.4052479805,0.5947520195,0.001000256707,5.07e-05
Thanks for the update.,Social Conversation,False,22,NONE,True,False,False,0.1428571429,0.03007518797,0.25,0.3256997455,0.4052567842,0.5947432158,5.07e-05,0.1962918967
I'm surprised no-one else has found yet - perhaps we just do more rat checks than some.,Investigation and Exploration,False,87,NONE,True,False,False,0.6071428571,0.1278195489,0.5,0.3282442748,0.4052567842,0.5947432158,5.07e-05,0.1962918967
"Will have to stick to hotspot for now (I try and run j9 much of the time as I want to flush out the issues, but can't recommend).",Investigation and Exploration,False,129,NONE,True,False,False,1.0,0.2105263158,0.75,0.3307888041,0.4052567842,0.5947432158,5.07e-05,0.1962918967
Happy to try out a nightly to stick with if fairly stable & might address issue.,Investigation and Exploration,False,80,NONE,True,False,False,0.5357142857,0.1127819549,1.0,0.3333333333,0.4052567842,0.5947432158,5.07e-05,0.1962918967
"According to the failure in the description, the exception was thrown out in the code at rtverfiy.c as follows:
CODE
against the failing method in the core dump at triage/openj9-7684:
CODE
with the same bytecode as follows:
[GregorSamsa.template_bytecode.txt] URL 
CODE
Apparently the bytecode for invokespecial was calling an CODE method, in which case
the verifier was supposed to check whether this is an instance initialization method or not in the code below:
CODE
So it doesn't make any sense to set up CODEunless the constant pool of the ROM class or CODE got messed up or incorrectly laid down during the creation through the XSLT processing, in which case the value of J9UTF8_DATA(J9ROMNAMEANDSIGNATURE_NAME(
J9ROMMETHODREF_NAMEANDSIGNATURE((J9ROMMethodRef *) info)))[0] is not equal to CODE.",Investigation and Exploration,True,812,CONTRIBUTOR,False,False,False,1.0,1.0,1.0,0.3358778626,0.4393500983,0.5606499017,0.1962918967,0.000219099957
"@planetf1 , I am wondering whether it is possible to reproduce the issue locally (the specific steps to do so), in which case we are able to manually compile a build with debugging info/messages to figure out what really happened to the code (the problem should be independent of platforms).",Bug Reproduction,False,291,CONTRIBUTOR,False,False,False,1.0,0.3759398496,1.0,0.3384223919,0.4393881531,0.5606118469,0.000219099957,0.0233304665
"I just followed the guide line at https://egeria.odpi.org/open-metadata-resources/open-metadata-tutorials/building-egeria-tutorial/task-building-egeria-source.html to build the open-sourced egeria project and managed to reproduce the ClassFormatError exception on Ubuntu 16.04 (the same exception detected at https://github.com/eclipse/openj9/issues/7684#issuecomment-549759371 / the original VerifyError exception not yet detected so far) as follows:
[ClassFormatError_GregorSamsa.txt] URL 
CODE
Given that the issue only occurs intermittently,  I will try to compile a debug build to capture the error to determine where exactly this exception comes from.",Investigation and Exploration,True,660,CONTRIBUTOR,False,False,False,1.0,0.5714285714,1.0,0.3409669211,0.4434403475,0.5565596525,0.0233304665,0.03715256715
I compile a debug build with a piece of code everywhere before the CODE exception occurs to trigger a crash but it doesn't work so far.,Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,1.0,0.1954887218,0.5,0.3435114504,0.4498932585,0.5501067415,0.03715256715,0.03394128121
Will try adding tracepoints in code to see how it goes.,Task Progress,False,55,CONTRIBUTOR,False,False,False,0.4230769231,0.08270676692,1.0,0.3460559796,0.4498932585,0.5501067415,0.03715256715,0.03394128121
"The further investigation shows as follows:
[1] the CODE exception never occurred on the latest release & nightly build downloaded from AdoptOpenjdk.",Investigation and Exploration,True,150,CONTRIBUTOR,False,False,False,0.5,0.1654135338,0.1666666667,0.3486005089,0.4557884115,0.5442115885,0.03394128121,0.003566914598
"Also, it can't be reproduced with the locally compiled build or personal build with the latest changes.",Bug Reproduction,False,103,CONTRIBUTOR,False,False,False,0.3863636364,0.1278195489,0.3333333333,0.3511450382,0.4557884115,0.5442115885,0.03394128121,0.003566914598
"[2] the exception almost occurs every time on the openj9-0.17.0 release build (from AdoptOpenjdk)
CODE
with the following steps:
CODE",Investigation and Exploration,True,136,CONTRIBUTOR,False,False,False,0.5454545455,0.1804511278,0.5,0.3536895674,0.4557884115,0.5442115885,0.03394128121,0.003566914598
[3] the exception only occurs with JIT on and was never triggered with JIT off so far.,Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.3863636364,0.1278195489,0.6666666667,0.3562340967,0.4557884115,0.5442115885,0.03394128121,0.003566914598
"Meanwhile, the collected core dumps indicate the top of java stack straces always remains in JIT as follows:
CODE

Based on the analysis above, we need the JIT team to get involved in to check what happened to JIT in such case.",Investigation and Exploration,True,230,CONTRIBUTOR,False,False,False,1.0,0.3308270677,0.8333333333,0.358778626,0.4557884115,0.5442115885,0.03394128121,0.003566914598
FYI @fjeremic,Contribution and Commitment,False,13,CONTRIBUTOR,False,False,False,0.04545454545,0.01503759398,1.0,0.3613231552,0.4557884115,0.5442115885,0.03394128121,0.003566914598
"Following the java stack traces above:
CODE
[class_bytes.txt] URL 
The passed-in class file can be written to a file as .class, in which case we are able to learn whether the constant pool of this class was corrupted.",Investigation and Exploration,True,220,CONTRIBUTOR,False,False,False,1.0,0.3157894737,1.0,0.3638676845,0.4564079375,0.5435920625,0.003566914598,0.001811662331
"Just dumped the hex value from the core dump above to a .class file
CODE
[GregorSamsa.class.txt] URL 

and it ended up with the ClassFormatError exception as follows:
CODE
against the code with the newly added tracepoint:
CODE

Also tried with Hospot and end up with pretty much the similar error detected in the constant pool:
CODE
So the VM did thing right from the verification perspective when the error was captured in the constant pool of this class.",Investigation and Exploration,True,467,CONTRIBUTOR,False,False,False,1.0,0.6541353383,0.5,0.3664122137,0.4567225994,0.5432774006,0.001811662331,0.08907149035
Now the question is why & how the passed-in class bytes got messed up?,Investigation and Exploration,False,70,CONTRIBUTOR,False,False,False,0.1609195402,0.1052631579,1.0,0.368956743,0.4567225994,0.5432774006,0.001811662331,0.08907149035
jdk11_openj9_0_17_0/bin/java  -cp .,Investigation and Exploration,False,35,MEMBER,False,False,False,0.3125,0.03759398496,0.3333333333,0.3715012723,0.4721931427,0.5278068573,0.08907149035,0.005002918608
"GregorSamsa

Does Hotspot generate a similar error message for this class?",Investigation and Exploration,False,76,MEMBER,False,False,False,0.75,0.09022556391,0.6666666667,0.3740458015,0.4721931427,0.5278068573,0.08907149035,0.005002918608
I'm wondering if there is a behaviour difference in how we treat it vs the RI.,Investigation and Exploration,False,78,MEMBER,False,False,False,1.0,0.1203007519,1.0,0.3765903308,0.4721931427,0.5278068573,0.08907149035,0.005002918608
"GregorSamsa
> 
> Does Hotspot generate a similar error message for this class?",Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.4193548387,0.0977443609,0.2,0.3791348601,0.4730620837,0.5269379163,0.005002918608,4.74e-05
"The class (generated by XLST with OpenJ9) has a bogus entry in the constant pool (index= 68, string = CODE) as follows:
!",Investigation and Exploration,True,122,CONTRIBUTOR,False,False,False,0.7096774194,0.1654135338,0.4,0.3816793893,0.4730620837,0.5269379163,0.005002918608,4.74e-05
"[image] URL 

in which case it can be captured by both OpenJ9 and Hotspot and it doesn't matter how to explain the error in verifier at least for the moment .",Investigation and Exploration,False,160,CONTRIBUTOR,False,False,False,1.0,0.2330827068,0.6,0.3842239186,0.4730620837,0.5269379163,0.005002918608,4.74e-05
"However, the while application runs good with Hotspot, which means there is no bad class bytes generated by XLST on Hostpot.",Investigation and Exploration,False,124,CONTRIBUTOR,False,False,False,0.6774193548,0.1578947368,0.8,0.3867684478,0.4730620837,0.5269379163,0.005002918608,4.74e-05
"That is to say, the generated bad class bytes only occurs on OpenJ9 with JIT enabled according to the tests.",Investigation and Exploration,False,108,CONTRIBUTOR,False,False,False,0.6451612903,0.1503759398,1.0,0.3893129771,0.4730620837,0.5269379163,0.005002918608,4.74e-05
"@fjeremic , the problem is not specific to macOS as it also occurs on Linux.",Task Progress,False,76,CONTRIBUTOR,False,False,False,1.0,0.1052631579,1.0,0.3918575064,0.4730703195,0.5269296805,4.74e-05,0.001447858298
FYI Have just updated to 11.0.6 (openj9 0.18.0) so will report back on any findings,Bug Reproduction,False,83,NONE,True,False,False,1.0,0.1127819549,1.0,0.3944020356,0.4733217934,0.5266782066,0.001447858298,0.01656125888
"[1] After specified with:
CODE many times, it still ended up with the same ClassFormatError exception intermittently:
CODE
Looking at the java stacktrace in this file:
[system_core_java_stacktrace2.txt] URL 
it seems there was no XLST related method got compiled/optimized in JIT and the optimization on all compiled methods were disabled except the reflection related methods.",Bug Reproduction,True,382,CONTRIBUTOR,False,False,False,1.0,0.4511278195,0.25,0.3969465649,0.4761982657,0.5238017343,0.01656125888,0.01584223495
"[2] The core dump collected previously shows a few RAT specific methods were still compiled/optimized without specifying the JIT option (like -Xjit:exclude...,,dontInline=) above.",Bug Reproduction,False,179,CONTRIBUTOR,False,False,False,0.4333333333,0.1954887218,0.5,0.3994910941,0.4761982657,0.5238017343,0.01656125888,0.01584223495
"[system_core_java_stacktrace_origin.txt] URL 
CODE",Bug Reproduction,True,51,CONTRIBUTOR,False,False,False,0.06666666667,0.03007518797,0.75,0.4020356234,0.4761982657,0.5238017343,0.01656125888,0.01584223495
So I will try to disable optimizing these two RAT specific methods & other XLST related methods to see how it goes.,Solution Discussion,False,115,CONTRIBUTOR,False,False,False,0.35,0.1578947368,1.0,0.4045801527,0.4761982657,0.5238017343,0.01656125888,0.01584223495
"Another option to try to track this down is to use jit limitFiles: https://www.eclipse.org/openj9/docs/xjit/#limitfile

If you generate a compile log from a failing run using CODE, it can be used as a limit file control which methods are compiled in future runs.",Solution Discussion,True,264,MEMBER,False,False,False,1.0,0.3233082707,0.3333333333,0.4071246819,0.478949853,0.521050147,0.01584223495,0.009466671463
This allows binary searching through the compiled methods to find a small(er) set of methods that cause the failure.,Solution Discussion,False,116,MEMBER,False,False,False,0.4418604651,0.1428571429,0.6666666667,0.4096692112,0.478949853,0.521050147,0.01584223495,0.009466671463
This technique is only effective if the failure is fairly reproducible,Solution Discussion,False,70,MEMBER,False,False,False,0.2558139535,0.08270676692,1.0,0.4122137405,0.478949853,0.521050147,0.01584223495,0.009466671463
"After trying with CODE  for many times (the exception often disappears due to the timing issue in JIT), I managed to reproduce the CODE exception with the jit vlog file recorded:
CODE
It seems there was at least 1 VM running for each job (totally 5 jobs was running in building the project).",Bug Reproduction,True,293,CONTRIBUTOR,False,False,False,0.8235294118,0.4210526316,0.1666666667,0.4147582697,0.480594089,0.519405911,0.009466671463,0.009122488321
"Searching the log files shows only one XLST specific method was found in the corresponding java stacktrace
CODE
against the same method (already finished compilation by JIT) when the the project is built successfully
CODE
Note: CODE means this method was still in compilation by JIT when the VM was shutting down, in which case the compilation on this method was cancelled by JIT.",Bug Reproduction,True,384,CONTRIBUTOR,False,False,False,1.0,0.5112781955,0.3333333333,0.417302799,0.480594089,0.519405911,0.009466671463,0.009122488321
"So it explains why the method didn't show up as compiled in the core dump (the DDR got corrupted in parsing this method)
CODE",Investigation and Exploration,True,126,CONTRIBUTOR,False,False,False,0.3676470588,0.1879699248,0.5,0.4198473282,0.480594089,0.519405911,0.009466671463,0.009122488321
"So the investigation above indicates:
1) JIT finished the compilation of CODE when the project was built successfully.",Investigation and Exploration,True,119,CONTRIBUTOR,False,False,False,0.2794117647,0.1428571429,0.6666666667,0.4223918575,0.480594089,0.519405911,0.009466671463,0.009122488321
2) The exception only occurred when this method was still in compilation and got cancelled by JIT when the VM was shutting down.,Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,0.3382352941,0.1729323308,0.8333333333,0.4249363868,0.480594089,0.519405911,0.009466671463,0.009122488321
"Given that CODE is the key method to generate the class bytes (to be used in CODE),  I will try to 1) disable optimizing it and 2) force compiling it with CODE (VM will wait until the compilation is finished before executing a method) to see what happens in both cases.",Solution Discussion,True,269,CONTRIBUTOR,False,False,False,0.7647058824,0.3909774436,1.0,0.427480916,0.480594089,0.519405911,0.009466671463,0.009122488321
"Assuming that the vlog for:
CODE
is:
CODE

The way to use the limit file is to figure out how many lines are in the file using a command like:
CODE
and then run the java application with CODE where CODE and CODE are used to specify the range of the lines to use.",Investigation and Exploration,True,269,MEMBER,False,False,False,1.0,0.4511278195,0.25,0.4300254453,0.4821785449,0.5178214551,0.009122488321,0.000823259913
This allows binary searching to find a smaller set of methods related to the problem.,Investigation and Exploration,False,85,MEMBER,False,False,False,0.25,0.1127819549,0.5,0.4325699746,0.4821785449,0.5178214551,0.009122488321,0.000823259913
"For example, assuming a 10 line file, you'd run with:
CODE
and if it failed after a sufficient number of runs, you'd know the problematic methods were in the first 5 lines.",Investigation and Exploration,True,174,MEMBER,False,False,False,0.6,0.2706766917,0.75,0.4351145038,0.4821785449,0.5178214551,0.009122488321,0.000823259913
"Then you'd run with CODE, binary searching until the problem doesn't occur or you've been able to find a smallish set of methods that cause the failure.",Investigation and Exploration,True,152,MEMBER,False,False,False,0.4833333333,0.2180451128,1.0,0.4376590331,0.4821785449,0.5178214551,0.009122488321,0.000823259913
Will do binary searching in the vlog file containing CODE to see how it goes in this case (there was only one vlog file containing CODE when the ClassFormatError exception occurred ),Investigation and Exploration,True,182,CONTRIBUTOR,False,False,False,1.0,0.2330827068,1.0,0.4402035623,0.4823215343,0.5176784657,0.000823259913,0.05500471719
"With the vlog file containing the unfinished JITed method CODE at 
[vlog_jitfile_limit.txt] URL  (totally 8894 lines), I specified each of the following options to run for 5 times (pretty slow) automatically with a shell script till the CODE exception was captured:
CODE
If there is no exception eventually captured in CODE and CODE, I will keep narrowing down the range in CODE to see how it goes.",Investigation and Exploration,True,401,CONTRIBUTOR,False,False,False,1.0,0.5338345865,1.0,0.4427480916,0.4918751284,0.5081248716,0.05500471719,0.1422289823
"Checked the range in CODE as follows:
CODE
Now keep narrowing down to the range in CODE (16 methods) to see how it goes.",Investigation and Exploration,True,122,CONTRIBUTOR,False,False,False,1.0,0.1954887218,1.0,0.4452926209,0.5165784272,0.4834215728,0.1422289823,0.06976085403
"Checked the range in CODE (16 methods) as follows:
CODE
Now keep checking the compiled methods in CODE (only 4 methods):
CODE",Investigation and Exploration,True,128,CONTRIBUTOR,False,False,False,1.0,0.1954887218,1.0,0.4478371501,0.5286949676,0.4713050324,0.06976085403,0.06758416136
"Checked the range in CODE (only 4 methods) as follows:
CODE
So the problematic method compiled by JIT is 
CODE as follows:
CODE

To confirm the method is the only one in the vlog file to trigger the exception, I moved the method to the bottom of the vlog file.",Investigation and Exploration,True,266,CONTRIBUTOR,False,False,False,1.0,0.4135338346,0.25,0.4503816794,0.5404334453,0.4595665547,0.06758416136,0.0001761792565
"[vlog_jitfile_limit2.txt] URL 
CODE
and rebuilt the project with the modified vlog file for 5 times as follows:
CODE
So, it turns out this method CODE is the only problematic method detected in the vlog file.",Investigation and Exploration,True,212,CONTRIBUTOR,False,False,False,0.7090909091,0.2932330827,0.5,0.4529262087,0.5404334453,0.4595665547,0.06758416136,0.0001761792565
"Looking at the source at CODE:
CODE
It seems the method aims to insert a bunch of method related data to the constant pool, which also explains why the constant pool was unexpectedly messed up after compiled by JIT.",Investigation and Exploration,True,217,CONTRIBUTOR,False,False,False,0.7454545455,0.3082706767,0.75,0.4554707379,0.5404334453,0.4595665547,0.06758416136,0.0001761792565
@fjeremic,Social Conversation,False,9,CONTRIBUTOR,False,False,False,0.01818181818,0.007518796992,1.0,0.4580152672,0.5404334453,0.4595665547,0.06758416136,0.0001761792565
"In addition, the error message CODE is misleading as it doesn't reflect the real problem captured in the constant pool (the problem is a class name string stored in the constant pool is invalid rather than the class name of this class to be verified).",Investigation and Exploration,True,251,CONTRIBUTOR,False,False,False,1.0,0.3383458647,0.5,0.4605597964,0.5404640453,0.4595359547,0.0001761792565,0.002429720419
I will check the code there to see whether it can be modified to end up with an accurate error message in such case.,Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,0.5333333333,0.1804511278,1.0,0.4631043257,0.5404640453,0.4595359547,0.0001761792565,0.002429720419
@ChengJin01 so this looks like a JIT issue.,Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.3333333333,0.06015037594,0.2,0.465648855,0.5408860557,0.4591139443,0.002429720419,0.000914006537
Are the instructions from https://github.com/eclipse/openj9/issues/7684#issuecomment-575807566 still valid to reproduce?,Investigation and Exploration,False,120,CONTRIBUTOR,False,False,False,0.375,0.06766917293,0.4,0.4681933842,0.5408860557,0.4591139443,0.002429720419,0.000914006537
IIRC you mentioned there were some issues in specifying options as child JVM processes were created or something.,Investigation and Exploration,False,113,CONTRIBUTOR,False,False,False,0.75,0.1353383459,0.6,0.4707379135,0.5408860557,0.4591139443,0.002429720419,0.000914006537
Are you able to detail what steps to use to specify custom JVM options to the test as well?,Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,0.7916666667,0.1428571429,0.8,0.4732824427,0.5408860557,0.4591139443,0.002429720419,0.000914006537
We can take a look from the JIT side and narrow down where the problem happens and forward to an expert in the area.,Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,1.0,0.1804511278,1.0,0.475826972,0.5408860557,0.4591139443,0.002429720419,0.000914006537
"@fjeremic,  as mentioned earlier at https://github.com/eclipse/openj9/issues/7684#issuecomment-575807566,  the problem can be reproduced every time when the method is forced to be compiled by JIT with the steps as follow:
[vlog_jitfile_limit2.txt] URL 
CODE
The current JDK version I am running is CODE
CODE
If you need to repeat building the project, you'd better to remove the existing CODEfolder and clone a new one from the Gitub (or save the clone one somewhere and copy it from there every time when building the project) as the built project contains a bunch of generated garages that prevent the exception from being triggered.",Bug Reproduction,True,640,CONTRIBUTOR,False,False,False,1.0,0.7969924812,1.0,0.4783715013,0.5410448066,0.4589551934,0.000914006537,0.1072383922
I tried to reproduce this locally on WSL and could not do it.,Bug Reproduction,False,61,CONTRIBUTOR,False,False,False,0.3939393939,0.0977443609,0.125,0.4809160305,0.5596707013,0.4403292987,0.1072383922,0.000211333354
"I also tried a clean Ubuntu 18.04 VM (Fyre) with 8-cores 256GB from a fresh install using the following sequence of commands:

CODE

I could not reproduce the issue.",Bug Reproduction,True,169,CONTRIBUTOR,False,False,False,1.0,0.2481203008,0.25,0.4834605598,0.5596707013,0.4403292987,0.1072383922,0.000211333354
"It was always succeeding:

CODE

I also tried using the exact same build as @ChengJin01:
CODE

I could not reproduce with this build either.",Bug Reproduction,True,147,CONTRIBUTOR,False,False,False,0.8484848485,0.2105263158,0.375,0.4860050891,0.5596707013,0.4403292987,0.1072383922,0.000211333354
The SCC in CODE was always removed before running.,Bug Reproduction,True,50,CONTRIBUTOR,False,False,False,0.2727272727,0.06766917293,0.5,0.4885496183,0.5596707013,0.4403292987,0.1072383922,0.000211333354
The test also seems to take a long time to finish.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.3333333333,0.08270676692,0.625,0.4910941476,0.5596707013,0.4403292987,0.1072383922,0.000211333354
"About 20 minutes or so, and thus is not easy to work with to investigate JIT failures.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.5151515152,0.1278195489,0.75,0.4936386768,0.5596707013,0.4403292987,0.1072383922,0.000211333354
Is there anything else needed to reproduce?,Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.2121212121,0.05263157895,0.875,0.4961832061,0.5596707013,0.4403292987,0.1072383922,0.000211333354
Is there a way to cut down the runtime to failure (assuming I can reproduce eventually)?,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.4848484848,0.1203007519,1.0,0.4987277354,0.5596707013,0.4403292987,0.1072383922,0.000211333354
"@fjeremic , as for your questions, 
[1] the problem only occurs on CODE and was never detected on CODE or upwards.",Observed Bug Behaviour,True,115,CONTRIBUTOR,False,False,False,0.5675675676,0.1578947368,0.25,0.5012722646,0.5597074071,0.4402925929,0.000211333354,0.0002117421226
"[2] you'd better remove the whole CODE folder and clone a new one for your build every time; otherwise, the problem won't show up as there are a bunch of garage data previously generated in CODE.",Investigation and Exploration,True,195,CONTRIBUTOR,False,False,False,1.0,0.2781954887,0.5,0.5038167939,0.5597074071,0.4402925929,0.000211333354,0.0002117421226
[3] make sure the CODE directory (created by maven) is deleted before running every time.,Investigation and Exploration,True,89,CONTRIBUTOR,False,False,False,0.4054054054,0.1127819549,0.75,0.5063613232,0.5597074071,0.4402925929,0.000211333354,0.0002117421226
[4] make sure CODE ends up with the correct CODE and JDK directory.,Investigation and Exploration,True,67,CONTRIBUTOR,False,False,False,0.3513513514,0.0977443609,1.0,0.5089058524,0.5597074071,0.4402925929,0.000211333354,0.0002117421226
Is there a way to cut down the runtime to failure (assuming I can reproduce eventually),Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,1.0,0.1203007519,0.5,0.5114503817,0.5597441839,0.4402558161,0.0002117421226,0.03847288965
It will stop automatically once the exception occurs.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.5,0.06015037594,1.0,0.5139949109,0.5597441839,0.4402558161,0.0002117421226,0.03847288965
I've tried again on a clean Ubuntu 16.04 VM using 0.17.0 build and cloning without CODE.,Bug Reproduction,True,88,CONTRIBUTOR,False,False,False,0.5151515152,0.1278195489,0.05882352941,0.5165394402,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
The problem did not reproduce.,Bug Reproduction,False,30,CONTRIBUTOR,False,False,False,0.1515151515,0.03759398496,0.1176470588,0.5190839695,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
I cannot reproduce the issue as of now.,Bug Reproduction,False,39,CONTRIBUTOR,False,False,False,0.2727272727,0.06766917293,0.1764705882,0.5216284987,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
Never the less we can still continue the search using the reproduction environment @ChengJin01 has.,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,0.4545454545,0.1127819549,0.2352941176,0.524173028,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
"@ChengJin01 given your previous binary search (https://github.com/eclipse/openj9/issues/7684#issuecomment-577824697), the exception was seen every time on the 1st try when 6251 method was in the limit range.",Investigation and Exploration,False,207,CONTRIBUTOR,False,False,False,0.7575757576,0.1879699248,0.2941176471,0.5267175573,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
This to me implies that we should be able to observe a 100% reproducibility rate of the problem when CODE is specified.,Investigation and Exploration,True,119,CONTRIBUTOR,False,False,False,0.6666666667,0.1654135338,0.3529411765,0.5292620865,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
"Now, we know the problematic JIT compiled method is:
CODE

Given this knowledge, we can try to binary search on the optimization which caused the JIT method to be miscompiled.",Investigation and Exploration,True,178,CONTRIBUTOR,False,False,False,0.9696969697,0.2406015038,0.4117647059,0.5318066158,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
To do this we are going to use another JIT option called CODE.,Investigation and Exploration,True,62,CONTRIBUTOR,False,False,False,0.3939393939,0.0977443609,0.4705882353,0.534351145,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
This option specifies an upper bound for the optimization ID which to perform.,Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.3939393939,0.0977443609,0.5294117647,0.5368956743,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
Optimization IDs are linear and incremental.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.1818181818,0.04511278195,0.5882352941,0.5394402036,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
For a warm compile there should not be more than 200 optimizations that run.,Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,0.4242424242,0.1052631579,0.6470588235,0.5419847328,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
This means we can binary search starting with 200.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.2727272727,0.06766917293,0.7058823529,0.5445292621,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
"Could you setup more runs using the following starting command:
CODE

Note that here we are applying the CODE option to the method you found was the cause of the problem.",Investigation and Exploration,True,173,CONTRIBUTOR,False,False,False,1.0,0.2481203008,0.7647058824,0.5470737913,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
I expect starting with 200 we will fail.,Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,0.2424242424,0.06015037594,0.8235294118,0.5496183206,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
"Then let's binary search on that number, try 100 next and see if we pass/fail, then continue searching.",Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,0.5757575758,0.1428571429,0.8823529412,0.5521628499,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
"Eventually we'll arrive at an index, after which we'll carry out another binary search to find the transformation index.",Investigation and Exploration,False,120,CONTRIBUTOR,False,False,False,0.5757575758,0.1428571429,0.9411764706,0.5547073791,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
I'll explain how to do that once we've found the problematic optimization.,Investigation and Exploration,False,74,CONTRIBUTOR,False,False,False,0.3939393939,0.0977443609,1.0,0.5572519084,0.5664264175,0.4335735825,0.03847288965,0.0005240413151
"As discussed with @fjeremic, to speed up the test to trigger the exception on the JIT side, I will help to reproduce with the option as follows:
CODE and keep trying with CODE if it fails in this way.",Investigation and Exploration,True,201,CONTRIBUTOR,False,False,False,1.0,0.3007518797,1.0,0.5597964377,0.5665174366,0.4334825634,0.0005240413151,0.0302145381
"Already tried with
CODE
Now keep trying with CODE to see how it goes.",Investigation and Exploration,True,71,CONTRIBUTOR,False,False,False,1.0,0.1203007519,1.0,0.5623409669,0.5717653034,0.4282346966,0.0302145381,0.04854126846
"@fjeremic,   here's the latest results with CODE:
CODE
It looks like the exception still occurred even when CODE was reduced to 1.",Bug Reproduction,True,132,CONTRIBUTOR,False,False,False,1.0,0.1879699248,1.0,0.5648854962,0.5801962817,0.4198037183,0.04854126846,0.02434789149
Also tried with 20 times for (CODE) but the exception didn't show up (there were some dumps generated but has nothing to with CODE).,Bug Reproduction,True,132,CONTRIBUTOR,False,False,False,1.0,0.1804511278,0.5,0.5674300254,0.5844251894,0.4155748106,0.02434789149,9.4e-05
will try again with 100 times.,Task Progress,False,30,CONTRIBUTOR,False,False,False,0.25,0.04511278195,1.0,0.5699745547,0.5844251894,0.4155748106,0.02434789149,9.4e-05
Also tried with 20 times but the exception didn't show up (there some dumps but has nothing to with CODE).,Bug Reproduction,True,106,CONTRIBUTOR,False,False,False,1.0,0.1503759398,0.1428571429,0.572519084,0.5844415189,0.4155584811,9.4e-05,0.001518166493
Thanks for doing the runs.,Social Conversation,False,26,CONTRIBUTOR,False,False,False,0.25,0.03759398496,0.2857142857,0.5750636132,0.5844415189,0.4155584811,9.4e-05,0.001518166493
Ok so this seems to imply that CODE is when the issue starts happening.,Investigation and Exploration,True,71,CONTRIBUTOR,False,False,False,0.7,0.1052631579,0.4285714286,0.5776081425,0.5844415189,0.4155584811,9.4e-05,0.001518166493
Yes let's retry CODE 100 more times just to be certain.,Investigation and Exploration,True,55,CONTRIBUTOR,False,False,False,0.55,0.08270676692,0.5714285714,0.5801526718,0.5844415189,0.4155584811,9.4e-05,0.001518166493
I would also run CODE 100 times just to get a sense of what the reproducibility rate is.,Investigation and Exploration,True,88,CONTRIBUTOR,False,False,False,0.9,0.1353383459,0.7142857143,0.582697201,0.5844415189,0.4155584811,9.4e-05,0.001518166493
Once we have confirmation that CODE is when the issue starts happening we can proceed to find the CODE.,Investigation and Exploration,True,103,CONTRIBUTOR,False,False,False,0.95,0.1428571429,0.8571428571,0.5852417303,0.5844415189,0.4155584811,9.4e-05,0.001518166493
I'll explain how to do that once we have conclusive results.,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.55,0.08270676692,1.0,0.5877862595,0.5844415189,0.4155584811,9.4e-05,0.001518166493
"Just found the exception at 10th time with CODE (100 runs)
CODE",Bug Reproduction,True,64,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.5903307888,0.5847052044,0.4152947956,0.001518166493,0.0002035667511
Thanks @ChengJin01.,Social Conversation,False,19,CONTRIBUTOR,False,False,False,0.06896551724,0.01503759398,0.125,0.5928753181,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
"So this confirms it is a x86 codegen problem then, or perhaps ILGen.",Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,0.4482758621,0.0977443609,0.25,0.5954198473,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
@andrewcraik FYI.,Contribution and Commitment,False,17,CONTRIBUTOR,False,False,False,0.06896551724,0.01503759398,0.375,0.5979643766,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
Next thing we'll need to do is collect a trace log of a passing run and a failing run.,Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.6551724138,0.1428571429,0.5,0.6005089059,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
"To do this you can specify the following command:

CODE

It will output a file (JIT trace log) that begins with CODE in your present working directory.",Investigation and Exploration,True,155,CONTRIBUTOR,False,False,False,1.0,0.2180451128,0.625,0.6030534351,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
We'll need a trace log from a failing run and a trace log from a passing run to compare.,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.6551724138,0.1428571429,0.75,0.6055979644,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
Once we have the two logs we can being investigating to see what could have potentially gone wrong.,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,0.6206896552,0.1353383459,0.875,0.6081424936,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
We may also be able to deduce what the difference between the passing and the failing logs are which may help us improve reproducibility rate.,Investigation and Exploration,False,142,CONTRIBUTOR,False,False,False,0.8620689655,0.1879699248,1.0,0.6106870229,0.5847405612,0.4152594388,0.0002035667511,0.1071746243
Already collected the trace logs as required above and sent them all to @fjeremic.,Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,1.0,0.1052631579,1.0,0.6132315522,0.6033553803,0.3966446197,0.1071746243,0.03283597098
@andrewcraik here is the latest log where the exception occurred.,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,0.303030303,0.07518796992,0.1666666667,0.6157760814,0.6090585554,0.3909414446,0.03283597098,0.001209954986
I believe this was collected with CODE.,Investigation and Exploration,True,39,CONTRIBUTOR,False,False,False,0.2121212121,0.05263157895,0.3333333333,0.6183206107,0.6090585554,0.3909414446,0.03283597098,0.001209954986
The log seems to be truncated as we never seemed to have reached binary encoding.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.4545454545,0.1127819549,0.5,0.6208651399,0.6090585554,0.3909414446,0.03283597098,0.001209954986
"The last tree during instruction selection we see is:

CODE

I suspect we can't functionally run with CODE because these CODE should have been reduced to something else in prepareForOSR pass.",Investigation and Exploration,True,195,CONTRIBUTOR,False,False,False,1.0,0.2481203008,0.6666666667,0.6234096692,0.6090585554,0.3909414446,0.03283597098,0.001209954986
Is this correct?,Investigation and Exploration,False,16,CONTRIBUTOR,False,False,False,0.09090909091,0.02255639098,0.8333333333,0.6259541985,0.6090585554,0.3909414446,0.03283597098,0.001209954986
[jitlog_withCFR.zip] URL,Investigation and Exploration,False,25,CONTRIBUTOR,False,False,False,0.06060606061,0.01503759398,1.0,0.6284987277,0.6090585554,0.3909414446,0.03283597098,0.001209954986
+1 last opt index 0 is not supported.,Investigation and Exploration,False,37,CONTRIBUTOR,False,False,False,0.3076923077,0.06015037594,0.5,0.631043257,0.6092687087,0.3907312913,0.001209954986,2.37e-05
Under nextgenHCR we need to run OSRguardInsertion / HCRGuard removal for the program to be valid - there is no implementation for that helper and never will be.,Investigation and Exploration,False,160,CONTRIBUTOR,False,False,False,1.0,0.1954887218,1.0,0.6335877863,0.6092687087,0.3907312913,0.001209954986,2.37e-05
I suspect the failure mode changed when the opt index was reduced and so we have a spurious problem here (unless the helper was not removed before codegen in the full run).,Investigation and Exploration,False,172,CONTRIBUTOR,False,False,False,1.0,0.2406015038,1.0,0.6361323155,0.6092728265,0.3907271735,2.37e-05,0.4902296135
@andrewcraik @fjeremic What's the next step here?,Task Progress,False,49,MEMBER,False,False,False,1.0,0.05263157895,1.0,0.6386768448,0.6944192462,0.3055807538,0.4902296135,0.0009859498065
"We need a log where the failure mode is not the codegen choking on a node which would be cleaned up without the debug options set, but rather the failure mode remains the same as the original problem report.",Investigation and Exploration,False,207,CONTRIBUTOR,False,False,False,1.0,0.2932330827,0.5,0.641221374,0.6945904927,0.3054095073,0.0009859498065,9.44e-05
Ideally this would have the lastOpt index set at the point where the failure mode changes but a log is a good start.,Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,0.5897435897,0.1729323308,1.0,0.6437659033,0.6945904927,0.3054095073,0.0009859498065,9.44e-05
I've been working with @ChengJin01 offline on this one in the background.,Task Progress,False,73,CONTRIBUTOR,False,False,False,0.325,0.0977443609,0.07692307692,0.6463104326,0.6946068931,0.3053931069,9.44e-05,0.004019012644
I still cannot readily reproduce the issue.,Bug Reproduction,False,43,CONTRIBUTOR,False,False,False,0.2,0.06015037594,0.1538461538,0.6488549618,0.6946068931,0.3053931069,9.44e-05,0.004019012644
With the limitfile or without.,Bug Reproduction,False,30,CONTRIBUTOR,False,False,False,0.125,0.03759398496,0.2307692308,0.6513994911,0.6946068931,0.3053931069,9.44e-05,0.004019012644
I kicked off a large batch of 7 runs over the weekend to try and reproduce it with the limitfile using @ChengJin01's setup and it failed 0/7 times.,Bug Reproduction,False,147,CONTRIBUTOR,False,False,False,0.7,0.2105263158,0.3076923077,0.6539440204,0.6946068931,0.3053931069,9.44e-05,0.004019012644
"Each run took about ~7 hours or so:

CODE

I've also ran it dozens of times with other non-limiting settings, on several different VMs.",Investigation and Exploration,True,139,CONTRIBUTOR,False,False,False,0.7,0.2105263158,0.3846153846,0.6564885496,0.6946068931,0.3053931069,9.44e-05,0.004019012644
"I've been so far only able to reproduce it once, and it was without a limitfile where I was logging the presumably problematic method (CODE).",Bug Reproduction,True,141,CONTRIBUTOR,False,False,False,0.65,0.1954887218,0.4615384615,0.6590330789,0.6946068931,0.3053931069,9.44e-05,0.004019012644
"When the CODE was thrown there was no JIT trace log generated, meaning the presumably problematic method which we limited down was never compiled.",Observed Bug Behaviour,True,146,CONTRIBUTOR,False,False,False,0.6,0.1804511278,0.5384615385,0.6615776081,0.6946068931,0.3053931069,9.44e-05,0.004019012644
I'm not sure we can feasibly make progress given how long it takes to run this and the fact that we cannot reliably reproduce it.,Investigation and Exploration,False,129,CONTRIBUTOR,False,False,False,0.65,0.1954887218,0.6153846154,0.6641221374,0.6946068931,0.3053931069,9.44e-05,0.004019012644
"Assuming there is a miscompilation, I don't know of a way of narrowing it down other than limiting to an optimization as the CODE occurs after the method execution, so we don't really know what to look for.",Investigation and Exploration,True,206,CONTRIBUTOR,False,False,False,0.95,0.2857142857,0.6923076923,0.6666666667,0.6946068931,0.3053931069,9.44e-05,0.004019012644
The presumably problematic method inlines ~120 other methods so trying to eyeball it is not going to work.,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.45,0.1353383459,0.7692307692,0.6692111959,0.6946068931,0.3053931069,9.44e-05,0.004019012644
Unless we can reliably reproduce and run the test within a reasonable amount of time I don't see us making progress on this one.,Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,0.6,0.1804511278,0.8461538462,0.6717557252,0.6946068931,0.3053931069,9.44e-05,0.004019012644
Couple this with the fact that we cannot seem to reproduce the issue with 0.18.0 or later builds leads me to suggest we close this off as fixed in an upstream build and move on.,Task Progress,False,177,CONTRIBUTOR,False,False,False,0.9,0.2706766917,0.9230769231,0.6743002545,0.6946068931,0.3053931069,9.44e-05,0.004019012644
"There is a decent possibility the bug has been fixed in 0.18.0, and even if it is not and is somehow hidden it should pop up in some other test eventually where it will be much easier to track down.",Task Progress,False,198,CONTRIBUTOR,False,False,False,1.0,0.3007518797,1.0,0.6768447837,0.6946068931,0.3053931069,9.44e-05,0.004019012644
@fjeremic I am also running into the TransformationConfigurationException/ClassFormatError and working with Cheng (you were mentioned: see work item 142716).,Task Progress,False,157,NONE,False,False,False,1.0,0.1503759398,0.25,0.679389313,0.6953049426,0.3046950574,0.004019012644,0.2346732222
"I'm trying with latest release jdk-11.0.6+10_openj9-0.18.1 from https://adoptopenjdk.net/archive.html?variant=openjdk11&jvmVariant=openj9 , also with the flags Cheng has requested.",Task Progress,False,180,NONE,False,False,False,0.85,0.1278195489,0.5,0.6819338422,0.6953049426,0.3046950574,0.004019012644,0.2346732222
Please don't close this yet.,Action on Issue,False,28,NONE,False,False,False,0.25,0.03759398496,0.75,0.6844783715,0.6953049426,0.3046950574,0.004019012644,0.2346732222
I have not yet run my tests (they do take a while) with the 0.18.0 release.,Task Progress,False,75,NONE,False,False,False,0.8,0.1203007519,1.0,0.6870229008,0.6953049426,0.3046950574,0.004019012644,0.2346732222
I haven't seen the ClassFormatError using the 0.18.0 JDK release.,Task Progress,False,65,NONE,False,False,False,0.5555555556,0.07518796992,0.25,0.68956743,0.7360645869,0.2639354131,0.2346732222,0.004337443365
I think you can close this now.,Action on Issue,False,31,NONE,False,False,False,0.3888888889,0.05263157895,0.5,0.6921119593,0.7360645869,0.2639354131,0.2346732222,0.004337443365
But_ it would really good to know exactly why this problem was happening and what exactly fixed it.,Social Conversation,False,99,NONE,False,False,False,1.0,0.1353383459,1.0,0.6972010178,0.7360645869,0.2639354131,0.2346732222,0.004337443365
"As the originator of all of this work (reported on egeria wrt apache rat), I just wanted to confirm that I've not seen the issue recently, since updating to later jdk.",Investigation and Exploration,False,167,NONE,True,False,False,1.0,0.2406015038,0.5,0.6997455471,0.7368179436,0.2631820564,0.004337443365,0.2412282351
I will of course report if I do.,Social Conversation,False,32,NONE,True,False,False,0.25,0.06015037594,1.0,0.7022900763,0.7368179436,0.2631820564,0.004337443365,0.2412282351
I had moved my organization to use OpenJDK 11.0.6+10 Openj9 0.18.1.,Social Conversation,False,67,NONE,False,False,False,0.5714285714,0.09022556391,0.2,0.7048346056,0.7787161072,0.2212838928,0.2412282351,0.0001541057533
"I was really, really happy to no longer see the TransformerConfigurationException/ClassFormatError.",Social Conversation,False,99,NONE,False,False,False,0.5714285714,0.09022556391,0.4,0.7073791349,0.7787161072,0.2212838928,0.2412282351,0.0001541057533
"However, then we started seeing CODE that https://github.com/eclipse/openj9/issues/8548 is opened for and that https://github.com/eclipse/openj9/pull/8598 supposedly fixes.",Solution Discussion,True,172,NONE,False,False,False,0.7619047619,0.1203007519,0.6,0.7099236641,0.7787161072,0.2212838928,0.2412282351,0.0001541057533
Dan suggested that we run our Java process with CODE properties and we did and then saw the TransformerConfigurationException/ClassFormatError again.,Solution Discussion,True,149,NONE,False,False,False,1.0,0.1578947368,0.8,0.7124681934,0.7787161072,0.2212838928,0.2412282351,0.0001541057533
"So, I thought that this problem was fixed in the latest release but it appears to not be.",Social Conversation,False,89,NONE,False,False,False,0.8571428571,0.1353383459,1.0,0.7150127226,0.7787161072,0.2212838928,0.2412282351,0.0001541057533
@wraschke's experience indicates this unfortunately isn't the case as the issue has reoccured on CODE.,Investigation and Exploration,True,102,MEMBER,False,False,False,1.0,0.1127819549,0.3333333333,0.7175572519,0.7787428733,0.2212571267,0.0001541057533,0.007400755077
@fjeremic @ChengJin01 Can you take another look at this?,Contribution and Commitment,False,56,MEMBER,False,False,False,0.6,0.06766917293,0.6666666667,0.7201017812,0.7787428733,0.2212571267,0.0001541057533,0.007400755077
Maybe CODE will make it more reproducible...,Bug Reproduction,True,44,MEMBER,False,False,False,0.4666666667,0.05263157895,1.0,0.7226463104,0.7787428733,0.2212571267,0.0001541057533,0.007400755077
"@DanHeidinga, I tried with the options as suggested above with CODE.",Investigation and Exploration,True,68,CONTRIBUTOR,False,False,False,0.34375,0.08270676692,0.5,0.7251908397,0.7800282869,0.2199717131,0.007400755077,0.0003568549673
"According to the test results, it is hard to see it can be easily reproduced but I did see the  CODE 3 times out of 6 runs as follows:
CODE",Bug Reproduction,True,140,CONTRIBUTOR,False,False,False,1.0,0.2406015038,1.0,0.727735369,0.7800282869,0.2199717131,0.007400755077,0.0003568549673
@fjeremic is 3/6 sufficiently reproducible for you to make progress on this?,Investigation and Exploration,False,76,MEMBER,False,False,False,1.0,0.09022556391,1.0,0.7302798982,0.7800902679,0.2199097321,0.0003568549673,0.0003413217614
"@fjeremic is 3/6 sufficiently reproducible for you to make progress on this?

Depends on how reproducibility starts changing once we start limiting/adding tracing options.",Investigation and Exploration,False,173,CONTRIBUTOR,False,False,False,0.962962963,0.1954887218,0.25,0.7328244275,0.780149551,0.219850449,0.0003413217614,0.02856760951
"Given my earlier observations (https://github.com/eclipse/openj9/issues/7684#issuecomment-591045254), the method which @ChengJin01 identified via the limitfile was not compiled the only time I've been able to observe the exception.",Investigation and Exploration,False,231,CONTRIBUTOR,False,False,False,1.0,0.2030075188,0.5,0.7353689567,0.780149551,0.219850449,0.0003413217614,0.02856760951
So we'll need to perform the limiting again.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.2962962963,0.06015037594,0.75,0.737913486,0.780149551,0.219850449,0.0003413217614,0.02856760951
I'll get in touch with @ChengJin01 to get his setup with the 3/6 reproduction and see where we can get.,Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,0.7407407407,0.1503759398,1.0,0.7404580153,0.780149551,0.219850449,0.0003413217614,0.02856760951
"Repro rate with the following command was 3/10:

CODE

Console:

CODE

Going to continue limiting.",Bug Reproduction,True,106,CONTRIBUTOR,False,False,False,1.0,0.1428571429,0.5,0.7430025445,0.7851113681,0.2148886319,0.02856760951,0.00173440507
This test took 3:40 hrs to finish.,Task Progress,False,34,CONTRIBUTOR,False,False,False,0.3684210526,0.05263157895,1.0,0.7455470738,0.7851113681,0.2148886319,0.02856760951,0.00173440507
"Repro rate with following command was 2/3 (stopped early runs so we can move on):

CODE

Console:
CODE",Bug Reproduction,True,107,CONTRIBUTOR,False,False,False,1.0,0.1654135338,1.0,0.7480916031,0.7854126114,0.2145873886,0.00173440507,0.03284046744
Repro rate with following command was 0/10 which is expected given the earlier limiting found 6251 to be the problematic index.,Bug Reproduction,False,127,CONTRIBUTOR,False,False,False,1.0,0.1578947368,0.5,0.7506361323,0.7911165675,0.2088834325,0.03284046744,0.001804304497
"I'll gear the runs towards that index again to see if we can converge.

CODE",Task Progress,True,78,CONTRIBUTOR,False,False,False,0.7619047619,0.1203007519,1.0,0.7531806616,0.7911165675,0.2088834325,0.03284046744,0.001804304497
"Repro rate with following command was 1/1 (killed early to make progress):

CODE",Bug Reproduction,True,82,CONTRIBUTOR,False,False,False,1.0,0.1127819549,1.0,0.7557251908,0.7914299514,0.2085700486,0.001804304497,0.005813915463
"Repro rate with following command was 5/7 (killed early to make progress):

CODE

Console:

CODE",Bug Reproduction,True,102,CONTRIBUTOR,False,False,False,1.0,0.1428571429,1.0,0.7582697201,0.7924397519,0.2075602481,0.005813915463,0.02606390197
"With CODE I can get the ClassFormatError (first attempt on a few of my tests) _plus_ the following:

CODEjava.lang.",Bug Reproduction,True,117,NONE,False,False,False,0.4545454545,0.1503759398,0.2,0.7608142494,0.796966708,0.203033292,0.02606390197,0.0009716429063
"NoClassDefFoundError: ()V
	at java.base/java.lang.J9VMInternals.prepareClassImpl(Native Method)
	at java.base/java.lang.J9VMInternals.prepare(J9VMInternals.java:349)
	at java.base/java.lang.Class.getConstructor(Class.java:668)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getTransletInstance(TemplatesImpl.java:556)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer(TemplatesImpl.java:584)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:818)
	at com.ibm.ws.webcontainer.osgi.mbeans.",Bug Reproduction,False,630,NONE,False,False,False,0.5454545455,0.1804511278,0.4,0.7633587786,0.796966708,0.203033292,0.02606390197,0.0009716429063
"PluginGenerator.generateXML(PluginGenerator.java:801)
	at com.ibm.ws.webcontainer.osgi.mbeans.",Bug Reproduction,False,95,NONE,False,False,False,0.09090909091,0.03007518797,0.6,0.7659033079,0.796966708,0.203033292,0.02606390197,0.0009716429063
"GeneratePluginConfigMBean.generatePluginConfig(GeneratePluginConfigMBean.java:160)
	at com.ibm.ws.webcontainer.osgi.mbeans.",Bug Reproduction,False,124,NONE,False,False,False,0.09090909091,0.03007518797,0.8,0.7684478372,0.796966708,0.203033292,0.02606390197,0.0009716429063
"GeneratePluginConfigMBean.generatePluginConfig(GeneratePluginConfigMBean.java:262)
	at com.ibm.ws.webserver.plugin.runtime.listeners.GeneratePluginConfigListener$1.run(GeneratePluginConfigListener.java:281)
	at com.ibm.ws.threading.internal.ExecutorServiceImpl$RunnableWrapper.run(ExecutorServiceImpl.java:239)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.ClassNotFoundException
	at java.base/java.lang.ClassLoader.findClass(ClassLoader.java:626)
	at java.base/java.lang.ClassLoader.loadClassHelper(ClassLoader.java:1180)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:1095)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:1078)
	at java.xml/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader.loadClass(TemplatesImpl.java:194)CODE",Bug Reproduction,True,1175,NONE,False,False,False,1.0,0.3308270677,1.0,0.7709923664,0.796966708,0.203033292,0.02606390197,0.0009716429063
@wraschke how long does your test take to execute?,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,1.0,0.06766917293,0.5,0.7735368957,0.7971354695,0.2028645305,0.0009716429063,4.17e-05
Is it self contained?,Investigation and Exploration,False,21,CONTRIBUTOR,False,False,False,0.4444444444,0.03007518797,1.0,0.7760814249,0.7971354695,0.2028645305,0.0009716429063,4.17e-05
"Repro rate with following command was 9/10:

CODE

Console:

CODE",Bug Reproduction,True,71,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.7786259542,0.7971427113,0.2028572887,4.17e-05,0.00412079602
"@fjeremic no, it's not self-contained.",Investigation and Exploration,False,38,NONE,False,False,False,0.2608695652,0.04511278195,0.25,0.7811704835,0.7978584392,0.2021415608,0.00412079602,0.0003049413581
This test runs as part of an automated build which can take several hours to complete.,Investigation and Exploration,False,86,NONE,False,False,False,0.6956521739,0.1203007519,0.5,0.7837150127,0.7978584392,0.2021415608,0.00412079602,0.0003049413581
"During my debugging I've done with Cheng, I've tried running tests locally but could not recreate the ClassFormatError or any exception.",Investigation and Exploration,False,136,NONE,False,False,False,1.0,0.1729323308,0.75,0.786259542,0.7978584392,0.2021415608,0.00412079602,0.0003049413581
Maybe a run with those flags could help.,Investigation and Exploration,False,40,NONE,False,False,False,0.347826087,0.06015037594,1.0,0.7888040712,0.7978584392,0.2021415608,0.00412079602,0.0003049413581
"Repro rate with following command was 3/5 (killed early to make progress):

CODE

Console:

CODE",Bug Reproduction,True,102,CONTRIBUTOR,False,False,False,1.0,0.1428571429,1.0,0.7913486005,0.7979114035,0.2020885965,0.0003049413581,0.1031699186
"Repro rate with following command was 10/10:

CODE

Console:

CODE",Bug Reproduction,True,72,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.7938931298,0.815830658,0.184169342,0.1031699186,0.000908283777
Is this 100% recreation rate pointing to a major clue about where this bug is?,Investigation and Exploration,False,78,NONE,False,False,False,1.0,0.1127819549,0.5,0.796437659,0.8159884149,0.1840115851,0.000908283777,6.58e-05
And how to fix it?,Solution Discussion,False,18,NONE,False,False,False,0.3333333333,0.03759398496,1.0,0.7989821883,0.8159884149,0.1840115851,0.000908283777,6.58e-05
"No, it seems JIT related but the issue is seen after the JIT method executes, and we have no idea what in the JIT method is causing things to go wrong.",Investigation and Exploration,False,151,CONTRIBUTOR,False,False,False,1.0,0.2330827068,0.5,0.8015267176,0.8159998455,0.1840001545,6.58e-05,0.004064385956
We can go on a wild hunt into the assembly but there are other ways to limit it down.,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,0.6129032258,0.1428571429,1.0,0.8040712468,0.8159998455,0.1840001545,6.58e-05,0.004064385956
"Repro rate with following command was 3/7:

CODE

Console:

CODE",Bug Reproduction,True,70,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.8066157761,0.8167057758,0.1832942242,0.004064385956,0.003360486467
"Repro rate with following command was 3/4:

CODE

Console:

CODE",Bug Reproduction,True,70,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.8091603053,0.8172894479,0.1827105521,0.003360486467,0.002753056363
"Repro rate with following command was 2/3:

CODE

Console:

CODE",Bug Reproduction,True,70,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.8117048346,0.8177676175,0.1822323825,0.002753056363,0.02271240842
@fjeremic does removing disableMethodHandleInlineWithoutPeeking make it go away?,Solution Discussion,False,80,CONTRIBUTOR,False,False,False,1.0,0.06015037594,1.0,0.8167938931,0.8222920177,0.1777079823,0.00333677789,0.00412079602
"Repro rate with following command was 4/7:

CODE

Console:

CODE",Bug Reproduction,True,70,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.8193384224,0.8230077456,0.1769922544,0.00412079602,3.68e-06
Trying this next.,Task Progress,False,17,CONTRIBUTOR,False,False,False,1.0,0.02255639098,1.0,0.8218829517,0.8230083846,0.1769916154,3.68e-06,0.004196826975
@andrewcraik the option makes no difference.,Task Progress,False,44,CONTRIBUTOR,False,False,False,1.0,0.04511278195,1.0,0.8269720102,0.823740371,0.176259629,1.76e-05,0.0001144552014
"This test result above hits the same method as checked before at https://github.com/eclipse/openj9/issues/7684#issuecomment-580817864 as follows:
CODE",Testing,True,151,CONTRIBUTOR,False,False,False,1.0,0.1278195489,1.0,0.8295165394,0.8237602504,0.1762397496,0.0001144552014,0.03159699343
"Repro rate with following command was 0/5:

CODE

So limiting while tracing is not able to reproduce the issue.",Bug Reproduction,True,115,CONTRIBUTOR,False,False,False,0.7,0.1578947368,0.25,0.8320610687,0.8292482315,0.1707517685,0.03159699343,0.02587954735
"There seems to be many empty trace files and vlogs generated, but looking at the non-empty ones (there are 4 of them) we can see the following:

CODE",Investigation and Exploration,True,151,CONTRIBUTOR,False,False,False,1.0,0.2255639098,0.5,0.834605598,0.8292482315,0.1707517685,0.03159699343,0.02587954735
So it looks like we tried to do a warm compile but failed with CODE likely because the method is massive.,Task Progress,True,105,CONTRIBUTOR,False,False,False,0.7,0.1578947368,0.75,0.8371501272,0.8292482315,0.1707517685,0.03159699343,0.02587954735
Going to try to reproduce with CODE instead to see if it will help as we need to continue the limiting on the one particular method.,Task Progress,True,132,CONTRIBUTOR,False,False,False,0.8666666667,0.1954887218,1.0,0.8396946565,0.8292482315,0.1707517685,0.03159699343,0.02587954735
"Repro rate with following command was 3/4:

CODE

Console:

CODE

Adding scratch space and allowing huge methods while only doing CODE did the trick.",Investigation and Exploration,True,157,CONTRIBUTOR,False,False,False,0.4117647059,0.2105263158,0.1666666667,0.8422391858,0.8337431676,0.1662568324,0.02587954735,0.00358081273
We are now again able to reproduce the issue.,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.1323529412,0.06766917293,0.3333333333,0.844783715,0.8337431676,0.1662568324,0.02587954735,0.00358081273
"Looking at the javacore of the first failures:

CODE

Then looking at the corresponding logs:
CODE

We can see in the verbose log that the method has to be compiled at a warm level to reproduce the issue:

CODE

Now peeking into the trace file, the inline table contains a stomping 697 entries, meaning that many methods were inlined into this compilation.",Task Progress,True,367,CONTRIBUTOR,False,False,False,1.0,0.5112781955,0.5,0.8473282443,0.8337431676,0.1662568324,0.02587954735,0.00358081273
There look to be over 100k nodes in the method.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.1470588235,0.07518796992,0.6666666667,0.8498727735,0.8337431676,0.1662568324,0.02587954735,0.00358081273
We need to continue to trim this down.,Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.1176470588,0.06015037594,0.8333333333,0.8524173028,0.8337431676,0.1662568324,0.02587954735,0.00358081273
I'm starting now with CODE,Task Progress,True,26,CONTRIBUTOR,False,False,False,0.07352941176,0.03759398496,1.0,0.8549618321,0.8337431676,0.1662568324,0.02587954735,0.00358081273
"Repro rate with following command was 3/4:

CODE

Console:

CODE

I checked the trace log of one of the failures and I glanced at the trees and did not see any CODE so GRA certainly didn't run, implying the CODE worked as intended.",Bug Reproduction,True,239,CONTRIBUTOR,False,False,False,1.0,0.3533834586,0.5,0.8575063613,0.8343651076,0.1656348924,0.00358081273,0.003611879142
Now off to further limiting.,Task Progress,False,28,CONTRIBUTOR,False,False,False,0.1063829787,0.03759398496,1.0,0.8600508906,0.8343651076,0.1656348924,0.00358081273,0.003611879142
"Repro rate with following command was 1/2:

CODE

Console:

CODE",Task Progress,True,70,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.8625954198,0.8349924434,0.1650075566,0.003611879142,0.03161211786
Unfortunately I'm unable to limit further due to OSR.,Task Progress,False,53,CONTRIBUTOR,False,False,False,0.6428571429,0.06766917293,0.6666666667,0.8676844784,0.8404830514,0.1595169486,0.03161211786,0.000959379849
Will be reaching out to the common team for help on how to proceed.,Contribution and Commitment,False,67,CONTRIBUTOR,False,False,False,1.0,0.1052631579,1.0,0.8702290076,0.8404830514,0.1595169486,0.03161211786,0.000959379849
Got in touch with @andrewcraik offline who suggested a path forward.,Contribution and Commitment,False,68,CONTRIBUTOR,False,False,False,1.0,0.08270676692,0.3333333333,0.8727735369,0.840649683,0.159350317,0.000959379849,0.00441061294
Many thanks for his help.,Social Conversation,False,25,CONTRIBUTOR,False,False,False,0.4545454545,0.03759398496,0.6666666667,0.8753180662,0.840649683,0.159350317,0.000959379849,0.00441061294
I'm continuing the limiting now.,Task Progress,False,32,CONTRIBUTOR,False,False,False,0.4545454545,0.03759398496,1.0,0.8778625954,0.840649683,0.159350317,0.000959379849,0.00441061294
"Repro rate with following command was 1/2 (killed early to make progress):

CODE

Console:

CODE

Looks like we're basically just down to inlining now.",Bug Reproduction,True,159,CONTRIBUTOR,False,False,False,1.0,0.2180451128,0.5,0.8829516539,0.8417096079,0.1582903921,0.001691893138,0.03111464651
Going to be building a custom JIT with some changes from @liqunl to enable us to carry on with CODE now.,Task Progress,True,104,CONTRIBUTOR,False,False,False,0.724137931,0.1578947368,1.0,0.8854961832,0.8417096079,0.1582903921,0.001691893138,0.03111464651
"Repro rate with the following command was 1/2 (killed early to make progress):

CODE

Console:

CODE

We built a custom JIT with some extra fixes that allowed us to continue the search.",Bug Reproduction,True,193,CONTRIBUTOR,False,False,False,1.0,0.2781954887,1.0,0.8880407125,0.8471138117,0.1528861883,0.03111464651,0.07341320126
"Just noting that the issue does reproduce with last night's nightly build:

Console:

CODE

Version:

CODE",Bug Reproduction,True,114,CONTRIBUTOR,False,False,False,1.0,0.1503759398,1.0,0.8905852417,0.8598647167,0.1401352833,0.07341320126,0.0001189516558
"This is best command I can reproduce with:

CODE

It appears that using CODE is not equivalent to using CODE which is a bit mysterious.",Bug Reproduction,True,139,CONTRIBUTOR,False,False,False,0.84375,0.2030075188,0.1428571429,0.893129771,0.859885377,0.140114623,0.0001189516558,0.06424166071
Looking at the trace logs of these two runs it appears that the inlining table of running with CODE is about half the size of the inlining table with the other option.,Investigation and Exploration,True,167,CONTRIBUTOR,False,False,False,1.0,0.2406015038,0.2857142857,0.8956743003,0.859885377,0.140114623,0.0001189516558,0.06424166071
"Further examination yields that the known object table was not recorded for the method handles, so we weren't able inline the method handle calls.",Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,0.75,0.1804511278,0.4285714286,0.8982188295,0.859885377,0.140114623,0.0001189516558,0.06424166071
We'll need inliner and method handle expertise to continue to drive progress on this defect.,Task Progress,False,92,CONTRIBUTOR,False,False,False,0.46875,0.1127819549,0.5714285714,0.9007633588,0.859885377,0.140114623,0.0001189516558,0.06424166071
Thankfully we now have a very reproducible environment in which we can drive progress.,Task Progress,False,86,CONTRIBUTOR,False,False,False,0.4375,0.1052631579,0.7142857143,0.903307888,0.859885377,0.140114623,0.0001189516558,0.06424166071
I've reached out to the optimizer team for further help.,Contribution and Commitment,False,56,CONTRIBUTOR,False,False,False,0.34375,0.08270676692,0.8571428571,0.9058524173,0.859885377,0.140114623,0.0001189516558,0.06424166071
We await further expertise now to make progress.,Contribution and Commitment,False,48,CONTRIBUTOR,False,False,False,0.25,0.06015037594,1.0,0.9083969466,0.859885377,0.140114623,0.0001189516558,0.06424166071
I've been speaking with @cathyzhyi offline about this.,Contribution and Commitment,False,54,CONTRIBUTOR,False,False,False,0.5,0.06766917293,0.25,0.9109414758,0.8710433064,0.1289566936,0.06424166071,0.006658022574
We have limited the issue down to method handle inlining in the inliner (CODE).,Task Progress,True,79,CONTRIBUTOR,False,False,False,0.7777777778,0.1052631579,0.5,0.9134860051,0.8710433064,0.1289566936,0.06424166071,0.006658022574
Yi is the subject matter expert in this area and will continue the investigation where I left off.,Task Progress,False,98,CONTRIBUTOR,False,False,False,1.0,0.1353383459,0.75,0.9160305344,0.8710433064,0.1289566936,0.06424166071,0.006658022574
Hopefully we can get to the bottom of this one soon as we are inching closer.,Task Progress,False,77,CONTRIBUTOR,False,False,False,0.8888888889,0.1203007519,1.0,0.9185750636,0.8710433064,0.1289566936,0.06424166071,0.006658022574
"@cathyzhyi if you comment in this issue, I can assign it to you",Contribution and Commitment,False,63,MEMBER,False,False,False,1.0,0.0977443609,1.0,0.9211195929,0.8721997171,0.1278002829,0.006658022574,0.001833735834
"@cathyzhyi if you comment in this issue, I can assign it to you

@DanHeidinga  please assign to me thanks!",Contribution and Commitment,False,108,CONTRIBUTOR,False,False,False,1.0,0.1578947368,1.0,0.9236641221,0.8725182129,0.1274817871,0.001833735834,0.1686297096
"We're past Milestone 2 for the 0.20.0 release, moving this forward to the next release.",Action on Issue,False,87,CONTRIBUTOR,False,False,False,0.7894736842,0.1127819549,0.5,0.9262086514,0.9018069699,0.09819303014,0.1686297096,0.005186864467
"If a low risk fix does become available in the next couple of weeks, please raise it for consideration.",Social Conversation,False,103,CONTRIBUTOR,False,False,False,1.0,0.1428571429,1.0,0.9287531807,0.9018069699,0.09819303014,0.1686297096,0.005186864467
"Any new news, Cathy?",Task Progress,False,20,NONE,False,False,False,1.0,0.03007518797,1.0,0.9312977099,0.9027078598,0.09729214018,0.005186864467,0.04177124329
So the problem is very likely to be related to incorrect inlining and around 500 hundred methods are inlined.,Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.8260869565,0.1428571429,0.3333333333,0.9338422392,0.909962974,0.09003702602,0.04177124329,0.03295492264
"I've managed to find the inlining branch that's responsible for the messed up constant pool entry which still involves 100 methods, unfortunately.",Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,1.0,0.1729323308,0.6666666667,0.9363867684,0.909962974,0.09003702602,0.04177124329,0.03295492264
Will keep digging through the coredumps to narrow down to a smaller subset of problematic inlined methods.,Task Progress,False,106,CONTRIBUTOR,False,False,False,0.7391304348,0.1278195489,1.0,0.9389312977,0.909962974,0.09003702602,0.04177124329,0.03295492264
Thanks for the update!,Social Conversation,False,22,NONE,False,False,False,1.0,0.03007518797,1.0,0.941475827,0.9156868095,0.0843131905,0.03295492264,0.02945136717
The problem happens because runMacro can expand the following code in CODE into multiple CODE calls https://github.com/eclipse/openj9/blob/06fa4ce85ed4632d1723a1ad346b8e00e9269b60/jcl/src/java.base/share/classes/java/lang/invoke/FilterArgumentsHandle.java#L86-L89.,Investigation and Exploration,True,264,CONTRIBUTOR,False,False,False,0.3777777778,0.1278195489,0.1666666667,0.9440203562,0.9208021236,0.07919787637,0.02945136717,0.001354250294
"However, our inliner currently can't handle the case where multiple callsites sharing the same bytecode info.",Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.3555555556,0.1203007519,0.3333333333,0.9465648855,0.9208021236,0.07919787637,0.02945136717,0.001354250294
"The prex argue info is created for the  CODE callsites  but mixed up with the callNode from CODE because the bytecode info are the same, resulting in CODE corrupting temps slots of CODE which explains the string appearing in wrong constant pool entry.",Investigation and Exploration,True,251,CONTRIBUTOR,False,False,False,1.0,0.3383458647,0.6666666667,0.951653944,0.9208021236,0.07919787637,0.02945136717,0.001354250294
Will try with a tactical fix first.,Task Progress,False,35,CONTRIBUTOR,False,False,False,0.1555555556,0.05263157895,0.8333333333,0.9541984733,0.9208021236,0.07919787637,0.02945136717,0.001354250294
To fix inliner properly to be able to handle different calls with the same bytecode info needs more consideration.,Solution Discussion,False,114,CONTRIBUTOR,False,False,False,0.4222222222,0.1428571429,1.0,0.9567430025,0.9208021236,0.07919787637,0.02945136717,0.001354250294
"So excited that you figured this out, Cathy!!",Social Conversation,False,45,NONE,False,False,False,1.0,0.06015037594,1.0,0.9592875318,0.921037339,0.07896266095,0.001354250294,0.0003748407846
"I'm going to tentatively move this back to the 0.20.0 milestone, hoping that a fix will be available and can go into the release.",Action on Issue,False,129,CONTRIBUTOR,False,False,False,1.0,0.1804511278,1.0,0.9618320611,0.9211024439,0.07889755605,0.0003748407846,0.1687874943
@cathyzhyi  Any update on the tactical fix?,Task Progress,False,43,NONE,False,False,False,1.0,0.06015037594,0.5,0.9643765903,0.9504186061,0.04958139394,0.1687874943,0.001789180059
Many thanks!,Social Conversation,False,12,NONE,False,False,False,0.25,0.01503759398,1.0,0.9669211196,0.9504186061,0.04958139394,0.1687874943,0.001789180059
@cathyzhyi Any update on the tactical fix?,Task Progress,False,42,CONTRIBUTOR,False,False,False,0.3043478261,0.05263157895,0.2,0.9694656489,0.950729363,0.04927063696,0.001789180059,0.03518393768
"Many thanks!

@vij-singh After more investigation, I find that this problem should only happen when using optionCODE to disable without peeking.",Solution Discussion,True,146,CONTRIBUTOR,False,False,False,1.0,0.1729323308,0.4,0.9720101781,0.950729363,0.04927063696,0.001789180059,0.03518393768
The without Peeking version was delivered early Jan so by default builds after Jan shouldn't have this issue.,Task Progress,False,109,CONTRIBUTOR,False,False,False,0.7826086957,0.1353383459,0.6,0.9745547074,0.950729363,0.04927063696,0.001789180059,0.03518393768
"However, given CODE is supposed to be a workaround when the without peeking doesn't work we should still fix it.",Workarounds,True,112,CONTRIBUTOR,False,False,False,0.8695652174,0.1503759398,0.8,0.9770992366,0.950729363,0.04927063696,0.001789180059,0.03518393768
Fixes are still under testing: https://github.com/eclipse/openj9/pull/9158 and https://github.com/eclipse/omr/pull/5035,Task Progress,False,119,CONTRIBUTOR,False,False,False,0.347826087,0.06015037594,1.0,0.9796437659,0.950729363,0.04927063696,0.001789180059,0.03518393768
"It's too late to put any fixes into the 0.20.0 release, moving forward.",Action on Issue,False,71,CONTRIBUTOR,False,False,False,1.0,0.0977443609,1.0,0.9821882952,0.9568403491,0.04315965092,0.03518393768,0.2148438586
fixes should be merged,Action on Issue,False,22,CONTRIBUTOR,False,False,False,1.0,0.03007518797,1.0,0.9847328244,0.9941558944,0.005844105639,0.2148438586,0.0005988459646
"@andrewcraik @cathyzhyi if the fixes are merged, can this be closed?",Action on Issue,False,68,CONTRIBUTOR,False,False,False,1.0,0.08270676692,0.5,0.9872773537,0.994259906,0.005740093991,0.0005988459646,0.000403454585
The OMR change has promoted.,Task Progress,False,28,CONTRIBUTOR,False,False,False,0.4545454545,0.03759398496,1.0,0.989821883,0.994259906,0.005740093991,0.0005988459646,0.000403454585
Yes this should be fixed - closing - please reopen if further issues are seen once the update has been picked up.,Action on Issue,False,113,CONTRIBUTOR,False,False,False,1.0,0.1503759398,1.0,0.9923664122,0.9943299808,0.00567001925,0.000403454585,0.03182672137
Great news - thanks folks!,Social Conversation,False,26,NONE,False,False,False,0.5,0.03007518797,0.5,0.9949109415,0.9998578626,0.0001421374188,0.03182672137,0.0008183546901
@loriadi Lori - just making sure you saw this,Social Conversation,False,45,NONE,False,False,False,1.0,0.06015037594,1.0,0.9974554707,0.9998578626,0.0001421374188,0.03182672137,0.0008183546901
Thank you everyone!,Social Conversation,False,19,NONE,False,False,True,1.0,0.02255639098,1.0,1.0,1.0,0.0,0.0008183546901,0.0
OpenJ9 / OMR fails to build on AIX when using latest XLC v16.1,Investigation and Exploration,False,63,CONTRIBUTOR,True,True,False,0.4444444444,0.06896551724,0.2,0.003676470588,0.0,1.0,0.0,0.2685593546
In OpenJDK jdk branch (jdk13) and hence the jdk13 extensions repository there have been changes to use xlclang/xlclang++ if available on AIX systems.,Investigation and Exploration,False,149,CONTRIBUTOR,True,True,False,0.8888888889,0.1379310345,0.4,0.007352941176,0.0,1.0,0.0,0.2685593546
If XLC 16.1 is installed then xlclang/xlclang++ is provided and used when building OpenJ9/OMR.,Investigation and Exploration,False,94,CONTRIBUTOR,True,True,False,0.5925925926,0.09195402299,0.6,0.01102941176,0.0,1.0,0.0,0.2685593546
When using  xlclang/xlclang++ there are quite a lot of compiler/linker options that are not supported anymore and cause the build to fail.,Investigation and Exploration,False,138,CONTRIBUTOR,True,True,False,0.9259259259,0.1436781609,0.8,0.01470588235,0.0,1.0,0.0,0.2685593546
"@groeges wrote:
Have just seen that the minimum compiler version for JDK 13 on AIX is now XLC 16.1 (so that the newer xlclang/xlclang++ can be used).",Observed Bug Behaviour,False,150,CONTRIBUTOR,False,False,False,1.0,0.1666666667,1.0,0.02205882353,0.09584147938,0.9041585206,0.2685593546,0.3169477336
related OMR issue: https://github.com/eclipse/omr/issues/3775,Investigation and Exploration,False,61,MEMBER,False,False,False,1.0,0.02298850575,1.0,0.02573529412,0.2089514462,0.7910485538,0.3169477336,0.2738098908
related OMR issue:,Investigation and Exploration,False,18,CONTRIBUTOR,False,False,False,1.0,0.01724137931,0.5,0.02941176471,0.3066666981,0.6933333019,0.2738098908,1.0
https://github.com/eclipse/omr/issues/3927,Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.3333333333,0.005747126437,1.0,0.03308823529,0.3066666981,0.6933333019,0.2738098908,1.0
"We're likely at the ""go / no-go"" point for AIX to make JDK 13.",Investigation and Exploration,False,62,MEMBER,False,False,False,0.8235294118,0.08045977011,0.3333333333,0.03676470588,0.663539314,0.336460686,1.0,0.02235494254
Build is broken so testing hasn't been run yet.,Investigation and Exploration,False,47,MEMBER,False,False,False,0.5294117647,0.05172413793,0.6666666667,0.04044117647,0.663539314,0.336460686,1.0,0.02235494254
Let's limit the PRs for this going into 0.16 until we're sure we're going to ship it.,Action on Issue,False,85,MEMBER,False,False,False,1.0,0.09770114943,1.0,0.04411764706,0.663539314,0.336460686,1.0,0.02235494254
"Too late for the 0.16 release now, moving to the next release.",Action on Issue,False,62,CONTRIBUTOR,False,False,False,0.5217391304,0.06896551724,0.5,0.04779411765,0.6715171808,0.3284828192,0.02235494254,0.1010162401
"Since the next release is next month, we'll try to get AIX working in 0.17 rather than do a late update to 0.16.",Action on Issue,False,112,CONTRIBUTOR,False,False,False,1.0,0.132183908,1.0,0.05147058824,0.6715171808,0.3284828192,0.02235494254,0.1010162401
"Running a build with all the fixes to date applied and DDR disabled resulted in the following, Illegal instruction.",Investigation and Exploration,False,115,CONTRIBUTOR,False,False,False,1.0,0.1091954023,0.5,0.05514705882,0.7075671106,0.2924328894,0.1010162401,0.003001622719
"Machine used is a P7.
CODE",Investigation and Exploration,True,27,CONTRIBUTOR,False,False,False,0.3684210526,0.04022988506,1.0,0.05882352941,0.7075671106,0.2924328894,0.1010162401,0.003001622719
"@gita-omr the CODE happens when running CODE, but not CODE.",Contribution and Commitment,True,59,CONTRIBUTOR,False,False,False,0.7333333333,0.0632183908,0.3333333333,0.0625,0.7086383076,0.2913616924,0.003001622719,0.005841410604
"I have the JVM which I can make accessible, can somebody pls take a look.",Contribution and Commitment,False,73,CONTRIBUTOR,False,False,False,1.0,0.08620689655,0.6666666667,0.06617647059,0.7086383076,0.2913616924,0.003001622719,0.005841410604
@zl-wang,Contribution and Commitment,False,8,CONTRIBUTOR,False,False,False,0.1333333333,0.01149425287,1.0,0.06985294118,0.7086383076,0.2913616924,0.003001622719,0.005841410604
"Sure, we'll take a look as soon as somebody is available.",Contribution and Commitment,False,57,CONTRIBUTOR,False,False,False,1.0,0.0632183908,1.0,0.07352941176,0.7107229471,0.2892770529,0.005841410604,0.0103669977
"I don't expect this is going to make the 0.17 release, so moving it out.",Action on Issue,False,72,CONTRIBUTOR,False,False,False,1.0,0.08620689655,1.0,0.07720588235,0.7144226447,0.2855773553,0.0103669977,0.0106775552
@keithc-ca I heard you looked at the 'java -version' crash.,Social Conversation,False,59,CONTRIBUTOR,False,False,False,1.0,0.0632183908,0.5,0.08088235294,0.7182331717,0.2817668283,0.0106775552,7.05e-05
Please let us know if we can help.,Social Conversation,False,34,CONTRIBUTOR,False,False,False,0.7272727273,0.04597701149,1.0,0.08455882353,0.7182331717,0.2817668283,0.0106775552,7.05e-05
I have _not_ looked at that.,Social Conversation,False,28,CONTRIBUTOR,False,False,False,1.0,0.03448275862,1.0,0.08823529412,0.7182583391,0.2817416609,7.05e-05,5.94e-05
"Sure, we will look into it",Contribution and Commitment,False,26,CONTRIBUTOR,False,False,False,1.0,0.03448275862,1.0,0.09191176471,0.7182795439,0.2817204561,5.94e-05,0.001423319644
It crashes on the first instruction (usually 'ld') of any compiled method.,Social Conversation,False,74,CONTRIBUTOR,False,False,False,1.0,0.06896551724,0.3333333333,0.09558823529,0.7187874877,0.2812125123,0.001423319644,0.0002320026376
The instruction seems to be well formed.,Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,0.5833333333,0.04022988506,0.6666666667,0.09926470588,0.7187874877,0.2812125123,0.001423319644,0.0002320026376
"Perhaps, something is wrong with the memory allocated for the code cache.",Investigation and Exploration,False,73,CONTRIBUTOR,False,False,False,1.0,0.06896551724,1.0,0.1029411765,0.7187874877,0.2812125123,0.001423319644,0.0002320026376
"@gita-omr   I suspected it is PPCCodeSync.inc not compiled correctly, such that generated instructions are not synchronized (with iCache and IBUF).",Investigation and Exploration,False,147,CONTRIBUTOR,False,False,False,1.0,0.1264367816,0.2,0.1066176471,0.7188702831,0.2811297169,0.0002320026376,0.00724878302
"xlclang++ might go down the path of
defined(__IBMC__)",Investigation and Exploration,False,54,CONTRIBUTOR,False,False,False,0.4090909091,0.05172413793,0.4,0.1102941176,0.7188702831,0.2811297169,0.0002320026376,0.00724878302
"|| defined(__IBMCPP__), but the built-in(s) are not recognized.",Investigation and Exploration,False,63,CONTRIBUTOR,False,False,False,0.4090909091,0.05172413793,0.6,0.1139705882,0.7188702831,0.2811297169,0.0002320026376,0.00724878302
"Since it is clang, it must recognize the gcc asm inlining.",Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.5,0.0632183908,0.8,0.1176470588,0.7188702831,0.2811297169,0.0002320026376,0.00724878302
It can be changed to take the \#else path.,Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.4090909091,0.05172413793,1.0,0.1213235294,0.7188702831,0.2811297169,0.0002320026376,0.00724878302
Thanks for the lead but it did not seem to help.,Social Conversation,False,48,CONTRIBUTOR,False,False,False,0.7857142857,0.0632183908,0.3333333333,0.125,0.7214571752,0.2785428248,0.00724878302,0.01330093329
Most likely it has something to do with the way code cache is allocated.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,1.0,0.08045977011,0.6666666667,0.1286764706,0.7214571752,0.2785428248,0.00724878302,0.01330093329
Trying to find the exact place in the port library where it happens.,Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,0.9285714286,0.07471264368,1.0,0.1323529412,0.7214571752,0.2785428248,0.00724878302,0.01330093329
"Progress so far:
1) Was able to build JDK 13 with xlclang++ and reproduce the problem with my build
2) applied the suggestion from @zl-wang above and rebuilt from scratch since incremental build does not seem to be working.",Task Progress,False,225,CONTRIBUTOR,False,False,False,0.6774193548,0.2413793103,0.25,0.1360294118,0.7262039141,0.2737960859,0.01330093329,0.008601580477
"Still got the same illegal instruction
3) looked at omrvmem.c : mprotect() is used to set memory properties.",Bug Reproduction,False,109,CONTRIBUTOR,False,False,False,0.2903225806,0.1034482759,0.5,0.1397058824,0.7262039141,0.2737960859,0.01330093329,0.008601580477
"Put printfs into both JDK8 and JDK 13 builds and neither set PROT_EXEC bit when running 'java -version' (but JDK 8 works of course)
4) enforcing setting the bit did not help either
5) I am actually not sure that mprotect() is even applied to the code cache.",Investigation and Exploration,False,259,CONTRIBUTOR,False,False,False,0.8064516129,0.2873563218,0.75,0.1433823529,0.7262039141,0.2737960859,0.01330093329,0.008601580477
"Maybe there is another place where we allocate it...
6) not being able to rebuild VM quickly (in both JDK8 and JDK 13) seriously hinders the investigation

Also, please note that as a part of this work, we need to make sure we can do debug builds with the new compiler, in addition to all the functional and performance testing.",Investigation and Exploration,False,331,CONTRIBUTOR,False,False,False,1.0,0.3563218391,1.0,0.1470588235,0.7262039141,0.2737960859,0.01330093329,0.008601580477
"Some interesting findings, on the same machine:

JDK 13 built with xlclang++ : fails
JDK 13 built with xlC 13 : fails (the same way)",Investigation and Exploration,False,135,CONTRIBUTOR,False,False,False,1.0,0.1436781609,0.5,0.1507352941,0.7292735826,0.2707264174,0.008601580477,0.009169774309
JDK 8 built with xlC 13: works,Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,0.28,0.04022988506,1.0,0.1544117647,0.7292735826,0.2707264174,0.008601580477,0.009169774309
"From the symptom description (IFU -- Instruction Fetch Unit -- saw invalid instruction from code cache, while debugger saw valid instruction),  the most likely crashing reason is still dCache",Investigation and Exploration,False,191,CONTRIBUTOR,False,False,False,0.6382978723,0.1724137931,0.1428571429,0.1580882353,0.7325460239,0.2674539761,0.009169774309,7.65e-05
<=> iCache synchronization issue.,Investigation and Exploration,False,33,CONTRIBUTOR,False,False,False,0.06382978723,0.01724137931,0.2857142857,0.1617647059,0.7325460239,0.2674539761,0.009169774309,7.65e-05
"If it were memory protection issue, it would be SIGSEGFAULT instead of  SIGILL.",Investigation and Exploration,False,79,CONTRIBUTOR,False,False,False,0.2978723404,0.08045977011,0.4285714286,0.1654411765,0.7325460239,0.2674539761,0.009169774309,7.65e-05
The direct explanation is j9method->extra out of order with respect to codegen output.,Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.2765957447,0.07471264368,0.5714285714,0.1691176471,0.7325460239,0.2674539761,0.009169774309,7.65e-05
"There are a couple potential reasons to be investigated next:
1) there is memory barrier between codegen output and writing j9method->extra, but it could implicitly depend on ppcCodeSync() having that barrier.",Investigation and Exploration,False,210,CONTRIBUTOR,False,False,False,0.6808510638,0.183908046,0.7142857143,0.1727941176,0.7325460239,0.2674539761,0.009169774309,7.65e-05
"Check out on that;
2) makefile is changed such that, for example, TR_HOST_POWER is somehow undefined, so that ppcCodeSync() is empty.",Investigation and Exploration,False,134,CONTRIBUTOR,False,False,False,0.4680851064,0.1264367816,0.8571428571,0.1764705882,0.7325460239,0.2674539761,0.009169774309,7.65e-05
"No sync and barrier at all.  Check out that from -qlist or dump disassembly;
3) ppcCacheLineSize is wrong ... for example it is too big (e.g. 256) that compiling output codeCache is not walked completely (I admit this is unlikely though ... just throw it out here).",Investigation and Exploration,False,266,CONTRIBUTOR,False,False,False,1.0,0.2701149425,1.0,0.1801470588,0.7325460239,0.2674539761,0.009169774309,7.65e-05
Thanks.,Social Conversation,False,7,CONTRIBUTOR,False,False,False,0.06666666667,0.005747126437,0.3333333333,0.1838235294,0.7325733414,0.2674266586,7.65e-05,0.004173448668
"It also occurred to me  it would’ve been segmentation fault, not illegal instruction.",Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,1.0,0.08620689655,0.6666666667,0.1875,0.7325733414,0.2674266586,7.65e-05,0.004173448668
Will check the macro...,Task Progress,False,23,CONTRIBUTOR,False,False,False,0.2666666667,0.02298850575,1.0,0.1911764706,0.7325733414,0.2674266586,7.65e-05,0.004173448668
"1) Verified that ppcCodeSync calls all the right synchronization instructions
2) was able to step through the debugger and put a breakpoint on the bctr instruction that jumps to the compiled code (from jitTransition())
3) ctr register points to the method entry and the method entry contains the right instruction
4) next stepi gives ""program not active"".",Task Progress,False,358,CONTRIBUTOR,False,False,False,1.0,0.3448275862,0.5,0.1948529412,0.7340627309,0.2659372691,0.004173448668,0.03667212771
Note that this happens even before we get to the first method instruction (between bctr and the first method instruction),Task Progress,False,121,CONTRIBUTOR,False,False,False,0.3333333333,0.1149425287,1.0,0.1985294118,0.7340627309,0.2659372691,0.004173448668,0.03667212771
"A bit more progress:
1) did verbose build from scratch for JDK 8 and JDK 13.",Task Progress,False,77,CONTRIBUTOR,False,False,False,0.2266666667,0.09770114943,0.5,0.2022058824,0.7471500091,0.2528499909,0.03667212771,0.0001206082958
"All compilation steps seem to be identical (using the same xlC 13 compiler for both)
2) enabled debug output in omrvmem.c. Again, code cache seems to be allocated in a similar way, with OMRPORT_VMEM_MEMORY_MODE_EXECUTE permissions:
[OUT8.txt] URL 
[OUT13.txt] URL 
3) tried to experiment with mixing object files from good and bad build, but  got into all kinds of make troubles
4) need to switch to an urgent PMR now",Task Progress,False,422,CONTRIBUTOR,False,False,False,1.0,0.4310344828,1.0,0.2058823529,0.7471500091,0.2528499909,0.03667212771,0.0001206082958
Maybe somebody knows how to check that memory was actually allocated with the EXECUTE permissions?,Task Progress,False,98,CONTRIBUTOR,False,False,False,1.0,0.08620689655,0.5,0.2095588235,0.7471930509,0.2528069491,0.0001206082958,0.0004931827962
@gacholio,Contribution and Commitment,False,9,CONTRIBUTOR,False,False,False,0.06666666667,0.005747126437,1.0,0.2132352941,0.7471930509,0.2528069491,0.0001206082958,0.0004931827962
@dmitripivkine please see above.,Contribution and Commitment,False,32,CONTRIBUTOR,False,False,False,1.0,0.02298850575,1.0,0.2169117647,0.7473690543,0.2526309457,0.0004931827962,0.0006037502447
Sorry I don't understand question.,Social Conversation,False,34,CONTRIBUTOR,False,False,False,0.1351351351,0.02873563218,0.3333333333,0.2205882353,0.7475845162,0.2524154838,0.0006037502447,2.74e-05
"If you are asking about issuers of memory allocation requests with OMRPORT_VMEM_MEMORY_MODE_EXECUTE there are only:
- J9::CodeCacheManager::allocateCodeCacheSegment() uses it as well as MEMORY_TYPE_CODE caused use the same flag for memory segments
- initS390WriteOnceHelpers() in compiler/runtime/Runtime.cpp",Investigation and Exploration,True,310,CONTRIBUTOR,False,False,False,1.0,0.2126436782,0.6666666667,0.2242647059,0.7475845162,0.2524154838,0.0006037502447,2.74e-05
I believe I did not miss other callers,Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.2162162162,0.04597701149,1.0,0.2279411765,0.7475845162,0.2524154838,0.0006037502447,2.74e-05
My current theory is that maybe somehow the returned memory did not have that property satisfied.,Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,1.0,0.09195402299,0.5,0.2316176471,0.7475942965,0.2524057035,2.74e-05,0.0003712750967
I was wondering if there is an API to check memory properties given its address.,Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.9375,0.08620689655,1.0,0.2352941176,0.7475942965,0.2524057035,2.74e-05,0.0003712750967
"Well I am not an expert on Executable memory for AIX
There are two scenarios for AIX for EXECUTE:
- for 4k pages use CODE
- for Large Pages (including default 64k)",Investigation and Exploration,True,166,CONTRIBUTOR,False,False,False,1.0,0.1896551724,0.25,0.2389705882,0.7477267944,0.2522732056,0.0003712750967,0.001172416587
"use CODE with CODE flag
Do you know which case do you have?",Investigation and Exploration,True,60,CONTRIBUTOR,False,False,False,0.4242424242,0.08045977011,0.5,0.2426470588,0.7477267944,0.2522732056,0.0003712750967,0.001172416587
"I guess shmget() one...
CODE is described in https://www.ibm.com/support/knowledgecenter/en/ssw_aix_71/filesreference/mode.h.html as CODE",Investigation and Exploration,True,138,CONTRIBUTOR,False,False,False,0.3636363636,0.06896551724,0.75,0.2463235294,0.7477267944,0.2522732056,0.0003712750967,0.001172416587
"However this flag is NOT mentioned in CODE manual https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/s_bostechref/shmget.html
Seems passing CODE to CODE in CODE field is not a legitimate (or obsolete) way (???)",Investigation and Exploration,True,218,CONTRIBUTOR,False,False,False,0.7878787879,0.1494252874,1.0,0.25,0.7477267944,0.2522732056,0.0003712750967,0.001172416587
Thanks a lot for the info.,Social Conversation,False,26,CONTRIBUTOR,False,False,False,0.8571428571,0.03448275862,0.5,0.2536764706,0.7481451978,0.2518548022,0.001172416587,0.02794923017
I think it fails on AIX 71.,Observed Bug Behaviour,False,27,CONTRIBUTOR,False,False,False,1.0,0.04022988506,1.0,0.2573529412,0.7481451978,0.2518548022,0.001172416587,0.02794923017
"One idea to move forward is like this:
1) since xlC13 can build java13, as you mentioned above and as it is used to, for both AIX and Linux;
2) Linux obviously didn't have this problem (I assumed it is gcc build);
3) Going back to ""older"" code base (of both OMR and OpenJ9 repositories  ... before any commits were made for xlclang++ build) to level-set the code base;
4) Build on both AIX and Linux using xlC13
5) See where these end up;",Investigation and Exploration,False,443,CONTRIBUTOR,False,False,False,1.0,0.5172413793,1.0,0.2610294118,0.7581195127,0.2418804873,0.02794923017,2.06e-05
i.e.  I highly suspected some commits (made for xlclang++) screwed something up somehow.,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,1.0,0.08045977011,1.0,0.2647058824,0.7581268479,0.2418731521,2.06e-05,0.0006493475044
"Yes, I think it's a good idea.",Social Conversation,False,30,CONTRIBUTOR,False,False,False,0.4375,0.04022988506,0.3333333333,0.2683823529,0.7583585823,0.2416414177,0.0006493475044,0.001068346158
@vsebe maybe you can try to build JDK 13 with xlC 13 with the older source?,Contribution and Commitment,False,75,CONTRIBUTOR,False,False,False,1.0,0.09195402299,0.6666666667,0.2720588235,0.7583585823,0.2416414177,0.0006493475044,0.001068346158
You might know better which commits were xlclang++ and which JDK 13 specific?,Contribution and Commitment,False,77,CONTRIBUTOR,False,False,False,0.8125,0.07471264368,1.0,0.2757352941,0.7583585823,0.2416414177,0.0006493475044,0.001068346158
@zl-wang  OpenJ9 on Linux PPC64 LE uses gcc not xlc.,Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,0.1967213115,0.06896551724,0.3333333333,0.2794117647,0.7587398458,0.2412601542,0.001068346158,0.0004175811221
JDK13 with xlc 13 would use xlc as compiler not xlclang.,Investigation and Exploration,False,56,CONTRIBUTOR,False,False,False,0.1803278689,0.0632183908,0.6666666667,0.2830882353,0.7587398458,0.2412601542,0.001068346158,0.0004175811221
"@gita-omr I do not have permissions to launch a build on https://ci.eclipse.org/openj9/.
To launch an AIX build using xlc 13 modify CODE in [defaults.yml] URL  at L246:
replace 
CODE 
with 
CODE
then launch a [personal build] URL  where VENDOR_REPO is your openj9 fork and VENDOR_BRANCH is the branch containing the above change.",Investigation and Exploration,True,335,CONTRIBUTOR,False,False,False,1.0,0.3505747126,1.0,0.2867647059,0.7587398458,0.2412601542,0.001068346158,0.0004175811221
"@vsebe yes, i knew.",Social Conversation,False,19,CONTRIBUTOR,False,False,False,0.2857142857,0.02298850575,0.3333333333,0.2904411765,0.758888869,0.241111131,0.0004175811221,0.0001148200426
"for comparison (with AIX), i was suggesting to configure Linux build to use xlC.",Solution Discussion,False,80,CONTRIBUTOR,False,False,False,1.0,0.08045977011,0.6666666667,0.2941176471,0.758888869,0.241111131,0.0004175811221,0.0001148200426
There is no xlclang in xlC13.,Solution Discussion,False,29,CONTRIBUTOR,False,False,False,0.4285714286,0.03448275862,1.0,0.2977941176,0.758888869,0.241111131,0.0004175811221,0.0001148200426
"On AIX, the OpenJDK code will fail to compile with xlc 13.",Observed Bug Behaviour,False,58,CONTRIBUTOR,False,False,False,1.0,0.06896551724,1.0,0.3014705882,0.7589298452,0.2410701548,0.0001148200426,4.13e-05
Although jdk12 has a patch to fix it.,Solution Discussion,False,37,CONTRIBUTOR,False,False,False,0.4705882353,0.04597701149,0.25,0.3051470588,0.7589445999,0.2410554001,4.13e-05,3.37e-05
You could apply it to jdk13 in a personal build.,Solution Discussion,False,48,CONTRIBUTOR,False,False,False,0.5882352941,0.05747126437,0.5,0.3088235294,0.7589445999,0.2410554001,4.13e-05,3.37e-05
https://github.com/ibmruntimes/openj9-openjdk-jdk12/commit/d127ea8ed60ffb70e61cb3eefcb1f16737f572ef,Solution Discussion,False,99,CONTRIBUTOR,False,False,False,0.05882352941,0.005747126437,0.75,0.3125,0.7589445999,0.2410554001,4.13e-05,3.37e-05
I suspect trying to build plinux with xlc will be considerable work since OpenJDK doesn't support it.,Solution Discussion,False,101,CONTRIBUTOR,False,False,False,1.0,0.09770114943,1.0,0.3161764706,0.7589445999,0.2410554001,4.13e-05,3.37e-05
I think was able to build JDK 13 with xlC 13 at least to the same point when using xlC 16 (xlclang).,Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,1.0,0.1264367816,0.5,0.3198529412,0.7589566145,0.2410433855,3.37e-05,1.24e-05
java -version gave the same Illegal Instruction as with xlC 16(xlclang).,Bug Reproduction,False,72,CONTRIBUTOR,False,False,False,0.5,0.0632183908,1.0,0.3235294118,0.7589566145,0.2410433855,3.37e-05,1.24e-05
"Here are the relevant xlc 16 changes I found:
https://github.com/eclipse/openj9/pull/6584
https://github.com/eclipse/openj9/pull/6694
https://github.com/eclipse/openj9/pull/7034
https://github.com/eclipse/omr/pull/4087
https://github.com/eclipse/omr/pull/4099 and https://github.com/eclipse/omr/pull/4119
https://github.com/eclipse/omr/pull/4285",Investigation and Exploration,False,351,CONTRIBUTOR,False,False,False,1.0,0.132183908,1.0,0.3272058824,0.758961041,0.241038959,1.24e-05,5.55e-06
"I think was able to build JDK 13 with xlC 13

Unless you had the harfbuzz fix, the OpenJDK code would fail to compile in a full build.",Solution Discussion,False,136,CONTRIBUTOR,False,False,False,1.0,0.1666666667,1.0,0.3308823529,0.7589630223,0.2410369777,5.55e-06,0.0002835062781
"Right, I am pretty sure I built JVM.",Solution Discussion,False,36,CONTRIBUTOR,False,False,False,0.8,0.04597701149,0.5,0.3345588235,0.759064198,0.240935802,0.0002835062781,0.01035388553
I saw the tracing I inserted inside the port library.,Solution Discussion,False,53,CONTRIBUTOR,False,False,False,1.0,0.05747126437,1.0,0.3382352941,0.759064198,0.240935802,0.0002835062781,0.01035388553
"Trying an xlc 13 build myself.
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/65/",Task Progress,False,107,CONTRIBUTOR,False,False,False,1.0,0.04597701149,1.0,0.3419117647,0.7627592162,0.2372407838,0.01035388553,0.000268149688
Thanks @pshipton,Social Conversation,False,16,CONTRIBUTOR,False,False,False,1.0,0.01149425287,1.0,0.3455882353,0.7628549115,0.2371450885,0.000268149688,0.000382851603
"Missed a step to set the VENDOR_REPO and BRANCH, try again
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/67/
CODE",Solution Discussion,True,141,CONTRIBUTOR,False,False,False,1.0,0.08620689655,1.0,0.3492647059,0.7629915407,0.2370084593,0.000382851603,0.00180747065
It's not compiling because of harfbuzz code.,Solution Discussion,False,44,CONTRIBUTOR,False,False,False,0.6363636364,0.04022988506,0.2,0.3529411765,0.7636365775,0.2363634225,0.00180747065,0.0005973713534
I thought I applied the fix from jdk12.,Solution Discussion,False,39,CONTRIBUTOR,False,False,False,0.7272727273,0.04597701149,0.4,0.3566176471,0.7636365775,0.2363634225,0.00180747065,0.0005973713534
I'll have to check it and see if I missed something.,Task Progress,False,52,CONTRIBUTOR,False,False,False,1.0,0.0632183908,0.6,0.3602941176,0.7636365775,0.2363634225,0.00180747065,0.0005973713534
"update: I see the problem, I'll fix it and try again.",Task Progress,False,53,CONTRIBUTOR,False,False,False,1.0,0.0632183908,0.8,0.3639705882,0.7636365775,0.2363634225,0.00180747065,0.0005973713534
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/68/,Task Progress,False,75,CONTRIBUTOR,False,False,False,0.09090909091,0.005747126437,1.0,0.3676470588,0.7636365775,0.2363634225,0.00180747065,0.0005973713534
"Still got illegal instruction as Gita said.
CODE",Bug Reproduction,True,49,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.3713235294,0.763849763,0.236150237,0.0005973713534,0.004433211296
"Hm, so you excluded all these changes: https://github.com/eclipse/openj9/issues/5074#issuecomment-539181459  ?",Solution Discussion,False,110,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.375,0.7654318547,0.2345681453,0.004433211296,5.66e-05
"No, but I don't see why they should be excluded.",Solution Discussion,False,48,CONTRIBUTOR,False,False,False,0.5882352941,0.05747126437,0.25,0.3786764706,0.7654520476,0.2345479524,5.66e-05,1.58e-05
Some only come into play when using xlc 16 but the build is using xlc 13.,Solution Discussion,False,73,CONTRIBUTOR,False,False,False,0.9411764706,0.09195402299,0.5,0.3823529412,0.7654520476,0.2345479524,5.66e-05,1.58e-05
JDK12 and earlier still work with those changes and xlc 13.,Solution Discussion,False,59,CONTRIBUTOR,False,False,False,0.6470588235,0.0632183908,0.75,0.3860294118,0.7654520476,0.2345479524,5.66e-05,1.58e-05
Need to do some brain storming what could be different with JDK13 that would affect the VM.,Solution Discussion,False,91,CONTRIBUTOR,False,False,False,1.0,0.09770114943,1.0,0.3897058824,0.7654520476,0.2345479524,5.66e-05,1.58e-05
"#7034 is not included in my build, as it's not a delivered change (it was reverted).",Solution Discussion,False,84,CONTRIBUTOR,False,False,False,1.0,0.09195402299,1.0,0.3933823529,0.7654576966,0.2345423034,1.58e-05,0.0001942018005
@gita-omr is there a particular change that seems suspect that I should remove and re-try?,Solution Discussion,False,90,CONTRIBUTOR,False,False,False,1.0,0.09770114943,1.0,0.3970588235,0.7655270019,0.2344729981,0.0001942018005,4.91e-05
To be honest I would rather remove all of them and then do a binary search.,Solution Discussion,False,75,CONTRIBUTOR,False,False,False,1.0,0.09195402299,1.0,0.4007352941,0.765544539,0.234455461,4.91e-05,4.26e-05
"If it passes with those removed, we will help with the binary search.",Solution Discussion,False,69,CONTRIBUTOR,False,False,False,1.0,0.07471264368,1.0,0.4044117647,0.7655597575,0.2344402425,4.26e-05,0.000272756665
"https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/71/
Rebuild without the following
eclipse/omr#4087
eclipse/omr#4285

eclipse/omr#4099 and eclipse/omr#4119 are obsolete now.",Solution Discussion,False,201,CONTRIBUTOR,False,False,False,1.0,0.1206896552,1.0,0.4080882353,0.7656570969,0.2343429031,0.000272756665,0.0001692768735
I am not sure how much I would bet on it :),Social Conversation,False,43,CONTRIBUTOR,False,False,False,0.9230769231,0.06896551724,0.5,0.4117647059,0.7657175072,0.2342824928,0.0001692768735,9.33e-06
but I am pretty sure it's the change in omrvmem.c in eclipse/omr#4087,Solution Discussion,False,69,CONTRIBUTOR,False,False,False,1.0,0.07471264368,1.0,0.4154411765,0.7657175072,0.2342824928,0.0001692768735,9.33e-06
Keep in mind we are running with that change for all other versions of java.,Solution Discussion,False,76,CONTRIBUTOR,False,False,False,1.0,0.08620689655,0.5,0.4191176471,0.7657208376,0.2342791624,9.33e-06,4.25e-06
Most of it isn't specific to any xlc version.,Solution Discussion,False,45,CONTRIBUTOR,False,False,False,0.6,0.05172413793,1.0,0.4227941176,0.7657208376,0.2342791624,9.33e-06,4.25e-06
A sign extension was introduced on some flags.,Solution Discussion,False,46,CONTRIBUTOR,False,False,False,1.0,0.04597701149,0.5,0.4264705882,0.7657223552,0.2342776448,4.25e-06,2.35e-05
We need to be careful either way.,Solution Discussion,False,33,CONTRIBUTOR,False,False,False,0.875,0.04022988506,1.0,0.4301470588,0.7657223552,0.2342776448,4.25e-06,2.35e-05
"https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/72/
Rebuild without the OMR changes in https://github.com/eclipse/openj9/issues/5074#issuecomment-540073636 and also
#6584
#6694

As previously mentioned #7034 was already reverted.",Solution Discussion,False,258,CONTRIBUTOR,False,False,False,1.0,0.132183908,1.0,0.4338235294,0.7657307443,0.2342692557,2.35e-05,0.0003407981718
"both builds with the xlc 16 changes reverted still get ""Illegal instruction"".",Bug Reproduction,False,77,CONTRIBUTOR,False,False,False,1.0,0.06896551724,1.0,0.4375,0.7658523659,0.2341476341,0.0003407981718,0.0005874486337
What is the harfbuzz fix?,Solution Discussion,False,25,CONTRIBUTOR,False,False,False,0.5555555556,0.02873563218,0.5,0.4411764706,0.7660620102,0.2339379898,0.0005874486337,0.000396081896
Is it the only thing that is still there?,Solution Discussion,False,41,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.4448529412,0.7660620102,0.2339379898,0.0005874486337,0.000396081896
harfbuzz is a graphical text shaping engine.,Solution Discussion,False,44,CONTRIBUTOR,False,False,False,0.3181818182,0.04022988506,0.3333333333,0.4485294118,0.766203361,0.233796639,0.000396081896,0.0002229068111
"It has nothing to do with this problem, but the code needs to be patched in order to compile with xlc 13.",Solution Discussion,False,105,CONTRIBUTOR,False,False,False,1.0,0.1264367816,0.6666666667,0.4522058824,0.766203361,0.233796639,0.000396081896,0.0002229068111
"The code was patched in the jdk12 repo, but not the jdk13 repo because the patch isn't needed for xlc 16 compiles.",Solution Discussion,False,114,CONTRIBUTOR,False,False,False,1.0,0.1264367816,1.0,0.4558823529,0.766203361,0.233796639,0.000396081896,0.0002229068111
This is very strange.,Social Conversation,False,21,CONTRIBUTOR,False,False,False,0.1,0.02298850575,0.3333333333,0.4595588235,0.7662829103,0.2337170897,0.0002229068111,4.94e-05
"At this point, could I summarize the scenarios as follows?
1) same code base (let's limit to OpenJ9 and OMR), disregarding JCL and related natives;
2) on same machine with same compiler (xlC13)
3) essentially same makefile(s) ???",Investigation and Exploration,False,232,CONTRIBUTOR,False,False,False,1.0,0.2298850575,0.6666666667,0.4632352941,0.7662829103,0.2337170897,0.0002229068111,4.94e-05
"Java8/11/12 builds are fine, but Java13 is not.",Observed Bug Behaviour,False,47,CONTRIBUTOR,False,False,False,0.2,0.04597701149,1.0,0.4669117647,0.7662829103,0.2337170897,0.0002229068111,4.94e-05
Seems accurate.,Social Conversation,False,15,CONTRIBUTOR,False,False,False,1.0,0.01149425287,1.0,0.4705882353,0.7663005317,0.2336994683,4.94e-05,5.75e-05
Should we try to build debug version?,Investigation and Exploration,False,37,CONTRIBUTOR,False,False,False,0.4375,0.04022988506,0.25,0.4742647059,0.766321062,0.233678938,5.75e-05,6.23e-05
Will be easier to step through.,Investigation and Exploration,False,31,CONTRIBUTOR,False,False,False,0.375,0.03448275862,0.5,0.4779411765,0.766321062,0.233678938,5.75e-05,6.23e-05
E.g. we could break right after the code cache is allocated and try to jump there.,Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,1.0,0.09195402299,0.75,0.4816176471,0.766321062,0.233678938,5.75e-05,6.23e-05
Also will be interesting to see if it still fails.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.625,0.05747126437,1.0,0.4852941176,0.766321062,0.233678938,5.75e-05,6.23e-05
"I went to confirm with AIX kernel folks:  what signal is mapped to, when executing from non-executable memory?",Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,0.4166666667,0.1149425287,0.1,0.4889705882,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
"(we don't want to consider the scenario of non-synchronized iCache anymore, since we tested to confirm the PPCCodeSync routine executed on the memory in question)

Enlightening answer:  SIGILL     i.e.  somehow the JIT codecache is not executable (pages not marked executable) in Java13 build.",Investigation and Exploration,False,295,CONTRIBUTOR,False,False,False,1.0,0.275862069,0.2,0.4926470588,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
"SED (Stack Execution Disable), if enabled, can cause writable-memory to be non-executable.",Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,0.2916666667,0.08045977011,0.3,0.4963235294,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
"But AIX default SED mode is ""select""  ((i.e.  SED is applied to selected programs).",Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,0.3333333333,0.09195402299,0.4,0.5,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
I doubted so-far tested machines are set differently.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.1875,0.05172413793,0.5,0.5036764706,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
Not consider this anymore.,Investigation and Exploration,False,26,CONTRIBUTOR,False,False,False,0.08333333333,0.02298850575,0.6,0.5073529412,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
Maybe we should check for executable/shared-lib header flags (there is a deprecated F_NOEXEC flag).,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,0.3333333333,0.09195402299,0.7,0.5110294118,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
This is remotely possible though ((i.e. I wouldn't bet on this).,Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.2291666667,0.0632183908,0.8,0.5147058824,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
I can think of the last reason:  the allocated memory is not properly marked.,Investigation and Exploration,False,77,CONTRIBUTOR,False,False,False,0.3125,0.08620689655,0.9,0.5183823529,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
Wondering if we can read back the page-protection/permission flags after codeCache is allocated but some point before we start to execute from it.,Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,0.5208333333,0.1436781609,1.0,0.5220588235,0.7663432784,0.2336567216,6.23e-05,0.0001376186725
Arrg ... it seemed impossible things actually happened.,Social Conversation,False,55,CONTRIBUTOR,False,False,False,0.4375,0.04022988506,0.5,0.5257352941,0.7663923908,0.2336076092,0.0001376186725,1.89e-05
"I found from Peter's java13 driver that F_NOEXEC is set, while java8 header flag is not.",Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,1.0,0.09195402299,1.0,0.5294117647,0.7663923908,0.2336076092,0.0001376186725,1.89e-05
linker command is of course the problem ...  different options are used.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,1.0,0.06896551724,1.0,0.5330882353,0.7663991358,0.2336008642,1.89e-05,1.59e-05
"Yes:
JDK8 link command:

/usr/vacpp/bin//xlc_r -q64 -q64 -brtl -bnolibpath -liconv -bexpall      -o /home/koblents/openj9-openjdk-jdk8/build/aix-ppc64-normal-server-release/jdk/objs/java_objs/java /home/koblents/openj9-openjdk-jdk8/build/aix-ppc64-normal-server-release/jdk/objs/java_objs/main.o   -L/home/koblents/openj9-openjdk-jdk8/build/aix-ppc64-normal-server-release/jdk/objs",Investigation and Exploration,False,384,CONTRIBUTOR,False,False,False,0.3563218391,0.3563218391,0.3333333333,0.5367647059,0.766404827,0.233595173,1.59e-05,0.0001754195096
"-ljli_static 

JDK13 link command:

( /opt/freeware/bin/rm -f /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java/BUILD_LAUNCHER_java_link.log && /usr/vacpp/bin//xlc_r **-b64 -brtl -bnorwexec -bnolibpath -bexpall -bernotok -btextpsize:64K -bdatapsize:64K -bstackpsize:64",Investigation and Exploration,False,319,CONTRIBUTOR,False,False,False,0.2298850575,0.2298850575,0.6666666667,0.5404411765,0.766404827,0.233595173,1.59e-05,0.0001754195096
"K -q64** -L/home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base -o /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java_objs/java /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java/main.o -ljli_static > >(/opt/freeware/bin/tee -a /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java/BUILD_LAUNCHER_java_link.log)) 2> >(/opt/freeware/bin/tee -a /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java/BUILD_LAUNCHER_java_link.log >&2) || ( exitcode=$? && /opt/freeware/bin/cp /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java/BUILD_LAUNCHER_java_link.log /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/make-support/failure-logs/support_native_java.base_java_BUILD_LAUNCHER_java_link.log && /opt/freeware/bin/cp /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/support/native/java.base/java/BUILD_LAUNCHER_java_link.cmdline /home/koblents/openj9-openjdk-jdk13/build/aix-ppc64-server-release/make-support/failure-logs/support_native_java.base_java_BUILD_LAUNCHER_java_link.cmdline && exit $exitcode ) ) ; 


Note the bunch of extra options and one of them: **-bnorwexec**",Investigation and Exploration,False,1370,CONTRIBUTOR,False,False,False,1.0,1.0,1.0,0.5441176471,0.766404827,0.233595173,1.59e-05,0.0001754195096
The change was https://github.com/ibmruntimes/openj9-openjdk-jdk13/commit/4684bdb39f02d0f39c170dab1639d6be0b5dd6d7,Investigation and Exploration,False,114,CONTRIBUTOR,False,False,False,1.0,0.02298850575,1.0,0.5477941176,0.7664674294,0.2335325706,0.0001754195096,7.18e-05
"I still a bit worry about the omrvmem.c change (eclipse/omr#4087), if it might cause some subtle issues in the future.",Solution Discussion,False,118,CONTRIBUTOR,False,False,False,1.0,0.1206896552,0.5,0.5514705882,0.7664930605,0.2335069395,7.18e-05,0.006331049572
But I don't know how the value is used really.,Solution Discussion,False,46,CONTRIBUTOR,False,False,False,0.4761904762,0.05747126437,1.0,0.5551470588,0.7664930605,0.2335069395,7.18e-05,0.006331049572
"FYI ...
I used ldedit to cancel F_NOEXEC on Peter's driver ... something like this:

milan:[zlwang] ldedit -b rwexec j9.64/bin/java
ldedit:  File j9.64/bin/java has been updated.",Solution Discussion,False,182,CONTRIBUTOR,False,False,False,0.4776119403,0.183908046,0.5,0.5588235294,0.7687524388,0.2312475612,0.006331049572,0.0002354283384
"Now, I can run -version at least:

milan:[zlwang] j9.64/bin/java -version
openjdk version ""13-internal"" 2019-09-17
OpenJDK Runtime Environment (build 13-internal+0-adhoc.jenkins.openj9-openjdk-jdk13)
Eclipse OpenJ9 VM (build aixxlc16-2f6383c98, JRE 13 AIX ppc64-64-Bit Compressed References 20190923_000000 (JIT enabled, AOT enabled)
OpenJ9   - 2f6383c98
OMR      - 69029bae
JCL      - b4b82f558d based on jdk-13+33)",Solution Discussion,False,424,CONTRIBUTOR,False,False,False,1.0,0.3850574713,1.0,0.5625,0.7687524388,0.2312475612,0.006331049572,0.0002354283384
"I tested Peter's driver with jitt & vich on different options (count=0, hot, etc).",Testing,False,82,CONTRIBUTOR,False,False,False,0.3823529412,0.07471264368,0.1111111111,0.5661764706,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
It was fine.,Solution Discussion,False,12,CONTRIBUTOR,False,False,False,0.08823529412,0.01724137931,0.2222222222,0.5698529412,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
The running (of xlclang++ build) depends on the availability of libc++.so (LLVM version of std c++ lib).,Solution Discussion,False,104,CONTRIBUTOR,False,False,False,0.5,0.09770114943,0.3333333333,0.5735294118,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
It is actually not available on most AIX installations.,Solution Discussion,False,55,CONTRIBUTOR,False,False,False,0.2647058824,0.05172413793,0.4444444444,0.5772058824,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
"So, the next immediate decision is about whether libc++ should be linked in statically.",Solution Discussion,False,87,CONTRIBUTOR,False,False,False,0.4117647059,0.08045977011,0.5555555556,0.5808823529,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
"As I had a suspicion before, it ran slower than I expected.",Investigation and Exploration,False,59,CONTRIBUTOR,False,False,False,0.3529411765,0.06896551724,0.6666666667,0.5845588235,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
We need some detailed evaluations of its performance (especially JIT-compiler and GC).,Solution Discussion,False,86,CONTRIBUTOR,False,False,False,0.3823529412,0.07471264368,0.7777777778,0.5882352941,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
The best example is to compare xlclang++ build against xlC build (on same code base).,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,0.4411764706,0.08620689655,0.8888888889,0.5919117647,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
"If we find xlclang++ not up to the task (say, more than 10% slower), we may need to ask xlC team for a possible fix (not high hope though, until Wyvern compiler is out).",Contribution and Commitment,False,169,CONTRIBUTOR,False,False,False,1.0,0.1954022989,1.0,0.5955882353,0.7688364567,0.2311635433,0.0002354283384,0.0003819065821
"@zl-wang note that build isn't a ""final"" build, the classes aren't in the correct format for fast loading, which would affect startup time, but not throughput.",Solution Discussion,False,159,CONTRIBUTOR,False,False,False,1.0,0.1551724138,0.3333333333,0.5992647059,0.7689727487,0.2310272513,0.0003819065821,0.01062274398
The build is an interim build produced by the build process.,Solution Discussion,False,60,CONTRIBUTOR,False,False,False,0.4074074074,0.0632183908,0.6666666667,0.6029411765,0.7689727487,0.2310272513,0.0003819065821,0.01062274398
The build needs to work in order to get to the next step and the final build.,Solution Discussion,False,77,CONTRIBUTOR,False,False,False,0.6296296296,0.09770114943,1.0,0.6066176471,0.7689727487,0.2310272513,0.0003819065821,0.01062274398
@zl-wang how do you propose we fix this problem?,Solution Discussion,False,48,CONTRIBUTOR,False,False,False,0.5,0.05747126437,0.3333333333,0.6102941176,0.7727637151,0.2272362849,0.01062274398,8.36e-05
"Do we need to remove the link flag, or is there some way to set executable with the flag enabled.",Solution Discussion,False,97,CONTRIBUTOR,False,False,False,1.0,0.1149425287,0.6666666667,0.6139705882,0.7727637151,0.2272362849,0.01062274398,8.36e-05
Strange that Hotspot can work with this flag.,Solution Discussion,False,45,CONTRIBUTOR,False,False,False,0.4,0.04597701149,1.0,0.6176470588,0.7727637151,0.2272362849,0.01062274398,8.36e-05
"@pshipton yes, the straightforward fix is to remove that linker option (-bnorwexec).",Solution Discussion,False,84,CONTRIBUTOR,False,False,False,0.9230769231,0.06896551724,0.3333333333,0.6213235294,0.7727935619,0.2272064381,8.36e-05,8.08e-05
i am not sure why it was put on in the first place.,Social Conversation,False,51,CONTRIBUTOR,False,False,False,1.0,0.07471264368,0.6666666667,0.625,0.7727935619,0.2272064381,8.36e-05,8.08e-05
F_NOEXEC was long deprecated.,Solution Discussion,False,29,CONTRIBUTOR,False,False,False,0.3076923077,0.02298850575,1.0,0.6286764706,0.7727935619,0.2272064381,8.36e-05,8.08e-05
"@zl-wang I know it seems straightforward to remove CODE, but this is a patch to the OpenJDK code, which we are trying to avoid.",Solution Discussion,True,127,CONTRIBUTOR,False,False,False,1.0,0.1436781609,0.3333333333,0.6323529412,0.772822397,0.227177603,8.08e-05,0.0002421616125
Better to work around it in OpenJ9/OMR if possible.,Solution Discussion,False,51,CONTRIBUTOR,False,False,False,0.4,0.05747126437,0.6666666667,0.6360294118,0.772822397,0.227177603,8.08e-05,0.0002421616125
"The reason for the change is recorded as CODE, so in theory we are losing this stack execution protection by removing the flag.",Solution Discussion,True,127,CONTRIBUTOR,False,False,False,0.92,0.132183908,1.0,0.6397058824,0.772822397,0.227177603,8.08e-05,0.0002421616125
@pshipton  somebody read too much into SED (Stack Execution Disable) for HotSpot.,Social Conversation,False,81,CONTRIBUTOR,False,False,False,0.5652173913,0.07471264368,0.1111111111,0.6433823529,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
One characteristic of enforcing SED is writable and executable cannot co-exist on the same page.,Solution Discussion,False,96,CONTRIBUTOR,False,False,False,0.7391304348,0.09770114943,0.2222222222,0.6470588235,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
"Thus, for java, it is a wrong reason (you have to write and execute from the same memory).",Solution Discussion,False,90,CONTRIBUTOR,False,False,False,0.7826086957,0.1034482759,0.3333333333,0.6507352941,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
SED enforcement doesn't depend on that XCOFF header flag at all (thus deprecated).,Solution Discussion,False,82,CONTRIBUTOR,False,False,False,0.5652173913,0.07471264368,0.4444444444,0.6544117647,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
"There are SED-related XCOFF header flags:  system, request, and exempt.",Solution Discussion,False,71,CONTRIBUTOR,False,False,False,0.5217391304,0.06896551724,0.5555555556,0.6580882353,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
sedmgr (SED manager) can set the global policy of a machine for SED (and do other things).,Solution Discussion,False,90,CONTRIBUTOR,False,False,False,0.7391304348,0.09770114943,0.6666666667,0.6617647059,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
"If the global policy is ""all"" (SED enforced for all programs), we need to get java exempted (exempt flag) in order to run.",Solution Discussion,False,122,CONTRIBUTOR,False,False,False,1.0,0.132183908,0.7777777778,0.6654411765,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
"The default policy is ""select""  (request SED for specific programs).",Solution Discussion,False,68,CONTRIBUTOR,False,False,False,0.4782608696,0.0632183908,0.8888888889,0.6691176471,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
Nothing is lost by removing that option.,Solution Discussion,False,40,CONTRIBUTOR,False,False,False,0.3043478261,0.04022988506,1.0,0.6727941176,0.7729088178,0.2270911822,0.0002421616125,7.44e-06
"The documentation for CODE at [1] suggests that it ought to fail with CODE when the flags include CODE set at [2], but it seems to just ignore CODE as it's not listed as a supported flag (it lists only 'subset of the access permissions that apply to files').",Solution Discussion,True,258,CONTRIBUTOR,False,False,False,1.0,0.2816091954,0.5,0.6764705882,0.7729114737,0.2270885263,7.44e-06,1.18e-05
"[1] https://www.ibm.com/support/knowledgecenter/beta/en/ssw_aix_72/s_bostechref/shmget.html
[2] https://github.com/eclipse/omr/blob/master/port/aix/omrvmem.c#L562",Solution Discussion,False,163,CONTRIBUTOR,False,False,False,0.1020408163,0.02873563218,1.0,0.6801470588,0.7729114737,0.2270885263,7.44e-06,1.18e-05
Would disabling write access after the code is produced allow execution?,Solution Discussion,False,72,CONTRIBUTOR,False,False,False,1.0,0.0632183908,0.5,0.6838235294,0.7729156893,0.2270843107,1.18e-05,7.3e-05
"If pages are large, that isn't likely to be practical.",Solution Discussion,False,54,CONTRIBUTOR,False,False,False,0.9090909091,0.05747126437,1.0,0.6875,0.7729156893,0.2270843107,1.18e-05,7.3e-05
it isn't practical at all.,Solution Discussion,False,26,CONTRIBUTOR,False,False,False,0.3846153846,0.02873563218,0.5,0.6911764706,0.7729417421,0.2270582579,7.3e-05,1.44e-05
"JIT runtime is patching JIT code regularly (for resolving, invalidation, and recompilation purposes).",Solution Discussion,False,101,CONTRIBUTOR,False,False,False,1.0,0.07471264368,1.0,0.6948529412,0.7729417421,0.2270582579,7.3e-05,1.44e-05
SED is a misnomer to me.,Solution Discussion,False,24,CONTRIBUTOR,False,False,False,0.8571428571,0.03448275862,0.5,0.6985294118,0.7729468852,0.2270531148,1.44e-05,0.0005238959763
It really is Writable Execution Disable (WED).,Solution Discussion,False,46,CONTRIBUTOR,False,False,False,1.0,0.04022988506,1.0,0.7022058824,0.7729468852,0.2270531148,1.44e-05,0.0005238959763
"If using the CODE flag is incorrect, we should be able to convince the OpenJDK project of the same and have the flag removed that way.",Solution Discussion,True,134,CONTRIBUTOR,False,False,False,1.0,0.1494252874,0.5,0.7058823529,0.7731338493,0.2268661507,0.0005238959763,0.0001229708481
@andrew-m-leonard please see https://github.com/eclipse/openj9/issues/5074#issuecomment-541123269,Social Conversation,False,97,CONTRIBUTOR,False,False,False,0.2307692308,0.03448275862,1.0,0.7095588235,0.7731338493,0.2268661507,0.0005238959763,0.0001229708481
"re using the strange option about HotSpot OpenJDK ... here is a trial for the latest java13 from Adopt:


-bash-5.0$ bin/java -version
/#
/#",Solution Discussion,False,145,CONTRIBUTOR,False,False,False,0.6756756757,0.1436781609,0.1666666667,0.7132352941,0.7731777342,0.2268222658,0.0001229708481,2.33e-05
"A fatal error has been detected by the Java Runtime Environment:
/#
/#  Internal Error (threadCritical_aix.cpp:45), pid=8978666, tid=258
/#  guarantee(ret == 0) failed: fatal error with pthread_mutex_lock()
/#
/# JRE version:  (13.0+33) (build )
/",Investigation and Exploration,False,253,CONTRIBUTOR,False,False,False,1.0,0.2126436782,0.3333333333,0.7169117647,0.7731777342,0.2268222658,0.0001229708481,2.33e-05
"# Java VM: OpenJDK 64-Bit Server VM (13+33, mixed mode, tiered, compressed oops, g1 gc, aix-ppc64)
/# Core dump will be written.",Investigation and Exploration,False,129,CONTRIBUTOR,False,False,False,0.6486486486,0.1379310345,0.5,0.7205882353,0.7731777342,0.2268222658,0.0001229708481,2.33e-05
"Default location: /home/zlwang/jdk-13+33/core or core.8978666
/#
/#",Investigation and Exploration,False,69,CONTRIBUTOR,False,False,False,0.2972972973,0.0632183908,0.6666666667,0.7242647059,0.7731777342,0.2268222658,0.0001229708481,2.33e-05
"An error report file with more information is saved as:
/# /home/zlwang/jdk-13+33/hs_err_pid8978666.log
/#
/#",Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,0.4864864865,0.1034482759,0.8333333333,0.7279411765,0.7731777342,0.2268222658,0.0001229708481,2.33e-05
"If you would like to submit a bug report, please visit:
/#   https://github.com/AdoptOpenJDK/openjdk-build/issues
/#
IOT/Abort trap (core dumped)",Investigation and Exploration,False,148,CONTRIBUTOR,False,False,False,0.5675675676,0.1206896552,1.0,0.7316176471,0.7731777342,0.2268222658,0.0001229708481,2.33e-05
hmm ... /#/ caused big faces of char(s),Investigation and Exploration,False,39,CONTRIBUTOR,False,False,False,1.0,0.04022988506,1.0,0.7352941176,0.773186039,0.226813961,2.33e-05,2.01e-05
and that Hotspot behavior is related to the global machine policy?,Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,1.0,0.0632183908,1.0,0.7389705882,0.7731932057,0.2268067943,2.01e-05,6.97e-06
"no, i don't think so.

-bash-5.0$ sedmgr
Stack Execution Disable (SED) mode: select
SED configured in kernel: select",Social Conversation,False,120,CONTRIBUTOR,False,False,False,1.0,0.1206896552,1.0,0.7426470588,0.7731956929,0.2268043071,6.97e-06,1.31e-05
I'm thinking there must be something about the machine configuration which causes this.,Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,0.6842105263,0.07471264368,0.5,0.7463235294,0.7732003723,0.2267996277,1.31e-05,2.23e-05
The Hotspot AIX build needed to run on the AdoptOpenJDK build machine in order to produce the published build.,Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,1.0,0.1091954023,1.0,0.75,0.7732003723,0.2267996277,1.31e-05,2.23e-05
"if it is SED related, SIGILL is expected.",Investigation and Exploration,False,41,CONTRIBUTOR,False,False,False,0.3636363636,0.04597701149,0.3333333333,0.7536764706,0.7732083398,0.2267916602,2.23e-05,6.97e-06
"Not sure if it is related to the OS level, i,.e  my OS level is backward relative to the build machine.",Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,1.0,0.1264367816,0.6666666667,0.7573529412,0.7732083398,0.2267916602,2.23e-05,6.97e-06
"-bash-5.0$ oslevel -s
7100-04-01-1543",Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.3636363636,0.04597701149,1.0,0.7610294118,0.7732083398,0.2267916602,2.23e-05,6.97e-06
I just get CODE,Investigation and Exploration,True,15,CONTRIBUTOR,False,False,False,0.5714285714,0.02298850575,0.5,0.7647058824,0.7732108271,0.2267891729,6.97e-06,4.37e-06
but I'll look for a better machine.,Investigation and Exploration,False,35,CONTRIBUTOR,False,False,False,1.0,0.04022988506,1.0,0.7683823529,0.7732108271,0.2267891729,6.97e-06,4.37e-06
what is your OS level?,Investigation and Exploration,False,22,CONTRIBUTOR,False,False,False,1.0,0.02873563218,1.0,0.7720588235,0.7732123869,0.2267876131,4.37e-06,4.82e-05
"If AdoptOpenJDK uses jdk12 as the bootjdk, then it doesn't tell us that.",Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,1.0,0.07471264368,0.5,0.7757352941,0.7732295867,0.2267704133,4.82e-05,0.0001379730553
That option is not used to build jdk12.,Investigation and Exploration,False,39,CONTRIBUTOR,False,False,False,0.6153846154,0.04597701149,1.0,0.7794117647,0.7732295867,0.2267704133,4.82e-05,0.0001379730553
"But, as @pshipton reminded me privately, the build jdk *is* used so the option is relevant.",Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,1.0,0.09195402299,1.0,0.7830882353,0.7732788255,0.2267211745,0.0001379730553,2.15e-05
"I'm on AIX 7.1 
On another 7.1 machine, which must have libc++.a I just get the same core dump.",Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,1.0,0.1149425287,1.0,0.7867647059,0.773286498,0.226713502,2.15e-05,2.22e-05
"Here is a JDK13 AIX Hotspot build at Adopt, which was able to run -verison
https://ci.adoptopenjdk.net/job/build-scripts/job/jobs/job/jdk13u/job/jdk13u-aix-ppc64-hotspot/79/ but not sure what is different to allow this.
CODE",Investigation and Exploration,True,226,CONTRIBUTOR,False,False,False,1.0,0.1609195402,1.0,0.7904411765,0.7732944234,0.2267055766,2.22e-05,2.35e-05
Is there any way to see if it JITted any methods?,Investigation and Exploration,False,49,CONTRIBUTOR,False,False,False,1.0,0.0632183908,1.0,0.7941176471,0.7733028126,0.2266971874,2.35e-05,6.31e-05
"Google found http://www.herongyang.com/JVM/Micro-Benchmark-Watch-JIT-Compilation-Log.html
but first we need to be able to successfully run the JVM on some machine.",Investigation and Exploration,False,164,CONTRIBUTOR,False,False,False,1.0,0.1091954023,1.0,0.7977941176,0.7733253242,0.2266746758,6.31e-05,6.85e-06
I tested that adopt HS driver ... same core dump.,Testing,False,49,CONTRIBUTOR,False,False,False,0.75,0.05172413793,0.3333333333,0.8014705882,0.7733277692,0.2266722308,6.85e-06,3.15e-05
I used ldedit to reset rwexec ... still same core dump.,Testing,False,55,CONTRIBUTOR,False,False,False,0.8333333333,0.05747126437,0.6666666667,0.8051470588,0.7733277692,0.2266722308,6.85e-06,3.15e-05
"So, it is not related to that linker option in this case.",Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,1.0,0.06896551724,1.0,0.8088235294,0.7733277692,0.2266722308,6.85e-06,3.15e-05
"Looking at AIX header file more closely, F_NOEXEC (is deprecated) is reused for SED system/request/exempt flags.",Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,1.0,0.1034482759,0.5,0.8125,0.773339025,0.226660975,3.15e-05,1.41e-05
"-bnorwexec actualy set request (i.e. disregarding global SED policy, SED is enforced).",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.6666666667,0.06896551724,1.0,0.8161764706,0.773339025,0.226660975,3.15e-05,1.41e-05
"Ok, so back the original question then, how does OpenJ9 bypass SED in order to create a working code cache?",Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,1.0,0.1149425287,1.0,0.8198529412,0.7733440416,0.2266559584,1.41e-05,2.84e-06
I looked at the header section dump of HS java as well.  request is set (i.e. -bnorwexec).,Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,1.0,0.1034482759,0.5,0.8235294118,0.7733450534,0.2266549466,2.84e-06,1.43e-05
"so, I predicted:  even if you can get past the SIGABRT dump, you will see SIGILL next.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,1.0,0.1034482759,1.0,0.8272058824,0.7733450534,0.2266549466,2.84e-06,1.43e-05
Yet somehow it runs -version on the AdoptOpenJDK machine.,Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.8308823529,0.7733501543,0.2266498457,1.43e-05,8.27e-06
SED can be disabled globally on that machine.,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,1.0,0.04597701149,0.5,0.8345588235,0.7733531053,0.2266468947,8.27e-06,2e-05
run:   sedmgr     to see,Investigation and Exploration,False,24,CONTRIBUTOR,False,False,False,0.75,0.03448275862,1.0,0.8382352941,0.7733531053,0.2266468947,8.27e-06,2e-05
-bnorwexec is a contradictory to JIT period.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.2592592593,0.04022988506,0.5,0.8419117647,0.7733602297,0.2266397703,2e-05,4.44e-05
"if you want to continue using that option, either:
1) disable SED globally on the machine;  or
2) exempt java explicitly (i.e. reset -bnorwexec)",Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,1.0,0.1551724138,1.0,0.8455882353,0.7733602297,0.2266397703,2e-05,4.44e-05
"I don't have access to the machines at Adopt, or any root access to any AIX machines.",Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,1.0,0.09770114943,1.0,0.8492647059,0.7733760806,0.2266239194,4.44e-05,2.66e-05
"btw, sedmgr doesn't need root authority to run.",Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.8888888889,0.04597701149,0.5,0.8529411765,0.7733855658,0.2266144342,2.66e-05,1.04e-05
"but you don't have accesses at all, no help.",Social Conversation,False,44,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.8566176471,0.7733855658,0.2266144342,2.66e-05,1.04e-05
I'll see if Shelley or somebody else can run sedmgr for us.,Contribution and Commitment,False,59,CONTRIBUTOR,False,False,False,1.0,0.06896551724,1.0,0.8602941176,0.7733892756,0.2266107244,1.04e-05,0.02803794401
"test-osuosl-ppc64-aix-71-1
CODE",Testing,True,32,CONTRIBUTOR,False,False,False,1.0,0.04022988506,1.0,0.8639705882,0.78339525,0.21660475,0.02803794401,0.02121193973
@zl-wang is somebody working on a better fix like https://github.com/eclipse/openj9/pull/7034?,Task Progress,False,94,CONTRIBUTOR,False,False,False,0.4230769231,0.0632183908,0.3333333333,0.8676470588,0.7909652104,0.2090347896,0.02121193973,4.02e-05
This change was reverted.,Task Progress,False,25,CONTRIBUTOR,False,False,False,0.1538461538,0.02298850575,0.6666666667,0.8713235294,0.7909652104,0.2090347896,0.02121193973,4.02e-05
"If we get a fix for this, temporarily disable the DDR support, and remove the CODE link option, we can get a build and test run.",Workarounds,True,128,CONTRIBUTOR,False,False,False,1.0,0.1494252874,1.0,0.875,0.7909652104,0.2090347896,0.02121193973,4.02e-05
Issue opened at Adopt for the Hotspot crash https://github.com/AdoptOpenJDK/openjdk-build/issues/1327,Bug Reproduction,False,101,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.8786764706,0.7909795436,0.2090204564,4.02e-05,0.002178863875
"@pshipton  we asked xlC team, and they cannot fix it (linking in libc++.a by default), since the same command can be used for xlC build (as opposed to xlclang++ build) which doesn't need libc++.a.

we have to decide if libc++.a should be statically linked in as well (it is not available on most AIX installations).",Solution Discussion,False,317,CONTRIBUTOR,False,False,False,1.0,0.3333333333,1.0,0.8823529412,0.7917571205,0.2082428795,0.002178863875,9.54e-05
@zl-wang it seems we have the start of a solution,Solution Discussion,False,49,CONTRIBUTOR,False,False,False,1.0,0.0632183908,0.3333333333,0.8860294118,0.7917911829,0.2082088171,9.54e-05,0.006755954606
https://github.com/eclipse/openj9/pull/7034#issuecomment-542759782,Solution Discussion,False,66,CONTRIBUTOR,False,False,False,0.09090909091,0.005747126437,0.6666666667,0.8897058824,0.7917911829,0.2082088171,9.54e-05,0.006755954606
"Yes, it should be statically linked.",Solution Discussion,False,36,CONTRIBUTOR,False,False,False,0.5454545455,0.03448275862,1.0,0.8933823529,0.7917911829,0.2082088171,9.54e-05,0.006755954606
I ran an AIX build/test using xlc 13 with the OpenJDK 13.0.0 level.,Testing,False,67,CONTRIBUTOR,False,False,False,0.5833333333,0.08045977011,0.1111111111,0.8970588235,0.7942021981,0.2057978019,0.006755954606,0.002545177611
"Besides the OpenJ9 change to compile with xlc 13, this requires the harfbuzz fix which was applied to openjdk12 to be applied to openjdk13.",Solution Discussion,False,139,CONTRIBUTOR,False,False,False,1.0,0.1379310345,0.2222222222,0.9007352941,0.7942021981,0.2057978019,0.006755954606,0.002545177611
The standard functional and system testing passed.,Testing,False,50,CONTRIBUTOR,False,False,False,0.2916666667,0.04022988506,0.3333333333,0.9044117647,0.7942021981,0.2057978019,0.006755954606,0.002545177611
"https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/77

I'll have to retry this with the 13.0.1 level when it promotes.",Task Progress,False,141,CONTRIBUTOR,False,False,False,0.5833333333,0.08045977011,0.4444444444,0.9080882353,0.7942021981,0.2057978019,0.006755954606,0.002545177611
"Using xlc 13 is fragile, as OpenJDK changes could break this at any time.",Solution Discussion,False,73,CONTRIBUTOR,False,False,False,0.5833333333,0.08045977011,0.5555555556,0.9117647059,0.7942021981,0.2057978019,0.006755954606,0.002545177611
"i.e. even if it works for 13.0.1,, it may not work for 13.0.2 in January.",Solution Discussion,False,73,CONTRIBUTOR,False,False,False,0.625,0.08620689655,0.6666666667,0.9154411765,0.7942021981,0.2057978019,0.006755954606,0.002545177611
We can also try this with the jdk14 code to date.,Solution Discussion,False,49,CONTRIBUTOR,False,False,False,0.4583333333,0.0632183908,0.7777777778,0.9191176471,0.7942021981,0.2057978019,0.006755954606,0.002545177611
I'll also try a xlc 16 build.,Solution Discussion,False,29,CONTRIBUTOR,False,False,False,0.2916666667,0.04022988506,0.8888888889,0.9227941176,0.7942021981,0.2057978019,0.006755954606,0.002545177611
"This build won't have DDR support so test failures are expected, but we can see if anything else fails.",Solution Discussion,False,103,CONTRIBUTOR,False,False,False,0.7916666667,0.1091954023,1.0,0.9264705882,0.7942021981,0.2057978019,0.006755954606,0.002545177611
"The xlc 13 build is https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK13_ppc64_aix_Personal/31/OpenJ9-JDK13-ppc64_aix-20191016-215625.tar.gz

and the xlc 16 build is https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK13_ppc64_aix_Personal/33/OpenJ9-JDK13-ppc64_aix-20191017-153805.tar.gz

these are created from equivalent source, and can be used to compare performance.",Solution Discussion,False,441,CONTRIBUTOR,False,False,False,0.9655172414,0.1609195402,0.5,0.9301470588,0.7951105023,0.2048894977,0.002545177611,0.001665008746
"The top level build for xlc 16 is https://ci.eclipse.org/openj9/job/Pipeline-Release-Build/79
Test results:
sanity.functional: only a ddr failure
extended.functional: only ddr failures
sanity.system: passed
extended.system: passed",Testing,False,235,CONTRIBUTOR,False,False,False,1.0,0.1666666667,1.0,0.9338235294,0.7951105023,0.2048894977,0.002545177611,0.001665008746
"With xlc 16 we only got the expected DDR failures, all the other standard testing passed.",Testing,False,89,CONTRIBUTOR,False,False,False,1.0,0.09195402299,1.0,0.9375,0.7957046984,0.2042953016,0.001665008746,0.00187043267
xlc 13 with jdk13.0.1 compiled fine.,Testing,False,36,CONTRIBUTOR,False,False,False,1.0,0.03448275862,0.3333333333,0.9411764706,0.7963722046,0.2036277954,0.00187043267,0.004816889792
I didn't bother with testing.,Testing,False,29,CONTRIBUTOR,False,False,False,0.8333333333,0.02873563218,0.6666666667,0.9448529412,0.7963722046,0.2036277954,0.00187043267,0.004816889792
https://ci.eclipse.org/openj9/job/Pipeline-Release-Build/80,Testing,False,59,CONTRIBUTOR,False,False,False,0.1666666667,0.005747126437,1.0,0.9485294118,0.7963722046,0.2036277954,0.00187043267,0.004816889792
"I have a preliminary performance tests of xlc13/16 builds (performance of C/C++ code, that is:  interpreter and JIT-compiler specifically).",Testing,False,139,CONTRIBUTOR,False,False,False,1.0,0.1264367816,0.3333333333,0.9522058824,0.7980912206,0.2019087794,0.004816889792,3.05e-05
"I used javac helloWorld as the test case:  -Xint and -Xjit:count=0,optLevel=hot -Xnoaot (to exercise JIT-compiler).",Testing,False,115,CONTRIBUTOR,False,False,False,0.8636363636,0.1091954023,0.6666666667,0.9558823529,0.7980912206,0.2019087794,0.004816889792,3.05e-05
"-Xint run, xlc16 build looks 15% better;
JIT-compiler run, xlc13 build looks 8% better.",Testing,False,88,CONTRIBUTOR,False,False,False,0.7272727273,0.09195402299,1.0,0.9595588235,0.7980912206,0.2019087794,0.004816889792,3.05e-05
"Overall, I felt xlclang++ build is fine perf-wise.",Testing,False,50,CONTRIBUTOR,False,False,False,0.45,0.05172413793,0.5,0.9632352941,0.798102097,0.201897903,3.05e-05,0.0002166460475
"Although, it has the glitch that I have to copy libc++.a and related to where I ran (and set LIBPATH).",Solution Discussion,False,102,CONTRIBUTOR,False,False,False,1.0,0.1149425287,1.0,0.9669117647,0.798102097,0.201897903,3.05e-05,0.0002166460475
"As per https://github.com/eclipse/openj9/pull/7499, we are statically linking libc++",Solution Discussion,False,84,CONTRIBUTOR,False,False,False,1.0,0.04597701149,1.0,0.9705882353,0.798179412,0.201820588,0.0002166460475,2.53e-05
you meant the xlc16 build link you gave above is supposed to be built with static linking already?,Solution Discussion,False,98,CONTRIBUTOR,False,False,False,1.0,0.1034482759,1.0,0.9742647059,0.7981884335,0.2018115665,2.53e-05,6.67e-05
"No, my earlier build wasn't statically linked.",Solution Discussion,False,46,CONTRIBUTOR,False,False,False,0.6363636364,0.04022988506,0.3333333333,0.9779411765,0.798212252,0.201787748,6.67e-05,0.0007994877042
We are delivering a change to statically link in future builds.,Task Progress,False,63,CONTRIBUTOR,False,False,False,1.0,0.0632183908,0.6666666667,0.9816176471,0.798212252,0.201787748,6.67e-05,0.0007994877042
I'll provide a link to the build when it's ready.,Task Progress,False,49,CONTRIBUTOR,False,False,False,0.9090909091,0.05747126437,1.0,0.9852941176,0.798212252,0.201787748,6.67e-05,0.0007994877042
Here is a statically linked xlc 16 build https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK13_ppc64_aix_Personal/36/OpenJ9-JDK13-ppc64_aix-20191018-143648.tar.gz,Task Progress,False,195,CONTRIBUTOR,False,False,False,1.0,0.05172413793,1.0,0.9889705882,0.7984975672,0.2015024328,0.0007994877042,0.0006807694502
"It's more than just the JIT which is linking to libc++ now, see https://github.com/eclipse/openj9/pull/7499#issuecomment-543867064, plus I don't think the JIT is statically linking properly yet, see https://github.com/eclipse/openj9/pull/7499#issuecomment-543864380",Solution Discussion,False,265,CONTRIBUTOR,False,False,False,1.0,0.1551724138,1.0,0.9926470588,0.7987405152,0.2012594848,0.0006807694502,0.0242227764
"Seems jdk14 no longer supports compilation with xlc 13
CODE",Solution Discussion,True,60,CONTRIBUTOR,False,False,False,1.0,0.0632183908,1.0,0.9963235294,0.8073849608,0.1926150392,0.0242227764,0.5397305107
"#8055 is merged, DDR is enabled on AIX Java 13+, this is now complete, although #7579 is still open,",Action on Issue,False,100,CONTRIBUTOR,False,False,True,1.0,0.1091954023,1.0,1.0,1.0,0.0,0.5397305107,0.0
OpenJ9 startup performance on a Spring Boot application,Motivation,False,55,NONE,True,True,False,0.2162162162,0.05839416058,0.1,0.003717472119,0.0,1.0,0.0,5.34e-05
"Java -version output
--------------------

CODE

Summary of problem
------------------",Observed Bug Behaviour,True,92,NONE,True,True,False,0.3513513514,0.09489051095,0.2,0.007434944238,0.0,1.0,0.0,5.34e-05
I'm experimenting with both AdoptOpenJDK and openJ9,Task Progress,False,51,NONE,True,True,False,0.1891891892,0.05109489051,0.3,0.01115241636,0.0,1.0,0.0,5.34e-05
but I'm having weirdly poor performance with our Spring Boot based application in comparison to OpenJDK and HotSpot.,Task Progress,False,116,NONE,True,True,False,0.4864864865,0.1313868613,0.4,0.01486988848,0.0,1.0,0.0,5.34e-05
"Thanks!

> Some followup discussion can be found from openj9 slack #newcomers: https://openj9.slack.com/archives/C862YFGL9/p1559066270001000",Social Conversation,False,142,NONE,True,True,False,0.3513513514,0.09489051095,1.0,0.03717472119,0.0,1.0,0.0,5.34e-05
"Also testing the performance with JDK8:

CODE",Testing,True,47,NONE,True,False,False,0.4,0.05839416058,0.5,0.04089219331,3.55e-05,0.9999644573,5.34e-05,0.0003018883551
Here is the vlog file (changed the file type to CODE to make GitHub happy),Social Conversation,True,74,NONE,True,False,False,1.0,0.1094890511,0.5,0.04832713755,0.0002364004966,0.9997635995,0.0003018883551,0.0002111976147
"to destroy the cache, do CODE",Investigation and Exploration,True,29,CONTRIBUTOR,False,False,False,0.1363636364,0.04379562044,1.0,0.0594795539,0.0003769182743,0.9996230817,0.0002111976147,0.0002882226271
"Could you destroy the cache and run your program again, collecting the vlog both times?",Investigation and Exploration,False,87,NONE,True,False,False,0.6,0.1094890511,0.25,0.06319702602,0.0005686837121,0.9994313163,0.0002882226271,0.0003971343382
"to destroy the cache, do java -Xshareclasses:destroyAll

I destroyed the cache by invoking:

CODE
but this outputted an empty vlog file.",Investigation and Exploration,True,141,NONE,True,False,False,1.0,0.1824817518,0.5,0.06691449814,0.0005686837121,0.9994313163,0.0002882226271,0.0003971343382
"However, the cache was deleted.",Investigation and Exploration,False,31,NONE,True,False,False,0.2,0.03649635036,0.75,0.07063197026,0.0005686837121,0.9994313163,0.0002882226271,0.0003971343382
"Rerun with

CODE

produced this vlog:

[vlog.20190528.222507.6492.txt] URL ",Investigation and Exploration,True,81,NONE,True,False,False,0.44,0.0802919708,1.0,0.07434944238,0.0005686837121,0.9994313163,0.0002882226271,0.0003971343382
"I destroyed the cache by invoking:

java -Xshareclasses:",Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.3214285714,0.06569343066,0.1666666667,0.0780669145,0.0008329122392,0.9991670878,0.0003971343382,0.0001412125228
"destroyAll -Xjit:verbose={compilePerformance},vlog=vlog
>but this outputted an empty vlog file.",Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.4285714286,0.08759124088,0.3333333333,0.08178438662,0.0008329122392,0.9991670878,0.0003971343382,0.0001412125228
"Sorry, I should've been more clear, I meant collecting the vlog for both invocations of your benchmark :).",Social Conversation,False,106,CONTRIBUTOR,False,False,False,0.6785714286,0.1386861314,0.5,0.08550185874,0.0008329122392,0.9991670878,0.0003971343382,0.0001412125228
"However, doesn't look like we need the second invocation; we didn't do any AOT compilations in that vlog...",Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,0.6428571429,0.1313868613,0.6666666667,0.08921933086,0.0008329122392,0.9991670878,0.0003971343382,0.0001412125228
"I don't know why :S. 

For the sake of sanity, could you do the following:

CODE

I did this with
CODE
from https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u212-b04_openj9-(0.14.2/OpenJDK8U-jdk_x64_linux_openj9_8u212b04_openj9-0.14.2.tar.gz)",Investigation and Exploration,True,273,CONTRIBUTOR,False,False,False,1.0,0.204379562,0.8333333333,0.09293680297,0.0008329122392,0.9991670878,0.0003971343382,0.0001412125228
"And the vlog does show AOT compilations happening:
CODE

This will verify that you're able to at least get AOT compilations going.",Investigation and Exploration,True,133,CONTRIBUTOR,False,False,False,0.8571428571,0.1751824818,1.0,0.09665427509,0.0008329122392,0.9991670878,0.0003971343382,0.0001412125228
"I destroyed the cache and invoked

CODE

The only difference seems to be that I'm on Windows 10 host

Here is the vlog of that:
[vlog.20190528.224833.7220.txt] URL ",Investigation and Exploration,True,171,NONE,True,False,False,1.0,0.2262773723,1.0,0.1003717472,0.0009268662827,0.9990731337,0.0001412125228,7.54e-05
"Ok, so looks like you did get AOT compilations when running CODE:
CODE
so now the question becomes, why are there no AOT compilations when you run your benchmark..",Investigation and Exploration,True,165,CONTRIBUTOR,False,False,False,1.0,0.2335766423,1.0,0.1040892193,0.0009770118426,0.9990229882,7.54e-05,2.07e-05
"Here is how my cache dir looks like:

CODE",Investigation and Exploration,True,44,NONE,True,False,False,1.0,0.07299270073,1.0,0.1078066914,0.0009907880953,0.9990092119,2.07e-05,0.0001345867153
"Ok, just for the sake of doing a second sanity, and also to get a sense of how much perf could improve, could you do the following:

CODE",Investigation and Exploration,True,139,CONTRIBUTOR,False,False,False,1.0,0.2116788321,1.0,0.1115241636,0.001080333738,0.9989196663,0.0001345867153,0.0001051846944
I think the key lies in the large number of compilation failures.,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,1.0,0.08759124088,0.25,0.1152416357,0.001150317102,0.9988496829,0.0001051846944,0.0001896637403
"A quick glance at the vlog shows many ""compilationIlGenFailure"".",Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.75,0.06569343066,0.5,0.1189591078,0.001150317102,0.9988496829,0.0001051846944,0.0001896637403
We need to understand the reason of that.,Social Conversation,False,41,CONTRIBUTOR,False,False,False,0.6666666667,0.05839416058,0.75,0.1226765799,0.001150317102,0.9988496829,0.0001051846944,0.0001896637403
I'll look at the code.,Contribution and Commitment,False,22,CONTRIBUTOR,False,False,False,0.4166666667,0.03649635036,1.0,0.126394052,0.001150317102,0.9988496829,0.0001051846944,0.0001896637403
"There's 200 failures out of ~2900 methods, but that doesn't explain why methods like CODE aren't AOT compiled.",Investigation and Exploration,True,110,CONTRIBUTOR,False,False,False,1.0,0.1313868613,1.0,0.1301115242,0.001276507577,0.9987234924,0.0001896637403,5.3e-05
"There are many possible reasons why the JIT throws ILGenFailure 
@jsimomaa  To get a better understanding of the failures could you please do a run with CODE.",Investigation and Exploration,True,159,CONTRIBUTOR,False,False,False,1.0,0.2116788321,0.5,0.1338289963,0.001311774784,0.9986882252,5.3e-05,0.0001602617194
"For example:
CODE
There will be some messages printed to stderr about the reason for those failures.",Investigation and Exploration,True,102,CONTRIBUTOR,False,False,False,0.6551724138,0.1386861314,1.0,0.1375464684,0.001311774784,0.9986882252,5.3e-05,0.0001602617194
@dsouzai Can you update the script to give the total time spent in failed compilations?,Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,1.0,0.1094890511,1.0,0.1412639405,0.00141840298,0.998581597,0.0001602617194,4.47e-05
"The script already prints that out, eg:
CODE",Investigation and Exploration,True,45,CONTRIBUTOR,False,False,False,1.0,0.06569343066,1.0,0.1449814126,0.001448159686,0.9985518403,4.47e-05,1.86e-05
"ah, ok. Looked straight past that.",Social Conversation,False,34,CONTRIBUTOR,False,False,False,1.0,0.04379562044,0.5,0.1486988848,0.001460558313,0.9985394417,1.86e-05,0.0001569488156
"The problem with compilationIlGenFailures is that compilations are not retried, so the methods subject to these failures will run interpreted for the entire duration of the JVM.",Investigation and Exploration,False,177,CONTRIBUTOR,False,False,False,1.0,0.197080292,0.5,0.156133829,0.001564982309,0.9984350177,0.0001569488156,3.35e-05
This could lead to severe slowdowns depending on the importance of these methods.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.4814814815,0.09489051095,1.0,0.1598513011,0.001564982309,0.9984350177,0.0001569488156,3.35e-05
That fits - the 10x deficit made me wonder if we were running in the interpreter.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,1.0,0.1094890511,0.5,0.1635687732,0.001587299838,0.9984127002,3.35e-05,0.0002737286732
If we fail some hot methods it would be similar.,Investigation and Exploration,False,48,CONTRIBUTOR,False,False,False,0.6666666667,0.07299270073,1.0,0.1672862454,0.001587299838,0.9984127002,3.35e-05,0.0002737286732
"Here are the prints from stderr:

CODE",Observed Bug Behaviour,True,40,NONE,True,False,False,0.2857142857,0.05839416058,1.0,0.1858736059,0.001885417947,0.9981145821,0.0001743415604,1.49e-05
"What did the perf look like for the run that produced vlog2?

CODE
CODE
Looks like the majority of failures were due to AOT relocations when doing CODE.",Investigation and Exploration,True,156,CONTRIBUTOR,False,False,False,1.0,0.2262773723,0.5,0.1895910781,0.001895336849,0.9981046632,1.49e-05,5.26e-05
"Additionally, there weren't as many failures in the compile run.",Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.3225806452,0.07299270073,1.0,0.1933085502,0.001895336849,0.9981046632,1.49e-05,5.26e-05
"Yes, that is actually true!",Social Conversation,False,27,NONE,True,False,False,0.2083333333,0.03649635036,0.5,0.2156133829,0.002019598648,0.9979804014,0.0001337584893,6.92e-05
I should have stated that in the beginning that I was using Visual Studio Code for the first vlogs and it attaches a debugger.,Investigation and Exploration,False,126,NONE,True,False,False,1.0,0.1751824818,0.6666666667,0.219330855,0.002019598648,0.9979804014,0.0001337584893,6.92e-05
The vlog1 and vlog2 was then purely with cmd and no debuggers attached or anything.,Investigation and Exploration,False,83,NONE,True,False,False,0.625,0.1094890511,0.8333333333,0.2230483271,0.002019598648,0.9979804014,0.0001337584893,6.92e-05
"Sorry about this, I should have mentioned about this in the setup.",Social Conversation,False,66,NONE,True,False,False,0.5,0.08759124088,1.0,0.2267657993,0.002019598648,0.9979804014,0.0001337584893,6.92e-05
But without the debugger attached I wasn't able to get any output to stderr with CODE.,Investigation and Exploration,True,86,NONE,True,False,False,1.0,0.1167883212,1.0,0.2304832714,0.002065611332,0.9979343887,6.92e-05,0.0002033294683
"Ahh ok, that at least explains why there was no AOT before.",Investigation and Exploration,False,59,CONTRIBUTOR,False,False,False,0.48,0.08759124088,0.3333333333,0.2342007435,0.002200894134,0.9977991059,0.0002033294683,1.24e-06
"For the sake a comparison to allow OpenJ9 to get the benefit of AOT heh, would you mind doing a run without the debugger :).",Investigation and Exploration,False,124,CONTRIBUTOR,False,False,False,1.0,0.1824817518,0.6666666667,0.2379182156,0.002200894134,0.9977991059,0.0002033294683,1.24e-06
"ie:

1. Destroy SCC
2. Populate SCC; options CODE
2. Load from SCC; options CODE

Thanks!",Investigation and Exploration,True,95,CONTRIBUTOR,False,False,False,0.8,0.1459854015,1.0,0.2416356877,0.002200894134,0.9977991059,0.0002033294683,1.24e-06
Here is one more vlog no debuggers attached and with args: CODE.,Investigation and Exploration,True,64,NONE,True,False,False,0.4444444444,0.08759124088,0.5,0.2453531599,0.002201720709,0.9977982793,1.24e-06,2.07e-05
"[vlog-new.20190529.000410.16028.txt] URL 

Also, with the shareclasses populated on previous runs the result of the ""benchmark"" is now ~31s (compared to ~16s with HotSpot):

CODE",Investigation and Exploration,True,182,NONE,True,False,False,1.0,0.197080292,1.0,0.249070632,0.002201720709,0.9977982793,1.24e-06,2.07e-05
Haha beat me to it :),Social Conversation,False,21,CONTRIBUTOR,False,False,False,1.0,0.04379562044,1.0,0.2527881041,0.002215496962,0.997784503,2.07e-05,0.0001263044559
"ie:
> 
> 1. Destroy SCC
> 2. Populate SCC; options CODE
> 3. Load from SCC; options CODE
> 
> Thanks!",Investigation and Exploration,True,107,NONE,True,False,False,1.0,0.1605839416,0.3333333333,0.2565055762,0.002299532103,0.9977004679,0.0001263044559,0.000373115786
"1. Destroyed SCC
2. Ran CODE
3. Ran CODE

Here are the files:
[vlog1.20190529.001023.4224.txt] URL ",Investigation and Exploration,True,104,NONE,True,False,False,0.8636363636,0.1386861314,0.6666666667,0.2602230483,0.002299532103,0.9977004679,0.0001263044559,0.000373115786
[vlog2.20190529.001127.2660.txt] URL,Investigation and Exploration,False,37,NONE,True,False,False,0.09090909091,0.01459854015,1.0,0.2639405204,0.002299532103,0.9977004679,0.0001263044559,0.000373115786
"CODE
CODE
So looks like with AOT, the majority of failures are AOT load failures that https://github.com/eclipse/openj9/issues/4897 was opened to address; this at least removes the ILGenFailures as a potential problem.",Investigation and Exploration,True,220,CONTRIBUTOR,False,False,False,1.0,0.2408759124,0.3333333333,0.2676579926,0.002547780177,0.9974522198,0.000373115786,0.006822511181
"However, since we're still at 30s, I'm wondering if the CODE and CODE compilations in addition to the load failures all play into this.",Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,0.7272727273,0.1751824818,0.6666666667,0.2713754647,0.002547780177,0.9974522198,0.000373115786,0.006822511181
@mpirvu what do you think?,Social Conversation,False,26,CONTRIBUTOR,False,False,False,0.1515151515,0.03649635036,1.0,0.2750929368,0.002547780177,0.9974522198,0.000373115786,0.006822511181
"The CODE compilation is expensive, no doubt, but I do see other compilations being executed in parallel with.",Investigation and Exploration,True,109,CONTRIBUTOR,False,False,False,0.5142857143,0.1313868613,0.2,0.2788104089,0.007087055447,0.9929129446,0.006822511181,0.006010021534
"The JVM can use up to 8 cores and the JVM utilization is always under 150%, so the hot compilation should not interfere with application or other compilation threads.",Investigation and Exploration,False,166,CONTRIBUTOR,False,False,False,0.8285714286,0.2116788321,0.4,0.282527881,0.007087055447,0.9929129446,0.006822511181,0.006010021534
Compilation queue grows up to 370 entries in the first 100 ms.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.3428571429,0.08759124088,0.6,0.2862453532,0.007087055447,0.9929129446,0.006822511181,0.006010021534
"The are bigger jumps in Q_SZ around AOT failures, so I would say that AOT relocation failures play a role.
CODE compilations in the second run can be eliminated by making the cache readonly.",Investigation and Exploration,True,191,CONTRIBUTOR,False,False,False,1.0,0.2554744526,0.8,0.2899628253,0.007087055447,0.9929129446,0.006822511181,0.006010021534
"There are some relatively big periods of time when compilation queue is close to 0 (for instance between t=18.7s and t=27.7s), so code quality may matter as well.",Investigation and Exploration,False,162,CONTRIBUTOR,False,False,False,0.8,0.204379562,1.0,0.2936802974,0.007087055447,0.9929129446,0.006822511181,0.006010021534
@dsouzai I created a reduced example for you to test yourself:,Bug Reproduction,False,62,NONE,True,False,False,0.1896551724,0.0802919708,0.25,0.2973977695,0.01108575056,0.9889142494,0.006010021534,0.009079840981
https://github.com/jsimomaa/spring-boot-openj9,Bug Reproduction,False,46,NONE,True,False,False,0.01724137931,0.007299270073,0.5,0.3011152416,0.01108575056,0.9889142494,0.006010021534,0.009079840981
"In order to launch the app do:
CODE

After the build is complete the app can be run by invoking

CODE

With this example my startup times are

HotSpot (CODE)
CODE

OpenJ9 (CODE)
CODE

So the startup time is roughly the same (2x) with OpenJ9 than compared to HotSpot.",Bug Reproduction,True,281,NONE,True,False,False,1.0,0.4233576642,0.75,0.3048327138,0.01108575056,0.9889142494,0.006010021534,0.009079840981
Hope this helps you to debug further!,Social Conversation,False,37,NONE,True,False,False,0.1206896552,0.05109489051,1.0,0.3085501859,0.01108575056,0.9889142494,0.006010021534,0.009079840981
"Thanks @jsimomaa , that should be really useful.",Social Conversation,False,48,CONTRIBUTOR,False,False,False,1.0,0.05109489051,1.0,0.312267658,0.0171269129,0.9828730871,0.009079840981,0.003972585721
I will have to spin up my Windows machine but running quickly on my Linux machine I see the following results.,Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,0.4375,0.1532846715,0.3333333333,0.3159851301,0.01977002475,0.9802299753,0.003972585721,0.0002223786649
"VMs being used are the latest JDK8 LTS builds from AdoptOpenJDK:
OpenJ9
CODE

HotSpot
CODE

Results from the run:
OpenJ9:
CODE

OpenJ9 cold run with CODE:
CODE

OpenJ9 warm run with CODE:
CODE

HotSpot:
CODE",Investigation and Exploration,True,225,CONTRIBUTOR,False,False,False,1.0,0.3503649635,0.6666666667,0.3197026022,0.01977002475,0.9802299753,0.003972585721,0.0002223786649
My results are very consistent.,Investigation and Exploration,False,31,CONTRIBUTOR,False,False,False,0.1041666667,0.03649635036,1.0,0.3234200743,0.01977002475,0.9802299753,0.003972585721,0.0002223786649
"Since I had JDK 12 builds as well I tested them and they were pretty similar, except the OpenJ9 runs were all about 1 second slower.",Investigation and Exploration,False,132,CONTRIBUTOR,False,False,False,1.0,0.1897810219,0.5,0.3271375465,0.0199179817,0.9800820183,0.0002223786649,0.0002232068908
I did destroy my Shareclasses cache before I started using the new JDK12 builds.,Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.5384615385,0.102189781,1.0,0.3308550186,0.0199179817,0.9800820183,0.0002223786649,0.0002232068908
"In light of @charliegracie's results, the one difference I see in the options he used is that CODE was also specified.",Investigation and Exploration,True,118,CONTRIBUTOR,False,False,False,0.875,0.1532846715,0.25,0.3345724907,0.02006648971,0.9799335103,0.0002232068908,8.9e-05
"I was having a discussion with @r30shah and he mentioned that in the past, adding the CODE option does tend to improve the performance.",Solution Discussion,True,135,CONTRIBUTOR,False,False,False,1.0,0.1751824818,0.5,0.3382899628,0.02006648971,0.9799335103,0.0002232068908,8.9e-05
I wonder if that's what's resulting in @charliegracie's results showing better perf.,Solution Discussion,False,84,CONTRIBUTOR,False,False,False,0.5,0.08759124088,0.75,0.3420074349,0.02006648971,0.9799335103,0.0002232068908,8.9e-05
"Granted, we should probably wait until Charlie spins up his Windows box and tries this out.",Social Conversation,False,91,CONTRIBUTOR,False,False,False,0.6666666667,0.1167883212,1.0,0.3457249071,0.02006648971,0.9799335103,0.0002232068908,8.9e-05
I just re-ran with the same -Xms option as @jsimomaa and I reproduced my results.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,1.0,0.1167883212,0.5,0.3494423792,0.02012572759,0.9798742724,8.9e-05,6.54e-05
The initial heap setting is not affecting these results.,Investigation and Exploration,False,56,CONTRIBUTOR,False,False,False,0.5625,0.06569343066,1.0,0.3531598513,0.02012572759,0.9798742724,8.9e-05,6.54e-05
"Ok, I got the testcase running.",Testing,False,31,CONTRIBUTOR,False,False,False,0.04379562044,0.04379562044,0.25,0.3568773234,0.02016926055,0.9798307394,6.54e-05,5.3e-05
"I find a smaller deficit when running without shareclasses, and an improvement when running with.",Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,0.1094890511,0.1094890511,0.5,0.3605947955,0.02016926055,0.9798307394,6.54e-05,5.3e-05
"It looks like there's a significant platform dependency that I don't understand, but I wonder if it relates somehow to the OS or filesystem.",Investigation and Exploration,False,140,CONTRIBUTOR,False,False,False,0.1751824818,0.1751824818,0.75,0.3643122677,0.02016926055,0.9798307394,6.54e-05,5.3e-05
"Java versions compared, both downloaded from AdoptOpenJDK a week or so ago:

Hotspot: 
openjdk version ""1.8.0_212""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_212-b03)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.212-b03, mixed mode)

OpenJ9:
openjdk version ""1.8.0_212""
OpenJDK Runtime Environment (build 1.8.0_212-b03)
Eclipse OpenJ9 VM (build openj9-0.14.0, JRE 1.8.0 Linux amd64-64-Bit Compressed References 20190417_286 (JIT enabled, AOT enabled)
OpenJ9   - bad1d4d06
OMR      - 4a4278e6
JCL      - 5590c4f818 based on jdk8u212-b03)

Startup times (three runs, mx1G) :

Hotspot:
3.777, 3.799, 3.749

OpenJ9, without SCC:
4.594, 4.606, 4.747

OpenJ9, with SCC:
3.103, 3.367, 2.928

A fixed heap brings things down a little more:
OpenJ9, with SCC and fixed 1G heap
2.772, 2.692, 2.688",Investigation and Exploration,False,830,CONTRIBUTOR,False,False,False,1.0,1.0,1.0,0.3680297398,0.02016926055,0.9798307394,6.54e-05,5.3e-05
"ah, sorry, I should have refreshed before posting - I missed Charlie's results.",Social Conversation,False,79,CONTRIBUTOR,False,False,False,1.0,0.08759124088,0.5,0.3717472119,0.02020452776,0.9797954722,5.3e-05,9.03e-05
"Oh well, more data points fwiw.",Social Conversation,False,31,CONTRIBUTOR,False,False,False,0.5,0.04379562044,1.0,0.375464684,0.02020452776,0.9797954722,5.3e-05,9.03e-05
Makes a difference for me.,Social Conversation,False,26,CONTRIBUTOR,False,False,False,1.0,0.03649635036,1.0,0.3791821561,0.02026459222,0.9797354078,9.03e-05,5.3e-05
Did you go from no CODE to a CODE?,Investigation and Exploration,True,34,CONTRIBUTOR,False,False,False,1.0,0.06569343066,0.5,0.3828996283,0.02029985943,0.9797001406,5.3e-05,1.9e-05
My comments were about switching from CODE to CODE.,Social Conversation,True,51,CONTRIBUTOR,False,False,False,1.0,0.06569343066,1.0,0.3866171004,0.02029985943,0.9797001406,5.3e-05,1.9e-05
"Yes, I went from no -Xms to setting -Xms",Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,1.0,0.06569343066,0.5,0.3903345725,0.02031253358,0.9796874664,1.9e-05,2.03e-05
#NAME?,Investigation and Exploration,False,6,CONTRIBUTOR,False,False,False,0.1111111111,0.007299270073,1.0,0.3940520446,0.02031253358,0.9796874664,1.9e-05,2.03e-05
"ah, default Xms is only 8M, that would hurt",Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,1.0,0.07299270073,1.0,0.3977695167,0.02032603431,0.9796739657,2.03e-05,0.0002559218155
"Windows results on a Windows Server 2012 R2 with 8CPUs
HotSpot:
CODE

CODE

18.59s,16.844s,16.313

OpenJ9:
CODE

CODE

11.985s,14.252s,12.188s

OpenJ9 with CODE:
CODE

Cold run 22.058s",Investigation and Exploration,True,202,CONTRIBUTOR,False,False,False,1.0,0.2627737226,0.5,0.4014869888,0.02049630879,0.9795036912,0.0002559218155,0.0001064270333
"Warm runs 8.896s,9.672s,9.25s",Social Conversation,False,29,CONTRIBUTOR,False,False,False,0.08333333333,0.02189781022,1.0,0.405204461,0.02049630879,0.9795036912,0.0002559218155,0.0001064270333
That looks pretty good.,Social Conversation,False,23,CONTRIBUTOR,False,False,False,0.2857142857,0.02919708029,0.5,0.4089219331,0.02056711873,0.9794328813,0.0001064270333,7.91e-05
Which leaves us with the question of what's going on with the OP's setup.,Investigation and Exploration,False,73,CONTRIBUTOR,False,False,False,1.0,0.102189781,1.0,0.4126394052,0.02056711873,0.9794328813,0.0001064270333,7.91e-05
Yep.  Trying to see if I can limit my runs to a single CPU to see if that matters.,Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,0.9090909091,0.1459854015,0.3333333333,0.4163568773,0.02061974402,0.979380256,7.91e-05,4.56e-06
The OP only has a single CPU.,Investigation and Exploration,False,29,CONTRIBUTOR,False,False,False,0.3181818182,0.05109489051,0.6666666667,0.4200743494,0.02061974402,0.979380256,7.91e-05,4.56e-06
"@jsimomaa would it be possible run the following command using the OpenJ9 VM and provide the javacore*.txt and the gc.log?
CODE",Investigation and Exploration,True,128,CONTRIBUTOR,False,False,False,1.0,0.1605839416,1.0,0.4237918216,0.02061974402,0.979380256,7.91e-05,4.56e-06
Interesting results indeed - of course Windows Server 2012 is not the same than Windows 10 so there is still a difference.,Investigation and Exploration,False,122,NONE,True,False,False,1.0,0.1532846715,0.3333333333,0.4275092937,0.02062277479,0.9793772252,4.56e-06,6.05e-05
Is there something more I could do or test with my setup?,Social Conversation,False,57,NONE,True,False,False,0.5714285714,0.08759124088,0.6666666667,0.4312267658,0.02062277479,0.9793772252,4.56e-06,6.05e-05
I think I can get an access to a Windows Server 2012/2016 as well to run my benchmark there.,Task Progress,False,92,NONE,True,False,False,0.9047619048,0.1386861314,1.0,0.4349442379,0.02062277479,0.9793772252,4.56e-06,6.05e-05
"Single cpu, but it was 8 cores I think?",Investigation and Exploration,False,39,CONTRIBUTOR,False,False,False,0.6923076923,0.06569343066,0.5,0.43866171,0.02066300145,0.9793369986,6.05e-05,6e-05
I seem to remember seeing multiple active JIT compilation threads in the logs.,Social Conversation,False,78,CONTRIBUTOR,False,False,False,1.0,0.09489051095,1.0,0.4423791822,0.02066300145,0.9793369986,6.05e-05,6e-05
"Here is the output of the command @charliegracie suggested:

CODE",Investigation and Exploration,True,67,NONE,True,False,False,1.0,0.0802919708,0.5,0.4460966543,0.02070295258,0.9792970474,6e-05,2.11e-05
"And here are the files:
[gc.log] URL 
[javacore.20190529.184509.18644.0001.txt] URL ",Investigation and Exploration,False,86,NONE,True,False,False,1.0,0.0802919708,1.0,0.4498141264,0.02070295258,0.9792970474,6e-05,2.11e-05
"Yes, single CPU and 8 cores (CODE).",Investigation and Exploration,True,35,NONE,True,False,False,1.0,0.05109489051,1.0,0.4535315985,0.02071700436,0.9792829956,2.11e-05,6.38e-05
Using CODE slowed both JVMs down and appeared to affect HotSpot even more than OpenJ9.,Investigation and Exploration,True,86,CONTRIBUTOR,False,False,False,1.0,0.1094890511,0.5,0.4572490706,0.02075943522,0.9792405648,6.38e-05,0.0001014576777
I should be able to spin up a Windows 10 machine to check things out.,Social Conversation,False,69,CONTRIBUTOR,False,False,False,1.0,0.1094890511,1.0,0.4609665428,0.02075943522,0.9792405648,6.38e-05,0.0001014576777
"I7-6700HQ

That's very close to the i7-6820HQ that I ran on, which makes the difference in absolute times we are seeing pretty weird.",Investigation and Exploration,False,135,CONTRIBUTOR,False,False,False,1.0,0.1897810219,0.3333333333,0.4646840149,0.02082693886,0.9791730611,0.0001014576777,0.0001142951797
IO?,Investigation and Exploration,False,3,CONTRIBUTOR,False,False,False,0.03846153846,0.007299270073,0.6666666667,0.468401487,0.02082693886,0.9791730611,0.0001014576777,0.0001142951797
I'm running on Linux with an ext4 filesystem on SSD.,Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,0.3846153846,0.07299270073,1.0,0.4721189591,0.02082693886,0.9791730611,0.0001014576777,0.0001142951797
@jsimomaa while I spin up a Windows 10 image could you do one more test.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.7142857143,0.1094890511,0.3333333333,0.4758364312,0.02090298377,0.9790970162,0.0001142951797,1.41e-05
Could you add CODE to your OpenJ9 command line when you are starting the spring application and provide that javacore.*.txt file?,Investigation and Exploration,True,129,CONTRIBUTOR,False,False,False,1.0,0.1532846715,0.6666666667,0.4795539033,0.02090298377,0.9790970162,0.0001142951797,1.41e-05
Thanks so much for helping dig into this issue!,Social Conversation,False,47,CONTRIBUTOR,False,False,False,0.4285714286,0.06569343066,1.0,0.4832713755,0.02090298377,0.9790970162,0.0001142951797,1.41e-05
"I7-6700HQ
 
 That's very close to the i7-6820HQ that I ran on, which makes the difference in absolute times we are seeing pretty weird.",Investigation and Exploration,False,137,NONE,True,False,False,1.0,0.1897810219,0.5,0.4869888476,0.02091235162,0.9790876484,1.41e-05,0.0002397714096
Here NVMe PM951 SAMSUNG 512GB and supposedly on NTFS filesystem..,Investigation and Exploration,False,65,NONE,True,False,False,0.4615384615,0.08759124088,1.0,0.4907063197,0.02091235162,0.9790876484,1.41e-05,0.0002397714096
"Well this is getting interesting - I ran (**note:** without CODE):

CODE",Investigation and Exploration,True,74,NONE,True,False,False,0.5833333333,0.102189781,0.4,0.4981412639,0.02107188063,0.9789281194,0.0002397714096,5.22e-05
"And my startup was:

CODE",Investigation and Exploration,True,27,NONE,True,False,False,0.25,0.04379562044,0.6,0.5018587361,0.02107188063,0.9789281194,0.0002397714096,5.22e-05
"But now **with** CODE (which I've used for every run during this debugging):

CODE
CODE",Investigation and Exploration,True,90,NONE,True,False,False,0.7916666667,0.1386861314,0.8,0.5055762082,0.02107188063,0.9789281194,0.0002397714096,5.22e-05
"So it seems the CODE is slowing things down on my setup..

Here is the javacore.txt file @charliegracie requested:
[javacore.20190529.190736.13032.0001.txt] URL ",Investigation and Exploration,True,164,NONE,True,False,False,1.0,0.1751824818,1.0,0.5092936803,0.02107188063,0.9789281194,0.0002397714096,5.22e-05
"And here javacore.txt with both CODE:

CODE
CODE

[javacore.20190529.191139.19200.0001.txt] URL ",Investigation and Exploration,True,101,NONE,True,False,False,1.0,0.09489051095,1.0,0.5130111524,0.02110659679,0.9788934032,5.22e-05,0.006018717906
That is very interesting.,Social Conversation,False,25,CONTRIBUTOR,False,False,False,0.1666666667,0.02919708029,0.125,0.5167286245,0.02511107793,0.9748889221,0.006018717906,8.32e-05
For some reason adding CODE is making things slower on your system.,Investigation and Exploration,True,67,CONTRIBUTOR,False,False,False,0.5,0.08759124088,0.25,0.5204460967,0.02511107793,0.9748889221,0.006018717906,8.32e-05
@JamesKingdon or @dsouzai or @mpirvu can we disable AOT for the shared classes cache via a command line option?,Investigation and Exploration,False,111,CONTRIBUTOR,False,False,False,0.7916666667,0.1386861314,0.375,0.5241635688,0.02511107793,0.9748889221,0.006018717906,8.32e-05
It would be interesting to see if just have the ROM classes in the cache slows things down.,Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,0.75,0.1313868613,0.5,0.5278810409,0.02511107793,0.9748889221,0.006018717906,8.32e-05
If it does then it feels like some sort of file IO or something that is making shared classes slow.,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,0.8333333333,0.1459854015,0.625,0.531598513,0.02511107793,0.9748889221,0.006018717906,8.32e-05
@jsimomaa is your machine running any virus software?,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.3333333333,0.05839416058,0.75,0.5353159851,0.02511107793,0.9748889221,0.006018717906,8.32e-05
Just trying to think about things that may make file IO slow.,Investigation and Exploration,False,61,CONTRIBUTOR,False,False,False,0.5,0.08759124088,0.875,0.5390334572,0.02511107793,0.9748889221,0.006018717906,8.32e-05
"My Windows 10 image does not have anything installed so getting it up to date with GIT, etc will likely take me until tomorrow.",Investigation and Exploration,False,127,CONTRIBUTOR,False,False,False,1.0,0.1751824818,1.0,0.5427509294,0.02511107793,0.9748889221,0.006018717906,8.32e-05
"Yes, Windows Defender but I've turned it off and have verified that the process is not active during the Spring Boot app startup.

> If it does then it feels like some sort of file IO or something that is making shared classes slow

Also made me think of my SSD performanace but I ran couple of benchmarks and the disk seems to be in good shape.",Investigation and Exploration,False,349,NONE,True,False,False,1.0,0.503649635,1.0,0.5464684015,0.02516645846,0.9748335415,8.32e-05,1.9e-05
"CODE will disable AOT, but will leave the sharing of classes.",Investigation and Exploration,True,61,CONTRIBUTOR,False,False,False,1.0,0.0802919708,1.0,0.5501858736,0.02517913261,0.9748208674,1.9e-05,5.8e-05
"@jsimomaa Just to make sure, is the slowdown induced by CODE seen in the second run, or just in the first?",Investigation and Exploration,True,106,CONTRIBUTOR,False,False,False,1.0,0.1532846715,0.5,0.5539033457,0.02521770612,0.9747822939,5.8e-05,2.73e-05
The first run is expected to be slower because the cache is empty (non-existent).,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.7142857143,0.1094890511,1.0,0.5576208178,0.02521770612,0.9747822939,5.8e-05,2.73e-05
The slowdown is on the second run.,Investigation and Exploration,False,34,NONE,True,False,False,0.7777777778,0.05109489051,0.5,0.56133829,0.02523589078,0.9747641092,2.73e-05,5.42e-05
The first run takes even longer (approximately ~23 seconds).,Investigation and Exploration,False,60,NONE,True,False,False,1.0,0.06569343066,1.0,0.5650557621,0.02523589078,0.9747641092,2.73e-05,5.42e-05
If you delete your share classes cache and then run with CODE and CODE what is the time for your first and second run?,Investigation and Exploration,True,118,CONTRIBUTOR,False,False,False,1.0,0.1751824818,0.5,0.5687732342,0.02527198456,0.9747280154,5.42e-05,0.0001395560709
If it is still slow then there is likely some sort of issue with how the file is being read on your system.,Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,0.9583333333,0.1678832117,1.0,0.5724907063,0.02527198456,0.9747280154,5.42e-05,0.0001395560709
"1. CODE
2. CODE
CODE
3. CODE
CODE
4. One more CODE
CODE",Investigation and Exploration,True,61,NONE,True,False,False,1.0,0.1386861314,1.0,0.5762081784,0.0253648365,0.9746351635,0.0001395560709,8.2e-05
So that's roughly a 60% penalty for just using the SCC.,Investigation and Exploration,False,55,CONTRIBUTOR,False,False,False,1.0,0.0802919708,0.5,0.5799256506,0.02541939046,0.9745806095,8.2e-05,1.78e-05
How strange.,Social Conversation,False,12,CONTRIBUTOR,False,False,False,0.1818181818,0.01459854015,1.0,0.5836431227,0.02541939046,0.9745806095,8.2e-05,1.78e-05
That is very strange.,Social Conversation,False,21,CONTRIBUTOR,False,False,False,0.2,0.02919708029,0.5,0.5873605948,0.02543123804,0.974568762,1.78e-05,5.09e-05
I am very interested in seeing how my Windows machine runs once I get all of the pre-reqs installed.,Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,1.0,0.1459854015,1.0,0.5910780669,0.02543123804,0.974568762,1.78e-05,5.09e-05
Is there anything strange about the C:\Users\Jani\AppData\Local\javasharedresources directory?,Investigation and Exploration,False,94,CONTRIBUTOR,False,False,False,1.0,0.05839416058,0.5,0.594795539,0.02546512762,0.9745348724,5.09e-05,4.93e-05
Extra encryption or compression maybe?,Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.625,0.03649635036,1.0,0.5985130112,0.02546512762,0.9745348724,5.09e-05,4.93e-05
"Yeah.. I am starting to think that

> If it is still slow then there is likely some sort of issue with how the file is being read on your system.",Investigation and Exploration,False,147,NONE,True,False,False,0.9696969697,0.2335766423,0.25,0.6022304833,0.0254979151,0.9745020849,4.93e-05,0.0002157528574
"there is something not quite right with my machine here..

However, we have come down from the initial 160s startup time to ~12s so at least I've learned a lot.",Investigation and Exploration,False,162,NONE,True,False,False,1.0,0.2408759124,0.5,0.6059479554,0.0254979151,0.9745020849,4.93e-05,0.0002157528574
Not that I'm aware of.,Social Conversation,False,22,NONE,True,False,False,0.1515151515,0.03649635036,0.75,0.6096654275,0.0254979151,0.9745020849,4.93e-05,0.0002157528574
[The folder contains two files](https://github.com/eclipse/openj9/issues/5918#issuecomment-496664920).,Investigation and Exploration,False,102,NONE,True,False,False,0.2424242424,0.05839416058,1.0,0.6133828996,0.0254979151,0.9745020849,4.93e-05,0.0002157528574
"However, we have come down from the initial 160s startup time to ~12s so at least I've learned a lot.",Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,0.84,0.1532846715,0.25,0.6171003717,0.02564146366,0.9743585363,0.0002157528574,0.0002654464138
"True, although it ought to be faster, so it's hard to let it go :)",Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,0.6,0.1094890511,0.5,0.6208178439,0.02564146366,0.9743585363,0.0002157528574,0.0002654464138
"We were looking at making shared classes on by default, so we'd definitely want to know if there's a gotcha lurking on some platforms.",Investigation and Exploration,False,134,CONTRIBUTOR,False,False,False,1.0,0.1824817518,0.75,0.624535316,0.02564146366,0.9743585363,0.0002157528574,0.0002654464138
hmm my Windows 10 box is not showing a slowdown with CODE.,Investigation and Exploration,True,58,CONTRIBUTOR,False,False,False,0.4615384615,0.08759124088,0.2,0.6319702602,0.02581807522,0.9741819248,0.0002654464138,9.32e-05
"default runs:
7.9s,7.8s,7.9s

shareclasses cold:
14.4s

shareclasses warm:
7.1s,6.9s,7.0s

I would have expected CODE to provide more of a win",Investigation and Exploration,True,151,CONTRIBUTOR,False,False,False,1.0,0.1897810219,0.4,0.6356877323,0.02581807522,0.9741819248,0.0002654464138,9.32e-05
but it is still a win even on this Windows 10 machine.,Investigation and Exploration,False,54,CONTRIBUTOR,False,False,False,0.4615384615,0.08759124088,0.6,0.6394052045,0.02581807522,0.9741819248,0.0002654464138,9.32e-05
I did not measure Hotspot as I do not believe it is required now since it looks like an issue with CODE.,Investigation and Exploration,True,104,CONTRIBUTOR,False,False,False,0.8461538462,0.1605839416,0.8,0.6431226766,0.02581807522,0.9741819248,0.0002654464138,9.32e-05
@jsimomaa would it be possible to share your jar file just to make sure that my setup is as close as possible?,Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,0.8461538462,0.1605839416,1.0,0.6468401487,0.02581807522,0.9741819248,0.0002654464138,9.32e-05
"The improvements I see on my laptop (Windows 10 based) are significant:

 -Xms256m -Xmx1G
 Started Application in 6.133 seconds (JVM running for 7.087)
 Started Application in 6.433 seconds (JVM running for 7.332)
 Started Application in 6.539 seconds (JVM running for 7.485)

-Xms256m -Xmx1G -Xshareclasses -Xscmx100M 
  Started Application in 14.555 seconds (JVM running for 16.19)
  Started Application in 3.696 seconds (JVM running for 4.052)
  Started Application in 3.505 seconds (JVM running for 3.806)
  Started Application in 3.729 seconds (JVM running for 4.004)",Investigation and Exploration,False,583,CONTRIBUTOR,False,False,False,1.0,0.6934306569,1.0,0.6505576208,0.02588006835,0.9741199316,9.32e-05,8.65e-05
Here you go: https://drive.google.com/open?id=1dvNNXXmYQZqvlQRzkST4DRGMrm5nsfhh,Investigation and Exploration,False,79,NONE,True,False,False,1.0,0.02919708029,1.0,0.6542750929,0.02593765309,0.9740623469,8.65e-05,0.0005470432334
I tracked the file accesses to CODE folder with [Process Monitor] URL  and there were total of 5412 tracked events.,Investigation and Exploration,True,115,NONE,True,False,False,1.0,0.1532846715,0.25,0.6579925651,0.02630162169,0.9736983783,0.0005470432334,9.69e-05
I'm not sure if this helps at all,Social Conversation,False,33,NONE,True,False,False,0.380952381,0.05839416058,0.5,0.6617100372,0.02630162169,0.9736983783,0.0005470432334,9.69e-05
but still I'm attaching the results here.,Social Conversation,False,41,NONE,True,False,False,0.3333333333,0.05109489051,0.75,0.6654275093,0.02630162169,0.9736983783,0.0005470432334,9.69e-05
"Okay, this is good to know.",Social Conversation,False,27,NONE,True,False,False,0.2727272727,0.04379562044,0.25,0.6728624535,0.02636609455,0.9736339055,9.69e-05,0.01430180553
So if I want to debug my application I either just use OpenJDK+HotSpot for that or suffer the performance loss with openJ9.,Expected Behaviour,False,123,NONE,True,False,False,1.0,0.1605839416,0.5,0.6765799257,0.02636609455,0.9736339055,9.69e-05,0.01430180553
The app will run in production inside a container so there openJ9 **should** give me a nice boost in terms of performance.,Expected Behaviour,False,122,NONE,True,False,False,1.0,0.1605839416,0.75,0.6802973978,0.02636609455,0.9736339055,9.69e-05,0.01430180553
I can try the performance inside a container later this week and can then provide feedback on that.,Task Progress,False,99,NONE,True,False,False,0.8181818182,0.1313868613,1.0,0.6840148699,0.02636609455,0.9736339055,9.69e-05,0.01430180553
"I had the chance myself to test this on a fresh Windows 10 machine and here are the results:

1. First with [jdk8u212-b03 (HotSpot)] URL 
CODE

CODE

2. Second with [jdk8u212-b04_openj9-0.14.2] URL 

CODE

CODE

CODE",Testing,True,229,NONE,True,False,False,1.0,0.3284671533,0.5,0.687732342,0.03588162782,0.9641183722,0.01430180553,0.007829219811
"So similar results - the machine itself is a bit newer Dell model with the following specs:

CODE",Testing,True,99,NONE,True,False,False,0.4,0.1313868613,1.0,0.6914498141,0.03588162782,0.9641183722,0.01430180553,0.007829219811
I can reproduce the regression with Xshareclasses using the jdk8u212-b04_openj9-0.14.2 SDK (the one used by @jsimomaa).,Bug Reproduction,False,119,CONTRIBUTOR,False,False,False,1.0,0.1313868613,0.3333333333,0.6951672862,0.0410907045,0.9589092955,0.007829219811,0.0005884545304
My results above (https://github.com/eclipse/openj9/issues/5918#issuecomment-497107621) were using a development driver I had on my laptop.,Testing,False,139,CONTRIBUTOR,False,False,False,0.7777777778,0.102189781,0.6666666667,0.6988847584,0.0410907045,0.9589092955,0.007829219811,0.0005884545304
"The regression is seen even with -Xnoaot, so it's related to class sharing infra rather than AOT.",Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,0.9444444444,0.1240875912,1.0,0.7026022305,0.0410907045,0.9589092955,0.007829219811,0.0005884545304
fyi @hangshao0,Contribution and Commitment,False,14,MEMBER,False,False,False,1.0,0.01459854015,1.0,0.7063197026,0.0414822256,0.9585177744,0.0005884545304,3.52e-05
"Hmm interesting since I was using the same VM as the OP and I was not seeing any regression, but I am glad someone can reproduce it :)",Social Conversation,False,134,CONTRIBUTOR,False,False,False,1.0,0.204379562,1.0,0.7100371747,0.04150564523,0.9584943548,3.52e-05,6.34e-05
@mpirvu any chance you can grab a profile so we can see where all of the time is being spent?,Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,0.8695652174,0.1459854015,0.5,0.7137546468,0.04154780057,0.9584521994,6.34e-05,0.001395974822
The only Windows machines I have access to with Windows 10 are virtualized instances so that may be why I can not reproduce.,Bug Reproduction,False,124,CONTRIBUTOR,False,False,False,1.0,0.1678832117,1.0,0.717472119,0.04154780057,0.9584521994,6.34e-05,0.001395974822
Also @mpirvu what was the java -version from your development build?,Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,1.0,0.0802919708,0.5,0.7211895911,0.04247659552,0.9575234045,0.001395974822,0.0004207387775
The SHAs will help track down changes,Investigation and Exploration,False,37,CONTRIBUTOR,False,False,False,0.6363636364,0.05109489051,1.0,0.7249070632,0.04247659552,0.9575234045,0.001395974822,0.0004207387775
"I pulled the 14.2 build for Linux just to see if there was any sign of the regression on that platform, but I'm not seeing it.",Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,1.0,0.1897810219,1.0,0.7286245353,0.04275652898,0.957243471,0.0004207387775,0.002371624979
I suspect it is related to timestamp checking of the jars.,Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.55,0.0802919708,0.5,0.7360594796,0.04433446097,0.955665539,0.002371624979,9.23e-05
We do timestamp checking to make sure the jar files are not updated when returning classes from the shared cache.,Investigation and Exploration,False,113,CONTRIBUTOR,False,False,False,1.0,0.1459854015,0.75,0.7397769517,0.04433446097,0.955665539,0.002371624979,9.23e-05
Probably it is worth trying with CODE-Xshareclasses:noTimestampChecksCODE   @jsimomaa,Investigation and Exploration,True,85,CONTRIBUTOR,False,False,False,0.55,0.0802919708,1.0,0.7434944238,0.04433446097,0.955665539,0.002371624979,9.23e-05
"Nice - while 14.2 didn't have a regression, turning off the timestamps does give me a startup boost:

1.93, 1.947, 1.985

vs around 2.6s before.",Solution Discussion,False,148,CONTRIBUTOR,False,False,False,1.0,0.1897810219,0.5,0.7472118959,0.04439590305,0.9556040969,9.23e-05,1.04e-05
It's really flying now!,Social Conversation,False,23,CONTRIBUTOR,False,False,False,0.1538461538,0.02919708029,1.0,0.750929368,0.04439590305,0.9556040969,9.23e-05,1.04e-05
I remember @mpirvu did some benchmark tests before showing that the timestamp checking has more performance impact on Windows than on Linux.,Investigation and Exploration,False,140,CONTRIBUTOR,False,False,False,1.0,0.1605839416,1.0,0.7546468401,0.04440279118,0.9555972088,1.04e-05,1.41e-05
That fits.,Social Conversation,False,10,CONTRIBUTOR,False,False,False,0.09090909091,0.01459854015,0.5,0.7583643123,0.04441215903,0.955587841,1.41e-05,3.48e-05
I wonder what else we did going from 14.0 to 14.2 that compensates for the timestamp checking overhead (at least on Linux).,Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,1.0,0.1605839416,1.0,0.7620817844,0.04441215903,0.955587841,1.41e-05,3.48e-05
"So, after we have started loading classes from the SCC, if we discover the timestamp has changed what do we do?",Investigation and Exploration,False,111,CONTRIBUTOR,False,False,False,0.75,0.1532846715,0.5,0.7657992565,0.04443530314,0.9555646969,3.48e-05,0.0005201258903
"I'm just wondering if there is any need to check the timestamps on every access, or if once per run or once per 'arbitrary interval' would be sufficient.",Solution Discussion,False,153,CONTRIBUTOR,False,False,False,1.0,0.204379562,1.0,0.7695167286,0.04443530314,0.9555646969,3.48e-05,0.0005201258903
if we discover the timestamp has changed what do we do?,Solution Discussion,False,55,CONTRIBUTOR,False,False,False,0.4074074074,0.0802919708,0.125,0.7732342007,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
We do not return the class from the shared cache.,Solution Discussion,False,49,CONTRIBUTOR,False,False,False,0.3703703704,0.07299270073,0.25,0.7769516729,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
The class loader goes to the disk to load the class as usually.,Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.4814814815,0.09489051095,0.375,0.780669145,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
"A bit of history: On Windows, the jar file cannot be updated if it is hold open.",Solution Discussion,False,80,CONTRIBUTOR,False,False,False,0.6666666667,0.1313868613,0.5,0.7843866171,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
So we skip timestamp checking if the jar file is opened.,Solution Discussion,False,56,CONTRIBUTOR,False,False,False,0.4074074074,0.0802919708,0.625,0.7881040892,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
"JCL knows the info if a Jar file is open or not, and used to provide such info to the JVM.",Solution Discussion,False,90,CONTRIBUTOR,False,False,False,0.7777777778,0.1532846715,0.75,0.7918215613,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
"Howerver, the patch on the JCL side to detect such info was removed, making the JVM doing timestamp checking on every class loaded from the shared cache.",Solution Discussion,False,153,CONTRIBUTOR,False,False,False,1.0,0.197080292,0.875,0.7955390335,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
There is an issue open on the extension JCL repo to add this patch back.,Solution Discussion,False,72,CONTRIBUTOR,False,False,False,0.5555555556,0.1094890511,1.0,0.7992565056,0.0447813626,0.9552186374,0.0005201258903,0.0006439456684
"OK, I have run the test on my Windows10 using the jdk8u212-b04_openj9-0.14.2 SDK (the one used by @jsimomaa).",Testing,False,109,CONTRIBUTOR,False,False,False,0.5405405405,0.1459854015,0.25,0.8029739777,0.04520980406,0.9547901959,0.0006439456684,0.01947449064
"1. No SCC
CODE

2. cold SCC
CODE

3. warm SCC
CODE

4. warm SCC with noTimestampChecks
CODE

So timestamp checking is slowing things down (from 4s to 13s).",Solution Discussion,True,167,CONTRIBUTOR,False,False,False,1.0,0.2700729927,0.5,0.8066914498,0.04520980406,0.9547901959,0.0006439456684,0.01947449064
This issue should be gone once JCL add the missing patch back that detects jar file open.,Solution Discussion,False,89,CONTRIBUTOR,False,False,False,0.4594594595,0.1240875912,0.75,0.8104089219,0.04520980406,0.9547901959,0.0006439456684,0.01947449064
"But for now if you are not updating the jar file, you can use CODE @jsimomaa",Solution Discussion,True,76,CONTRIBUTOR,False,False,False,0.4324324324,0.1167883212,1.0,0.8141263941,0.04520980406,0.9547901959,0.0006439456684,0.01947449064
"@hangshao0 Yep, I can confirm the same behavior on my setup!",Investigation and Exploration,False,60,NONE,True,False,False,0.44,0.0802919708,0.3333333333,0.8178438662,0.05816692079,0.9418330792,0.01947449064,0.007031224118
"1. No SCC

CODE

2. cold SCC

CODE

3. warm SCC

CODE

4. warm SCC with CODE

CODE",Investigation and Exploration,True,96,NONE,True,False,False,1.0,0.1824817518,0.6666666667,0.8215613383,0.05816692079,0.9418330792,0.01947449064,0.007031224118
So to me seems like we've found the culprit that's causing the overhead here.,Investigation and Exploration,False,77,NONE,True,False,False,0.6,0.1094890511,1.0,0.8252788104,0.05816692079,0.9418330792,0.01947449064,0.007031224118
So timestamp checking is slowing things down (from 4s to 13s).,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.3548387097,0.0802919708,0.25,0.8289962825,0.06284506069,0.9371549393,0.007031224118,0.002372867318
"Once that change is in, can we revisit this question to see how much overhead remains on different platforms?",Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.6129032258,0.1386861314,0.5,0.8327137546,0.06284506069,0.9371549393,0.007031224118,0.002372867318
I'm intrigued by the 30% or so benefit that noTimestampChecks gives on Linux at the moment - I don't think we should leave that on the table if we can avoid it.,Solution Discussion,False,160,CONTRIBUTOR,False,False,False,1.0,0.2262773723,0.75,0.8364312268,0.06284506069,0.9371549393,0.007031224118,0.002372867318
@mpirvu,Social Conversation,False,7,CONTRIBUTOR,False,False,False,0.03225806452,0.007299270073,1.0,0.8401486989,0.06284506069,0.9371549393,0.007031224118,0.002372867318
"I'm intrigued by the 30% or so benefit that noTimestampChecks gives on Linux at the moment

On Linux, using Liberty start-up, CODE gives me less than 1% which is noise.",Investigation and Exploration,True,170,CONTRIBUTOR,False,False,False,1.0,0.2335766423,1.0,0.843866171,0.06442381925,0.9355761807,0.002372867318,0.001221633262
"I wonder why this test shows so much more impact - maybe Spring boot brings in a larger number of jars?

-- looks like the whole app is in only one jar on the filesystem which is spring.boot.openj9-0.0.1-SNAPSHOT.jar. That jar contains 157 jars inside it, but it wouldn't make sense to be checking timestamps of those would it?",Solution Discussion,False,329,CONTRIBUTOR,False,False,False,1.0,0.4233576642,0.3333333333,0.8475836431,0.06523661816,0.9347633818,0.001221633262,0.003514162664
"There seems to be an element of mystery here.

edit 2, delta is still reproducible, a solid 30% from disabling timestamp checks.",Social Conversation,False,130,CONTRIBUTOR,False,False,False,0.3965517241,0.1678832117,0.6666666667,0.8513011152,0.06523661816,0.9347633818,0.001221633262,0.003514162664
"edit 3: -verbose indicates we load 9072 classes during startup for this app, I can't imagine that's a lot more than a typical liberty test case, but it would be interesting to know what that number is.",Bug Reproduction,False,201,CONTRIBUTOR,False,False,False,0.6379310345,0.2700729927,1.0,0.8550185874,0.06523661816,0.9347633818,0.001221633262,0.003514162664
I was also able to reproduce a big win on Linux launching this spring application by adding the noTimestampChecks.,Bug Reproduction,False,114,CONTRIBUTOR,False,False,False,1.0,0.1386861314,0.3333333333,0.8587360595,0.06757472377,0.9324252762,0.003514162664,4.8e-05
I definitely think this is something we should investigate further!,Investigation and Exploration,False,67,CONTRIBUTOR,False,False,False,0.5263157895,0.07299270073,0.6666666667,0.8624535316,0.06757472377,0.9324252762,0.003514162664,4.8e-05
With CODE on Linux this application starts up 2X as fast as HotSpot.,Investigation and Exploration,True,68,CONTRIBUTOR,False,False,False,0.6842105263,0.09489051095,1.0,0.8661710037,0.06757472377,0.9324252762,0.003514162664,4.8e-05
Originally the jar of jar files did not work with CODE so I wouldn't be surprised if the timestamp for each individual jar inside the wrapping jar file is also being checked.,Investigation and Exploration,True,174,CONTRIBUTOR,False,False,False,1.0,0.2335766423,0.5,0.8698884758,0.06760668468,0.9323933153,4.8e-05,0.0001677157529
157 jar files would be larger than any app I normally run by a very big margin.,Investigation and Exploration,False,79,CONTRIBUTOR,False,False,False,0.53125,0.1240875912,1.0,0.873605948,0.06760668468,0.9323933153,4.8e-05,0.0001677157529
"We only check the timestamp of the outside most jar, which is spring.boot.openj9-0.0.1-SNAPSHOT.jar in this case.",Investigation and Exploration,False,113,CONTRIBUTOR,False,False,False,0.4444444444,0.1167883212,0.3333333333,0.8773234201,0.06771827233,0.9322817277,0.0001677157529,0.000359450058
But we are checking this every time class is loaded from the shared cache.,Investigation and Exploration,False,74,CONTRIBUTOR,False,False,False,0.3888888889,0.102189781,0.6666666667,0.8810408922,0.06771827233,0.9322817277,0.0001677157529,0.000359450058
"(If the JCL patch is added back, this check would only happen once I believe)
For Liberty, one possibility is that they might have called SharedClassURLHelper.setMinimizeUpdateChecks() in their java code that disabled most timestamp checks.",Investigation and Exploration,False,241,CONTRIBUTOR,False,False,False,1.0,0.2627737226,1.0,0.8847583643,0.06771827233,0.9322817277,0.0001677157529,0.000359450058
"Probably on the VM side, we can change the default behavior to do timestamp check only once for each jar and introduce a new option ""forceTimestampChecks"" which does timestamp check on every load.",Solution Discussion,False,196,CONTRIBUTOR,False,False,False,1.0,0.2408759124,0.5,0.8884758364,0.06795742807,0.9320425719,0.000359450058,0.0002381149578
@pshipton,Social Conversation,False,9,CONTRIBUTOR,False,False,False,0.0303030303,0.007299270073,1.0,0.8921933086,0.06795742807,0.9320425719,0.000359450058,0.0002381149578
"Looking at the code, it looks like there's a need to add the concept of time-last-checked and the ability to specify an interval between checks.",Solution Discussion,False,144,CONTRIBUTOR,False,False,False,1.0,0.197080292,0.5,0.8959107807,0.06811585498,0.931884145,0.0002381149578,0.0006646513169
"Checking the same jar timestamp at micro-second resolution makes little sense, particularly when walking the classpath and everything is coming from the same jar file.",Solution Discussion,False,167,CONTRIBUTOR,False,False,False,0.962962963,0.1897810219,1.0,0.8996282528,0.06811585498,0.931884145,0.0002381149578,0.0006646513169
"If I recall correctly, many of the design decisions for timestamp checking came about from supporting the SCC in development scenarios when you want to be sure you're running the very latest version of the code you just wrote.",Solution Discussion,False,226,MEMBER,False,False,False,1.0,0.2846715328,1.0,0.9033457249,0.06855807269,0.9314419273,0.0006646513169,0.000151565347
Wouldn't that require a mechanism to monitor the FS and pro-actively unload jitted code?,Solution Discussion,False,88,CONTRIBUTOR,False,False,False,1.0,0.1094890511,1.0,0.907063197,0.06865891486,0.9313410851,0.000151565347,0.0002285903595
This was to ensure that we picked the most recent version of the class available.,Solution Discussion,False,81,MEMBER,False,False,False,1.0,0.1094890511,1.0,0.9144981413,0.06881100469,0.9311889953,0.0002285903595,0.0005002484678
"We don't really ""monitor"" the FS, we do timestamp check (when necessary) before returning class from the shared cache.",Solution Discussion,False,118,CONTRIBUTOR,False,False,False,0.5588235294,0.1386861314,0.3333333333,0.9182156134,0.06914383896,0.930856161,0.0005002484678,0.001788553918
"Not sure about jitted code, but for classes, if any JVM connecting to the shared cache detects an updated jar, we will mark all potentially stale classes in the shared cache as stale pessimistically.",Solution Discussion,False,199,CONTRIBUTOR,False,False,False,1.0,0.2481751825,0.6666666667,0.9219330855,0.06914383896,0.930856161,0.0005002484678,0.001788553918
When we later know the class is not actually updated we will remove the stale marking.,Solution Discussion,False,86,CONTRIBUTOR,False,False,False,0.4705882353,0.1167883212,1.0,0.9256505576,0.06914383896,0.930856161,0.0005002484678,0.001788553918
"Wouldn't that require a mechanism to monitor the FS and pro-actively unload jitted code?

Wouldn't that be equivalent (in a non SCC run) to a JVM loading classes, and then someone modified the jars on disk?",Solution Discussion,False,208,CONTRIBUTOR,False,False,False,1.0,0.2773722628,0.3333333333,0.9293680297,0.07033383167,0.9296661683,0.001788553918,0.0004054165976
I don't think the currently running JVM is expected to now start using the updated jars is it?,Solution Discussion,False,94,CONTRIBUTOR,False,False,False,0.4736842105,0.1313868613,0.6666666667,0.9330855019,0.07033383167,0.9296661683,0.001788553918,0.0004054165976
I would've thought that it just affected the next JVM instance.,Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.3157894737,0.08759124088,1.0,0.936802974,0.07033383167,0.9296661683,0.001788553918,0.0004054165976
"Yes, that's where I was heading.",Solution Discussion,False,32,CONTRIBUTOR,False,False,False,0.1578947368,0.04379562044,0.5,0.9405204461,0.07060357069,0.9293964293,0.0004054165976,0.0007946827895
"I don't think we can be sure that we're running the very latest version of the code, so it probably doesn't matter to anyone if we only check for updates every 100ms instead of on every class load.",Solution Discussion,False,197,CONTRIBUTOR,False,False,False,1.0,0.2773722628,1.0,0.9442379182,0.07060357069,0.9293964293,0.0004054165976,0.0007946827895
"it probably doesn't matter to anyone if we only check for updates every 100ms instead of on every class load

if classes are modified and we get some from the cache and some from the jar, they may not be compatible with each other",Solution Discussion,False,232,CONTRIBUTOR,False,False,False,1.0,0.3284671533,1.0,0.9479553903,0.07113230327,0.9288676967,0.0007946827895,4.6e-05
What has been described so far certainly doesn't prevent that case.,Solution Discussion,False,67,CONTRIBUTOR,False,False,False,1.0,0.0802919708,1.0,0.9516728625,0.07116288655,0.9288371134,4.6e-05,0.002656948816
File timestamps are not atomically updated and are not guaranteed to be updated for any given file update.,Solution Discussion,False,106,CONTRIBUTOR,False,False,False,0.4864864865,0.1313868613,0.5,0.9553903346,0.0729306553,0.9270693447,0.002656948816,0.170274971
Given the limited resolution of operating system timers and the aforementioned limitations of timestamps no scheme based on timestamp checking can ensure a file read twice at two different points in time is actually the same file.,Solution Discussion,False,230,CONTRIBUTOR,False,False,False,1.0,0.2700729927,1.0,0.9591078067,0.0729306553,0.9270693447,0.002656948816,0.170274971
@pshipton and I have been discussing alternative approaches.,Social Conversation,False,60,MEMBER,False,False,False,0.4210526316,0.05839416058,0.3333333333,0.9628252788,0.1862210471,0.8137789529,0.170274971,0.002992794434
There is a tentative design being considered but it needs more discussion in particular input from @hangshao0 is needed.,Task Progress,False,120,MEMBER,False,False,False,1.0,0.1386861314,0.6666666667,0.9665427509,0.1862210471,0.8137789529,0.170274971,0.002992794434
This will be updated when that design has been fleshed out more.,Task Progress,False,64,MEMBER,False,False,False,0.6315789474,0.08759124088,1.0,0.970260223,0.1862210471,0.8137789529,0.170274971,0.002992794434
Peter just discussed with me.,Social Conversation,False,29,CONTRIBUTOR,False,False,False,0.1515151515,0.03649635036,0.2,0.9739776952,0.1882122667,0.8117877333,0.002992794434,1.0
"In Java 11+, we can get the jar file open information from the class loader rather than using the JCL zip_hook.",Solution Discussion,False,111,CONTRIBUTOR,False,False,False,0.6363636364,0.1532846715,0.4,0.9776951673,0.1882122667,0.8117877333,0.002992794434,1.0
"Since this change may not make it to the 0.15.0 release, we can change the code to check the timestamp only once for each jar during the startup phase for the 0.15.0 release.",Solution Discussion,False,174,CONTRIBUTOR,False,False,False,1.0,0.2408759124,0.6,0.9814126394,0.1882122667,0.8117877333,0.002992794434,1.0
This will at least partially solve this problem for 0.15.0..,Solution Discussion,False,60,CONTRIBUTOR,False,False,False,0.3333333333,0.0802919708,0.8,0.9851301115,0.1882122667,0.8117877333,0.002992794434,1.0
"Later with jar file open info from class loader, this issue should be fully solved.",Solution Discussion,False,83,CONTRIBUTOR,False,False,False,0.4545454545,0.1094890511,1.0,0.9888475836,0.1882122667,0.8117877333,0.002992794434,1.0
Moving this to CODE as the changes aren't ready yet.,Action on Issue,True,52,MEMBER,False,False,False,1.0,0.07299270073,1.0,0.9925650558,0.8535501679,0.1464498321,1.0,0.1860133344
This should be resolved now by #6174,Solution Discussion,False,36,CONTRIBUTOR,False,False,False,1.0,0.05109489051,1.0,0.9962825279,0.9773118894,0.0226881106,0.1860133344,0.03410013252
Fixed for the 0.15 release via https://github.com/eclipse/openj9/pull/6401,Action on Issue,False,74,CONTRIBUTOR,False,False,True,1.0,0.05109489051,1.0,1.0,1.0,0.0,0.03410013252,0.0
AIX OOMs in extended.system SharedClasses MultiThread testing,Testing,False,61,CONTRIBUTOR,True,True,False,0.1320754717,0.1129032258,0.2,0.004219409283,0.0,1.0,0.0,0.003027854511
"""java/lang/OutOfMemoryError"" ""Failed to create a thread: retVal -1073741830, errno 11""
11 EAGAIN The limit on the number of threads per process has been reached.",Testing,False,162,CONTRIBUTOR,True,True,False,0.5094339623,0.435483871,0.4,0.008438818565,0.0,1.0,0.0,0.003027854511
-1073741830,Testing,False,11,CONTRIBUTOR,True,True,False,0.01886792453,0.01612903226,0.6,0.01265822785,0.0,1.0,0.0,0.003027854511
#ERROR!,Testing,False,723,CONTRIBUTOR,True,True,False,1.0,0.8548387097,0.8,0.01687763713,0.0,1.0,0.0,0.003027854511
"https://github.com/eclipse/openj9/compare/a1ed808...c209fa5
https://github.com/eclipse/openj9-omr/compare/b03105e...79f6485
https://github.com/ibmruntimes/openj9-openjdk-jdk11/compare/b1d6957...7d1badb

https://github.com/AdoptOpenJDK/openjdk-tests/compare/8737892...e459da2",Testing,False,278,CONTRIBUTOR,True,True,False,0.1320754717,0.1129032258,1.0,0.02109704641,0.0,1.0,0.0,0.003027854511
"@jdekonin could the machines have changed, this doesn't seem to have been caused by a JVM or test change.",Investigation and Exploration,False,105,CONTRIBUTOR,True,False,False,1.0,0.3064516129,1.0,0.0253164557,0.0004396574399,0.9995603426,0.003027854511,0.002461954921
"Ah, nm, I missed a change, this is caused by https://github.com/ibmruntimes/openj9-openjdk-jdk11/pull/272
@zl-wang @shanchao95 
Zulian, this seems problematic.",Investigation and Exploration,False,161,CONTRIBUTOR,True,False,False,1.0,0.3225806452,0.5,0.02953586498,0.0007971438362,0.9992028562,0.002461954921,0.004372595291
"Is it expected that ""MALLOCOPTIONS=multiheap,buckets"" would reduce the number of threads that can be created?",Expected Behaviour,False,109,CONTRIBUTOR,True,False,False,0.85,0.2741935484,1.0,0.03375527426,0.0007971438362,0.9992028562,0.002461954921,0.004372595291
"no, not aware of that.",Social Conversation,False,22,CONTRIBUTOR,False,False,False,0.625,0.08064516129,0.3333333333,0.03797468354,0.001432063395,0.9985679366,0.004372595291,0.003310804307
"especially, it doesn't make sense for 64bit.",Social Conversation,False,44,CONTRIBUTOR,False,False,False,0.875,0.1129032258,0.6666666667,0.04219409283,0.001432063395,0.9985679366,0.004372595291,0.003310804307
let me post a question to AIX folks.,Social Conversation,False,36,CONTRIBUTOR,False,False,False,1.0,0.1290322581,1.0,0.04641350211,0.001432063395,0.9985679366,0.004372595291,0.003310804307
i assumed errno==4 being returned upon pthread_create call?,Social Conversation,False,59,CONTRIBUTOR,False,False,False,1.0,0.1290322581,0.5,0.05063291139,0.001912806357,0.9980871936,0.003310804307,0.0009071895501
according to the message above,Social Conversation,False,30,CONTRIBUTOR,False,False,False,0.625,0.08064516129,1.0,0.05485232068,0.001912806357,0.9980871936,0.003310804307,0.0009071895501
Why 4 (INTR)?,Social Conversation,False,13,CONTRIBUTOR,True,False,False,0.0625,0.04838709677,0.3333333333,0.05907172996,0.002044534164,0.9979554658,0.0009071895501,0.00175020492
"pthread_create is returning 11 (EAGAIN), which is ""The limit on the number of threads per process has been reached."".

We did see a similar problem creating threads because of the data limit, but we modified the VM to set the data soft limit to the hard limit.",Expected Behaviour,False,262,CONTRIBUTOR,True,False,False,1.0,0.7741935484,0.6666666667,0.06329113924,0.002044534164,0.9979554658,0.0009071895501,0.00175020492
"i was looking at  ""J9THREAD_ERR_OS_ERRNO_SET 0x40000000""   ...  implying 4 seemed.",Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,1.0,0.1935483871,1.0,0.07172995781,0.002298671413,0.9977013286,0.00175020492,0.0002246096314
cryptic error message,Social Conversation,False,21,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.07594936709,0.002331285693,0.9976687143,0.0002246096314,0.01118964345
"AIX kernel folks responded:
pthread_create returns EAGAIN for exceeding the thread count ulimit or failure to allocate (malloc) memory for internal pthread data structures.",Investigation and Exploration,False,173,CONTRIBUTOR,False,False,False,0.6097560976,0.4032258065,0.2,0.08016877637,0.003956069835,0.9960439302,0.01118964345,0.000481306353
"I would say:
Let's dig a little deeper into the javacore file:  what is the ulimit?",Social Conversation,False,84,CONTRIBUTOR,False,False,False,0.4390243902,0.2903225806,0.4,0.08438818565,0.003956069835,0.9960439302,0.01118964345,0.000481306353
how many threads are currently active?,Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.1463414634,0.09677419355,0.6,0.08860759494,0.003956069835,0.9960439302,0.01118964345,0.000481306353
"short of ulimit issue, it is unimaginable that malloc failed for 64bit.",Investigation and Exploration,False,71,CONTRIBUTOR,False,False,False,0.2926829268,0.1935483871,0.8,0.09282700422,0.003956069835,0.9960439302,0.01118964345,0.000481306353
"if we can limit good & bad drivers to be without/with that PR, then we can experiment further with settings:
MALLOCOPTIONS=multiheap:4
MALLOCOPTIONS=multiheap:8
MALLOCOPTIONS=multiheap:16
(dropping ,buckets  which I didn't see in the manual anyway)",Investigation and Exploration,False,252,CONTRIBUTOR,False,False,False,1.0,0.6612903226,1.0,0.0970464135,0.003956069835,0.9960439302,0.01118964345,0.000481306353
"by the way, default is 32 heaps (max as well) without :n.",Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,1.0,0.1935483871,1.0,0.1012658228,0.004025957579,0.9959740424,0.000481306353,0.007003736688
I do see buckets option later on.,Social Conversation,False,33,CONTRIBUTOR,False,False,False,0.5833333333,0.1129032258,0.5,0.1054852321,0.005042930135,0.9949570699,0.007003736688,0.2206716703
"Let's play with/without it as well ... for example:
MALLOCOPTIONS=multiheap:4,buckets",Social Conversation,False,86,CONTRIBUTOR,False,False,False,1.0,0.1935483871,1.0,0.1097046414,0.005042930135,0.9949570699,0.007003736688,0.2206716703
"https://ci.eclipse.org/openj9/view/Test/job/Grinder/666 - multiheap,buckets - failed

https://ci.eclipse.org/openj9/view/Test/job/Grinder/661 - multiheap:4 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/662 - multiheap:4,buckets - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/663 - multiheap:8 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/664 - multiheap:8,buckets - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/667 - multiheap:16 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/668 - multiheap:16, buckets - passed",Testing,False,593,CONTRIBUTOR,True,False,False,1.0,0.4677419355,1.0,0.1139240506,0.03708540155,0.9629145984,0.2206716703,0.005069760251
"16 and 16,buckets passed too.",Testing,False,29,CONTRIBUTOR,False,False,False,0.5555555556,0.08064516129,0.5,0.1181434599,0.03782155245,0.9621784476,0.005069760251,0.001350574796
"could you launch explicit 32 and 32,buckets build/tests?",Testing,False,56,CONTRIBUTOR,False,False,False,1.0,0.1451612903,1.0,0.1223628692,0.03782155245,0.9621784476,0.005069760251,0.001350574796
"for pinning down the symptom, maybe it is good to launch 24,buckets ...  28,buckets, and 29/30/31,buckets.",Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,1.0,0.2580645161,0.5,0.1265822785,0.03801766169,0.9619823383,0.001350574796,0.04168404717
Let's see when it cracks.,Social Conversation,False,25,CONTRIBUTOR,False,False,False,0.3125,0.08064516129,1.0,0.1308016878,0.03801766169,0.9619823383,0.001350574796,0.04168404717
"https://ci.eclipse.org/openj9/view/Test/job/Grinder/671 - multiheap:32 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/672 - multiheap:32,buckets - failed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/673 - multiheap:28,buckets - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/674 - multiheap:24,buckets - failed

I'm only running one iteration of each test.",Testing,False,394,CONTRIBUTOR,True,False,False,1.0,0.3870967742,0.5,0.135021097,0.04407036383,0.9559296362,0.04168404717,0.01116047337
"Now 24,buckets has failed, but 28,buckets passed.",Testing,False,49,CONTRIBUTOR,True,False,False,0.2916666667,0.1129032258,1.0,0.1392405063,0.04407036383,0.9559296362,0.04168404717,0.01116047337
"that seemed indicating EAGAIN can happen unpredictably, depending on timing, for pthread_create call.",Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,0.3421052632,0.2096774194,0.125,0.1434599156,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
"assuming the same number of threads created in each run, that leaves only one possibility that virtual or data memory ulimit is exceeded unpredictably with massive concurrent malloc/free going on.  it could be momentarily exceeded though.",Investigation and Exploration,False,238,CONTRIBUTOR,False,False,False,1.0,0.6129032258,0.25,0.1476793249,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
"32,buckets failed around 14700 threads; while 24,buckets failed around 18000 threads.",Testing,False,85,CONTRIBUTOR,False,False,False,0.2894736842,0.1774193548,0.375,0.1518987342,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
"32,buckets have more fragmentations leading to the momentarily exceeding.",Investigation and Exploration,False,73,CONTRIBUTOR,False,False,False,0.2368421053,0.1451612903,0.5,0.1561181435,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
it makes sense to me.,Social Conversation,False,21,CONTRIBUTOR,False,False,False,0.1315789474,0.08064516129,0.625,0.1603375527,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
""",buckets"" option makes it doubly fragmented with many concurrent malloc/free.",Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.2894736842,0.1774193548,0.75,0.164556962,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
could you find out the ulimit for virtual memory and data memory for these runs?,Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.3947368421,0.2419354839,0.875,0.1687763713,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
"once we know the reason, we can decide on a fix.",Social Conversation,False,48,CONTRIBUTOR,False,False,False,0.2894736842,0.1774193548,1.0,0.1729957806,0.04569091235,0.9543090877,0.01116047337,0.0008605174189
"indeed, it is unpredictable.",Social Conversation,False,28,CONTRIBUTOR,False,False,False,0.2105263158,0.06451612903,0.6666666667,0.1814345992,0.04581586316,0.9541841368,0.0008605174189,0.001881470289
my theory seemed standing ...,Social Conversation,False,29,CONTRIBUTOR,False,False,False,0.2105263158,0.06451612903,1.0,0.1856540084,0.04581586316,0.9541841368,0.0008605174189,0.001881470289
"https://ci.eclipse.org/openj9/view/Test/job/Grinder/676 - multiheap:16,buckets x 3 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/677 - multiheap:20,buckets x 3 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/678 - multiheap:22,buckets x 3 - passed",Testing,False,277,CONTRIBUTOR,True,False,False,1.0,0.2741935484,1.0,0.1898734177,0.0460890607,0.9539109393,0.001881470289,4.38e-05
"if all are unlimited, we might need to bring it forward to AIX kernel team.",Social Conversation,False,75,CONTRIBUTOR,False,False,False,1.0,0.2419354839,0.3333333333,0.194092827,0.04609541414,0.9539045859,4.38e-05,0.002409448773
Logically at least.,Social Conversation,False,19,CONTRIBUTOR,False,False,False,0.2,0.04838709677,0.6666666667,0.1983122363,0.04609541414,0.9539045859,4.38e-05,0.002409448773
Depending on how to interpret EAGAIN.,Social Conversation,False,37,CONTRIBUTOR,False,False,False,0.4,0.09677419355,1.0,0.2025316456,0.04609541414,0.9539045859,4.38e-05,0.002409448773
"From https://ci.eclipse.org/openj9/view/Test/job/Grinder/674 - multiheap:24,buckets javacore
CODE",Investigation and Exploration,True,98,CONTRIBUTOR,True,False,False,1.0,0.09677419355,1.0,0.2067510549,0.04644527641,0.9535547236,0.002409448773,0.00149059119
it is likely RSS being exceeded momentarily.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.875,0.1129032258,0.5,0.2109704641,0.04666171664,0.9533382834,0.00149059119,0.001123048157
"didn't see ""virtual memory""  (-v)  though.",Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,1.0,0.1290322581,1.0,0.2151898734,0.04666171664,0.9533382834,0.00149059119,0.001123048157
"make RSS unlimited and retry ...

the eventual fix can go:  without  ,buckets.  need to confirm with performance benefit/data of "",buckets"" from security test cases.",Solution Discussion,False,167,CONTRIBUTOR,False,False,False,1.0,0.4677419355,1.0,0.2194092827,0.04682478804,0.953175212,0.001123048157,0.001592686477
"make RSS unlimited and retry ...

Is there a particular setting I should try with RSS unlimited?

 the eventual fix can go: without ,buckets",Solution Discussion,False,144,CONTRIBUTOR,True,False,False,1.0,0.4032258065,0.5,0.223628692,0.04705605294,0.9529439471,0.001592686477,0.003690015373
So I'll try a run with CODE then?,Solution Discussion,True,33,CONTRIBUTOR,True,False,False,0.32,0.1290322581,1.0,0.2278481013,0.04705605294,0.9529439471,0.001592686477,0.003690015373
ulimit -m unlimited  (for RSS unlimited),Solution Discussion,False,40,CONTRIBUTOR,False,False,False,0.7777777778,0.1129032258,0.5,0.2320675105,0.04759185897,0.952408141,0.003690015373,0.00225193033
"yes, we can try a few multiheap alone runs.",Solution Discussion,False,43,CONTRIBUTOR,False,False,False,1.0,0.1451612903,1.0,0.2362869198,0.04759185897,0.952408141,0.003690015373,0.00225193033
ulimit -m unlimited (for RSS unlimited),Solution Discussion,False,39,CONTRIBUTOR,True,False,False,1.0,0.09677419355,0.5,0.2405063291,0.04791884889,0.9520811511,0.00225193033,0.001569350411
"yes, but with which testcase, CODE?",Solution Discussion,True,35,CONTRIBUTOR,True,False,False,1.0,0.09677419355,1.0,0.2447257384,0.04791884889,0.9520811511,0.00225193033,0.001569350411
"yes, but with which testcase, multiheap:24,buckets?",Solution Discussion,False,51,CONTRIBUTOR,False,False,False,0.5,0.09677419355,0.5,0.2489451477,0.04814672529,0.9518532747,0.001569350411,7.29e-05
"yes, with any of the previously failing setting(s), e.g.  multiheap,buckets",Solution Discussion,False,75,CONTRIBUTOR,False,False,False,1.0,0.1935483871,1.0,0.253164557,0.04814672529,0.9518532747,0.001569350411,7.29e-05
"With ulimit -m unlimited:

https://ci.eclipse.org/openj9/view/Test/job/Grinder/683 - multiheap:24,buckets x 3 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/684 - multiheap:32,buckets - failed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/685 - multiheap,buckets - failed

Without changing ulimit:
https://ci.eclipse.org/openj9/view/Test/job/Grinder/686 - multiheap x 3 - passed",Solution Discussion,False,405,CONTRIBUTOR,True,False,False,1.0,0.4677419355,1.0,0.2573839662,0.04815731435,0.9518426857,7.29e-05,0.4459959687
Updated results in the previous comment.,Task Progress,False,40,CONTRIBUTOR,True,False,False,1.0,0.09677419355,1.0,0.2616033755,0.1129178387,0.8870821613,0.4459959687,0.2646134818
@zl-wang is someone looking at the performance of using CODE ?,Social Conversation,True,62,CONTRIBUTOR,True,False,False,1.0,0.1774193548,1.0,0.2658227848,0.1513408493,0.8486591507,0.2646134818,0.2076384777
"@chao.shan@ibm.com  could you compare on AIX crypto performance test cases between MALLOCOPTIONS=multiheap vs. MALLOCOPTIONS=multiheap,buckets?",Task Progress,False,143,CONTRIBUTOR,False,False,False,1.0,0.2903225806,1.0,0.2700421941,0.1814908453,0.8185091547,0.2076384777,0.257542654
"@pshipton @zl-wang Sure, here is AIX crypto performance and compare for CODE, CODE, CODE .  )",Investigation and Exploration,True,93,NONE,False,False,False,1.0,0.2580645161,0.5,0.2742616034,0.2188871415,0.7811128585,0.257542654,0.01185472132
[performance.xlsx] URL,Investigation and Exploration,False,23,NONE,False,False,False,0.125,0.03225806452,1.0,0.2784810127,0.2188871415,0.7811128585,0.257542654,0.01185472132
Thanks for the performance data.,Social Conversation,False,32,CONTRIBUTOR,False,False,False,0.08064516129,0.08064516129,0.2,0.2827004219,0.2206084978,0.7793915022,0.01185472132,0.2853709122
"Summary:
1) MALLOCOPTIONS setting(s) almost have no performance degradation over no setting, except one case with CBC-decrypt-stream-nopadding 16-thread;
2) multiheap setting got most of the performance improvement there is;
3) multiheap,buckets might have less than 10% performance advantage over multiheap setting on average ... there are a few cases of regression too (up to -25%).",Task Progress,False,387,CONTRIBUTOR,False,False,False,1.0,1.0,0.4,0.2869198312,0.2206084978,0.7793915022,0.01185472132,0.2853709122
"Plus, multiheap,buckets used more memory and failed this PR's test case.",Testing,False,72,CONTRIBUTOR,False,False,False,0.1935483871,0.1935483871,0.6,0.2911392405,0.2206084978,0.7793915022,0.01185472132,0.2853709122
I would settle for multiheap setting as a fix.,Solution Discussion,False,46,CONTRIBUTOR,False,False,False,0.1451612903,0.1451612903,0.8,0.2953586498,0.2206084978,0.7793915022,0.01185472132,0.2853709122
@shanchao95  please fix it as indicated.,Social Conversation,False,40,CONTRIBUTOR,False,False,False,0.1129032258,0.1129032258,1.0,0.2995780591,0.2206084978,0.7793915022,0.01185472132,0.2853709122
"Fixing in
https://github.com/ibmruntimes/openj9-openjdk-jdk8/pull/389
https://github.com/ibmruntimes/openj9-openjdk-jdk8/pull/390
https://github.com/ibmruntimes/openj9-openjdk-jdk11/pull/279
https://github.com/ibmruntimes/openj9-openjdk-jdk11/pull/280
https://github.com/ibmruntimes/openj9-openjdk-jdk14/pull/29
https://github.com/ibmruntimes/openj9-openjdk-jdk14/pull/30
https://github.com/ibmruntimes/openj9-openjdk-jdk/pull/181",Task Progress,False,437,CONTRIBUTOR,True,False,False,1.0,0.2580645161,1.0,0.3037974684,0.2620455761,0.7379544239,0.2853709122,0.02927509429
All the pull requests mention in https://github.com/eclipse/openj9/issues/8842#issuecomment-601313084 are now merged.,Action on Issue,False,117,CONTRIBUTOR,False,False,False,1.0,0.1612903226,0.5,0.3080168776,0.2662964452,0.7337035548,0.02927509429,0.1726343793
Is it time to close this?,Action on Issue,False,25,CONTRIBUTOR,False,False,False,0.6,0.09677419355,1.0,0.3122362869,0.2662964452,0.7337035548,0.02927509429,0.1726343793
"I did all my testing using jdk8, assuming the problem would be the same across versions.",Testing,False,88,CONTRIBUTOR,True,False,False,1.0,0.2580645161,0.3333333333,0.3164556962,0.2913636962,0.7086363038,0.1726343793,0.001977731559
"It seems the problem on jdk8 is resolved by the change, but not jdk11 or jdk14.",Testing,False,79,CONTRIBUTOR,True,False,False,1.0,0.2580645161,0.6666666667,0.3206751055,0.2913636962,0.7086363038,0.1726343793,0.001977731559
I'll have to run more testing.,Testing,False,30,CONTRIBUTOR,True,False,False,0.375,0.09677419355,1.0,0.3248945148,0.2913636962,0.7086363038,0.1726343793,0.001977731559
"jdk11

https://ci.eclipse.org/openj9/view/Test/job/Grinder/698 - multiheap:4
https://ci.eclipse.org/openj9/view/Test/job/Grinder/699 - multiheap:8
https://ci.eclipse.org/openj9/view/Test/job/Grinder/700 - multiheap:16",Testing,False,221,CONTRIBUTOR,True,False,False,1.0,0.1612903226,1.0,0.3291139241,0.2916508713,0.7083491287,0.001977731559,0.01326071928
all passed.,Testing,False,11,CONTRIBUTOR,False,False,False,0.0625,0.03225806452,0.25,0.3333333333,0.2935763846,0.7064236154,0.01326071928,0.005090179308
please try multiheap:24/28/30 multiple times.,Testing,False,45,CONTRIBUTOR,False,False,False,0.15625,0.08064516129,0.5,0.3375527426,0.2935763846,0.7064236154,0.01326071928,0.005090179308
"i assumed we don't need to go through another round of performance test, since the heap number is definitely more than 16 (which is the max thread number of existing test cases).",Testing,False,178,CONTRIBUTOR,False,False,False,1.0,0.5161290323,0.75,0.3417721519,0.2935763846,0.7064236154,0.01326071928,0.005090179308
"@shanchao95  maybe you need to change your test cases to increase the thread number to 24 and 32, and test against multiheap:24/28/30/32 to see whether there are significant differences.",Testing,False,186,CONTRIBUTOR,False,False,False,0.9375,0.4838709677,1.0,0.3459915612,0.2935763846,0.7064236154,0.01326071928,0.005090179308
@zl-wang would one of the above be acceptable?,Social Conversation,False,46,CONTRIBUTOR,True,False,False,0.6,0.1451612903,0.5,0.3502109705,0.2943155004,0.7056844996,0.005090179308,6.42e-05
Let me know what we should be aiming for and I can run more tests.,Social Conversation,False,66,CONTRIBUTOR,True,False,False,1.0,0.2419354839,1.0,0.3544303797,0.2943155004,0.7056844996,0.005090179308,6.42e-05
"Sorry, didn't see your comment before I posted mine.",Social Conversation,False,52,CONTRIBUTOR,True,False,False,1.0,0.1451612903,1.0,0.358649789,0.2943248187,0.7056751813,6.42e-05,0.0006679948777
"Given previous results, I suspect the following will work

https://ci.eclipse.org/openj9/view/Test/job/Grinder/701 - multiheap:32 x 3 - failed (as expected)",Social Conversation,False,158,CONTRIBUTOR,True,False,False,1.0,0.2741935484,1.0,0.3628691983,0.2944218145,0.7055781855,0.0006679948777,0.001306819673
unlikely to succeed.,Social Conversation,False,20,CONTRIBUTOR,False,False,False,0.3333333333,0.04838709677,0.5,0.3670886076,0.2946115703,0.7053884297,0.001306819673,0.000466721312
multiheap is multiheap:32  (the default is 32 heaps).,Testing,False,53,CONTRIBUTOR,False,False,False,1.0,0.1451612903,1.0,0.3713080169,0.2946115703,0.7053884297,0.001306819673,0.000466721312
"ok.

https://ci.eclipse.org/openj9/view/Test/job/Grinder/702 - multiheap:24 x 3 - failed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/703 - multiheap:28 x 3 - failed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/704 - multiheap:30 x 3 - stopped it",Social Conversation,False,264,CONTRIBUTOR,True,False,False,1.0,0.3225806452,1.0,0.3755274262,0.2946793402,0.7053206598,0.000466721312,0.001511010247
"Trying also the entire extended.system suite
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/178 - multiheap:24 - stopped it
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/179 - multiheap:28 - stopped it
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/180 - multiheap:30 - stopped it",Testing,False,359,CONTRIBUTOR,True,False,False,1.0,0.3387096774,1.0,0.3797468354,0.2948987454,0.7051012546,0.001511010247,0.008097614762
"https://ci.eclipse.org/openj9/view/Test/job/Grinder/707 - multiheap:16 x 3 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/705 - multiheap:18 x 3 - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/706 - multiheap:20 x 3 - passed, failed, failed",Testing,False,269,CONTRIBUTOR,True,False,False,1.0,0.3064516129,1.0,0.3839662447,0.2960745537,0.7039254463,0.008097614762,0.003121198774
This is worrisome.,Social Conversation,False,18,CONTRIBUTOR,False,False,False,0.2307692308,0.04838709677,0.25,0.388185654,0.2965277651,0.7034722349,0.003121198774,0.006977483614
"What is the difference between java11 and java8, re the environment?",Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,0.8461538462,0.1774193548,0.5,0.3924050633,0.2965277651,0.7034722349,0.003121198774,0.006977483614
we also didn't chase further the previous failure with RSS set to unlimited.,Solution Discussion,False,76,CONTRIBUTOR,False,False,False,1.0,0.2096774194,0.75,0.3966244726,0.2965277651,0.7034722349,0.003121198774,0.006977483614
It is worthwhile to launch a previous failure with everything set to unlimited.,Solution Discussion,False,79,CONTRIBUTOR,False,False,False,1.0,0.2096774194,1.0,0.4008438819,0.2965277651,0.7034722349,0.003121198774,0.006977483614
I expect jdk11 just uses more memory.,Expected Behaviour,False,37,CONTRIBUTOR,True,False,False,0.3684210526,0.1129032258,0.3333333333,0.4050632911,0.2975409256,0.7024590744,0.006977483614,0.001055956968
"There are many additional classes loaded for modularity on jdk11+, and additional native structures used to manage it.",Investigation and Exploration,False,118,CONTRIBUTOR,True,False,False,0.9473684211,0.2903225806,0.6666666667,0.4092827004,0.2975409256,0.7024590744,0.006977483614,0.001055956968
"I don't think setting rss to unlimited made any difference, but I can re-run multiheap:20 with this setting.",Investigation and Exploration,False,108,CONTRIBUTOR,True,False,False,1.0,0.3064516129,1.0,0.4135021097,0.2975409256,0.7024590744,0.006977483614,0.001055956968
https://ci.eclipse.org/openj9/view/Test/job/Grinder/708 - multiheap:20 x 3 unlimited - passed,Testing,False,93,CONTRIBUTOR,True,False,False,1.0,0.09677419355,1.0,0.417721519,0.2976942551,0.7023057449,0.001055956968,0.0007234180335
i knew setting RSS to unlimited didn't make a difference.,Social Conversation,False,57,CONTRIBUTOR,False,False,False,0.625,0.1612903226,0.3333333333,0.4219409283,0.2977992985,0.7022007015,0.0007234180335,0.0004492192628
"So, it must be some other limit.",Investigation and Exploration,False,32,CONTRIBUTOR,False,False,False,0.4375,0.1129032258,0.6666666667,0.4261603376,0.2977992985,0.7022007015,0.0007234180335,0.0004492192628
"Such that, I suggested setting every limit to unlimited and running one of the known failures.",Solution Discussion,False,94,CONTRIBUTOR,False,False,False,1.0,0.2580645161,1.0,0.4303797468,0.2977992985,0.7022007015,0.0007234180335,0.0004492192628
"The only other limit is the stack, which is already at the maximum.
https://github.com/eclipse/openj9/issues/8842#issuecomment-598890366",Solution Discussion,False,137,CONTRIBUTOR,True,False,False,1.0,0.2419354839,1.0,0.4345991561,0.2978645271,0.7021354729,0.0004492192628,0.01034662808
The CODE passed with unlimited.,Testing,True,31,CONTRIBUTOR,True,False,False,0.625,0.08064516129,0.5,0.4388185654,0.2993669018,0.7006330982,0.01034662808,0.0008955215173
I can retry some of the bigger sizes.,Task Progress,False,37,CONTRIBUTOR,True,False,False,1.0,0.1290322581,1.0,0.4430379747,0.2993669018,0.7006330982,0.01034662808,0.0008955215173
ok,Social Conversation,False,2,CONTRIBUTOR,False,False,False,1.0,0.01612903226,1.0,0.447257384,0.2994969353,0.7005030647,0.0008955215173,0.0006504928285
"https://ci.eclipse.org/openj9/view/Test/job/Grinder/712 - multiheap:22 x 3 unlimited - passed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/709 - multiheap:24 x 3 unlimited - failed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/710 - multiheap:28 x 3 unlimited - failed
https://ci.eclipse.org/openj9/view/Test/job/Grinder/711 - multiheap:32 x 3 unlimited - failed",Testing,False,378,CONTRIBUTOR,True,False,False,1.0,0.435483871,1.0,0.4514767932,0.2995913897,0.7004086103,0.0006504928285,0.01957604203
Is there a problem to set the default to CODE?,Investigation and Exploration,True,46,CONTRIBUTOR,True,False,False,1.0,0.1612903226,1.0,0.4556962025,0.3024339148,0.6975660852,0.01957604203,0.001607271518
there might be performance implication when the application has many threads.,Investigation and Exploration,False,77,CONTRIBUTOR,False,False,False,1.0,0.1774193548,0.5,0.4599156118,0.3026672975,0.6973327025,0.001607271518,0.007592972344
"so that, I asked for:  https://github.com/eclipse/openj9/issues/8842#issuecomment-601719169",Social Conversation,False,91,CONTRIBUTOR,False,False,False,0.6363636364,0.1129032258,1.0,0.4641350211,0.3026672975,0.6973327025,0.001607271518,0.007592972344
"Trying all jdk11 extended.system with multiheap:16
https://ci.eclipse.org/openj9/view/Pipelines/job/Pipeline-Release-Build/181/ - passed",Testing,False,137,CONTRIBUTOR,True,False,False,1.0,0.1451612903,1.0,0.4683544304,0.3037698296,0.6962301704,0.007592972344,0.5551474985
"Also occurred at internal builds such as CODE.
CODE",Bug Reproduction,True,52,MEMBER,False,False,False,1.0,0.1612903226,1.0,0.4725738397,0.3843796234,0.6156203766,0.5551474985,0.3809000137
"@zl-wang  multiheap default, 24, 28, 30, 32 performance for 24 and 32 threads [multiheap_performance.xlsx] URL ",Testing,False,111,NONE,False,False,False,1.0,0.2741935484,1.0,0.4767932489,0.4396879364,0.5603120636,0.3809000137,0.00359667111
@shanchao95  thanks for the data.,Social Conversation,False,33,CONTRIBUTOR,False,False,False,0.24,0.09677419355,0.1428571429,0.4810126582,0.4402101884,0.5597898116,0.00359667111,0.001910640371
"the performance varied quite a bit, especially looking at multiheap default and multiheap:32 (they should be the same or comparable, since default multiheap is 32).",Investigation and Exploration,False,164,CONTRIBUTOR,False,False,False,1.0,0.4032258065,0.2857142857,0.4852320675,0.4402101884,0.5597898116,0.00359667111,0.001910640371
do you have the confidence intervals of them?,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.32,0.1290322581,0.4285714286,0.4894514768,0.4402101884,0.5597898116,0.00359667111,0.001910640371
"In addition, I am more interested in multiheap:16, multiheap:18, and multiheap:20 with thread number 16, 24, and 32.",Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,0.72,0.2903225806,0.5714285714,0.4936708861,0.4402101884,0.5597898116,0.00359667111,0.001910640371
Could you rerun for these?,Testing,False,26,CONTRIBUTOR,False,False,False,0.2,0.08064516129,0.7142857143,0.4978902954,0.4402101884,0.5597898116,0.00359667111,0.001910640371
Notice multiheap:24 (and above) didn't work for this test case beyond java8.,Testing,False,76,CONTRIBUTOR,False,False,False,0.48,0.1935483871,0.8571428571,0.5021097046,0.4402101884,0.5597898116,0.00359667111,0.001910640371
"so, multiheap:24/28/30/32 kind of meaningless.",Testing,False,46,CONTRIBUTOR,False,False,False,0.2,0.08064516129,1.0,0.5063291139,0.4402101884,0.5597898116,0.00359667111,0.001910640371
"Sure, i'll update when it is done",Task Progress,False,33,NONE,False,False,False,1.0,0.1129032258,1.0,0.5105485232,0.4404876216,0.5595123784,0.001910640371,0.2549319316
"@zl-wang performance updated, each test run for 3 times.",Task Progress,False,56,NONE,False,False,False,1.0,0.1612903226,0.5,0.5147679325,0.4775048297,0.5224951703,0.2549319316,0.01177304509
[malloc_performance.xlsx] URL,Task Progress,False,30,NONE,False,False,False,0.2,0.03225806452,1.0,0.5189873418,0.4775048297,0.5224951703,0.2549319316,0.01177304509
Thanks for the data.,Social Conversation,False,20,CONTRIBUTOR,False,False,False,0.1428571429,0.06451612903,0.1666666667,0.5232067511,0.4792143262,0.5207856738,0.01177304509,0.003593754102
"My summary for the data:
1) for small payload, the setting can have a significant performance impact.",Task Progress,False,102,CONTRIBUTOR,False,False,False,0.6428571429,0.2903225806,0.3333333333,0.5274261603,0.4792143262,0.5207856738,0.01177304509,0.003593754102
"up to 40% difference between multiheap:16 and multiheap:20 for 32-thread scenario;
2) for large payload",Task Progress,False,104,CONTRIBUTOR,False,False,False,0.6071428571,0.2741935484,0.5,0.5316455696,0.4792143262,0.5207856738,0.01177304509,0.003593754102
", performance impact of specific setting is much less;
3) there are algorithms (eckeyGeneration ones) that the performance variation is so big that no conclusion can be drawn.",Task Progress,False,176,CONTRIBUTOR,False,False,False,1.0,0.4516129032,0.6666666667,0.5358649789,0.4792143262,0.5207856738,0.01177304509,0.003593754102
"Since multiheap:18 appeared safe for both java8 and java11, let's settle for that as a fix.",Solution Discussion,False,91,CONTRIBUTOR,False,False,False,0.5714285714,0.2580645161,0.8333333333,0.5400843882,0.4792143262,0.5207856738,0.01177304509,0.003593754102
"We need to note somewhere that, for specific performance tuning exercise, multiheap:32 may well be recommended.",Solution Discussion,False,111,CONTRIBUTOR,False,False,False,0.5714285714,0.2580645161,1.0,0.5443037975,0.4792143262,0.5207856738,0.01177304509,0.003593754102
"@zl-wang the other option is to stick with ""multiheap(:32)"" and have the failing system testing re-tuned to run a smaller workload.",Solution Discussion,False,131,CONTRIBUTOR,True,False,False,0.7419354839,0.3709677419,0.1428571429,0.5485232068,0.4797361547,0.5202638453,0.003593754102,0.003640426233
It seems a better solution.,Social Conversation,False,27,CONTRIBUTOR,True,False,False,0.1612903226,0.08064516129,0.2857142857,0.552742616,0.4797361547,0.5202638453,0.003593754102,0.003640426233
I believe the test is running 5 JVMs concurrently.,Testing,False,50,CONTRIBUTOR,True,False,False,0.2903225806,0.1451612903,0.4285714286,0.5569620253,0.4797361547,0.5202638453,0.003593754102,0.003640426233
"The concern is that the change may impact a user, in that something that was working may start failing due to OOM.",Solution Discussion,False,114,CONTRIBUTOR,True,False,False,0.7096774194,0.3548387097,0.5714285714,0.5611814346,0.4797361547,0.5202638453,0.003593754102,0.003640426233
I expect there are still a small number of jdk11 users so far.,Social Conversation,False,62,CONTRIBUTOR,True,False,False,0.4193548387,0.2096774194,0.7142857143,0.5654008439,0.4797361547,0.5202638453,0.003593754102,0.003640426233
"The benefit of sticking with ""multiheap(:32)"" is better perf out of the box, and a user may not necessarily go looking for how to change the environment to get better perf.",Solution Discussion,False,172,CONTRIBUTOR,True,False,False,1.0,0.5,0.8571428571,0.5696202532,0.4797361547,0.5202638453,0.003593754102,0.003640426233
"A user getting OOM can either use a beefier machine, or find help to re-tune the MALLOCOPTIONS with the caveat that it may affect perf.",Expected Behaviour,False,135,CONTRIBUTOR,True,False,False,0.8387096774,0.4193548387,1.0,0.5738396624,0.4797361547,0.5202638453,0.003593754102,0.003640426233
"@pshipton  sure, that is certainly better, on the assumption that system testing can be reset.",Social Conversation,False,94,CONTRIBUTOR,False,False,False,1.0,0.2580645161,0.25,0.5780590717,0.4802647602,0.5197352398,0.003640426233,0.003806695701
I was concerned with that there is failing test that build cannot promote.,Social Conversation,False,74,CONTRIBUTOR,False,False,False,0.875,0.2258064516,0.5,0.582278481,0.4802647602,0.5197352398,0.003640426233,0.003806695701
let's launch a few sniffing retuned tests with multiheap or multiheap:32 setting.,Testing,False,81,CONTRIBUTOR,False,False,False,0.75,0.1935483871,0.75,0.5864978903,0.4802647602,0.5197352398,0.003640426233,0.003806695701
did you imply that system ran out of physical memory or something by retuning or cutdown?,Investigation and Exploration,False,89,CONTRIBUTOR,False,False,False,1.0,0.2580645161,1.0,0.5907172996,0.4802647602,0.5197352398,0.003640426233,0.003806695701
"The failing tests don't block any promotion, they just fail every night in the testing.",Testing,False,87,CONTRIBUTOR,True,False,False,1.0,0.2419354839,0.2,0.5949367089,0.4808175087,0.5191824913,0.003806695701,0.001055956968
"The jdk11+ extended.system suite running now with ""multiheap"" usually doesn't complete.",Testing,False,87,CONTRIBUTOR,True,False,False,0.7333333333,0.1774193548,0.4,0.5991561181,0.4808175087,0.5191824913,0.003806695701,0.001055956968
I see OOMs which aren't just a failure to allocate threads.,Investigation and Exploration,False,59,CONTRIBUTOR,True,False,False,0.7333333333,0.1774193548,0.6,0.6033755274,0.4808175087,0.5191824913,0.003806695701,0.001055956968
"The testing is getting killed, I'm assuming by the OS.",Testing,False,54,CONTRIBUTOR,True,False,False,0.6666666667,0.1612903226,0.8,0.6075949367,0.4808175087,0.5191824913,0.003806695701,0.001055956968
"https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_ppc64_aix_Nightly/323
CODE

https://ci.eclipse.org/openj9/job/Test_openjdk14_j9_extended.system_ppc64_aix_Nightly/27
CODE",Testing,True,193,CONTRIBUTOR,True,False,False,0.4666666667,0.1129032258,1.0,0.611814346,0.4808175087,0.5191824913,0.003806695701,0.001055956968
@Mesbah-Alam can we re,Social Conversation,False,22,CONTRIBUTOR,True,False,False,0.2380952381,0.08064516129,0.2,0.6160337553,0.4809708382,0.5190291618,0.001055956968,0.005901107588
-tune the following tests on jdk11+.,Testing,False,36,CONTRIBUTOR,True,False,False,0.2857142857,0.09677419355,0.4,0.6202531646,0.4809708382,0.5190291618,0.001055956968,0.005901107588
"With the new MALLOCOPTIONS setting on the system, the machines can't handle the test load.",Testing,False,90,CONTRIBUTOR,True,False,False,0.7142857143,0.2419354839,0.6,0.6244725738,0.4809708382,0.5190291618,0.001055956968,0.005901107588
"If we aren't already, we can set a -Xmx for each process to reduce the memory usage (such as -Xmx512m).",Solution Discussion,False,103,CONTRIBUTOR,True,False,False,1.0,0.3387096774,0.8,0.6286919831,0.4809708382,0.5190291618,0.001055956968,0.005901107588
"Otherwise we may need to only start 4 JVMs.

SharedClasses.SCM01.MultiThread_0
SharedClasses.SCM23.MultiThread_0",Solution Discussion,False,115,CONTRIBUTOR,True,False,False,0.7142857143,0.2419354839,1.0,0.6329113924,0.4809708382,0.5190291618,0.001055956968,0.005901107588
That mixed failing/killing reasons sounded to me that system is running out of paging space that kernel is selectively killing the processes (usually the one first consuming a lot of paging space).,Investigation and Exploration,False,197,CONTRIBUTOR,False,False,False,1.0,0.5322580645,0.3333333333,0.6371308017,0.4818277043,0.5181722957,0.005901107588,0.002228594265
That usually means that system is running on the brink of memory/paging space exhaustion.,Investigation and Exploration,False,89,CONTRIBUTOR,False,False,False,0.4545454545,0.2419354839,0.6666666667,0.641350211,0.4818277043,0.5181722957,0.005901107588,0.002228594265
That made some senses that failing to allocate memory could not be explained previously.,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.4242424242,0.2258064516,1.0,0.6455696203,0.4818277043,0.5181722957,0.005901107588,0.002228594265
For reference here are some stats from one JVM.,Investigation and Exploration,False,47,CONTRIBUTOR,True,False,False,0.2727272727,0.1451612903,0.3333333333,0.6497890295,0.4821513057,0.5178486943,0.002228594265,0.0007234180335
"The artifact I found only has 1 javacore, although there are 5 core files from different processes.",Investigation and Exploration,False,99,CONTRIBUTOR,True,False,False,0.5151515152,0.2741935484,0.6666666667,0.6540084388,0.4821513057,0.5178486943,0.002228594265,0.0007234180335
"The object heap has only expanded to 155MB, so I'm not sure if a -Xmx512MB will help, but seems we should try that before changing the number of processes.
CODE",Solution Discussion,True,161,CONTRIBUTOR,True,False,False,1.0,0.5322580645,1.0,0.6582278481,0.4821513057,0.5178486943,0.002228594265,0.0007234180335
"This is surprising, I wonder if the usage can be reduced.
CODE
344,595 bytes per allocation on average.",Investigation and Exploration,True,105,CONTRIBUTOR,True,False,False,1.0,0.3225806452,1.0,0.6624472574,0.4822563491,0.5177436509,0.0007234180335,0.0007438370909
"module is the memory hogger here, in addition to invisible thread system stacks maybe.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,1.0,0.2258064516,1.0,0.6666666667,0.4823643574,0.5176356426,0.0007438370909,0.0288492111
"how to understand the discrepancy:  modules + GC look like more than 4GB already, but JRE is 3.2GB?",Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,1.0,0.3225806452,1.0,0.6708860759,0.4865533864,0.5134466136,0.0288492111,0.02872086273
"how to understand the discrepancy: modules + GC look like more than 4GB already, but JRE is 3.2GB?

yes, it doesn't make sense, there is a bug in how the accounting for modules is set up.",Investigation and Exploration,False,189,CONTRIBUTOR,True,False,False,1.0,0.6129032258,0.25,0.6751054852,0.4907237786,0.5092762214,0.02872086273,0.1405385381
"Mesbah tried 5000 and it still failed, but 500 worked.",Testing,False,54,CONTRIBUTOR,True,False,False,0.2631578947,0.1612903226,0.75,0.6835443038,0.4907237786,0.5092762214,0.02872086273,0.1405385381
He'll try other values between 500 and 5000 and we will adjust the test.,Testing,False,72,CONTRIBUTOR,True,False,False,0.3684210526,0.2258064516,1.0,0.6877637131,0.4907237786,0.5092762214,0.02872086273,0.1405385381
"it still means that multiheap setting increases RSS, at least memory consumption (eventually over the paging space).",Testing,False,116,CONTRIBUTOR,False,False,False,1.0,0.2741935484,0.5,0.6919831224,0.5111305761,0.4888694239,0.1405385381,0.04003593754
"I am wondering, for this test case, how much the increase is.",Investigation and Exploration,False,61,CONTRIBUTOR,False,False,False,0.7058823529,0.1935483871,1.0,0.6962025316,0.5111305761,0.4888694239,0.1405385381,0.04003593754
How do we determine RSS on AIX?,Investigation and Exploration,False,31,CONTRIBUTOR,True,False,False,0.4117647059,0.1129032258,0.3333333333,0.7004219409,0.5169439657,0.4830560343,0.04003593754,0.004416350414
It's a bit tricky to get RSS from a running process at a consistent time.,Investigation and Exploration,False,73,CONTRIBUTOR,True,False,False,0.8823529412,0.2419354839,0.6666666667,0.7046413502,0.5169439657,0.4830560343,0.04003593754,0.004416350414
ps -lfp,Investigation and Exploration,False,7,CONTRIBUTOR,False,False,False,0.2222222222,0.03225806452,0.3333333333,0.7130801688,0.5175852387,0.4824147613,0.004416350414,0.2648672615
"[pid]
and, looking at the SZ column/field.",Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,1.0,0.1451612903,0.6666666667,0.7172995781,0.5175852387,0.4824147613,0.004416350414,0.2648672615
That is RSS in kbyte.,Investigation and Exploration,False,21,CONTRIBUTOR,False,False,False,0.5555555556,0.08064516129,1.0,0.7215189873,0.5175852387,0.4824147613,0.004416350414,0.2648672615
We used the 0.18.1 release build.,Task Progress,False,33,CONTRIBUTOR,True,False,False,0.2142857143,0.09677419355,0.2,0.7257383966,0.5560450992,0.4439549008,0.2648672615,0.0167902992
I'll fill in the additional data as it becomes available.,Task Progress,False,57,CONTRIBUTOR,True,False,False,0.3571428571,0.1612903226,0.4,0.7299578059,0.5560450992,0.4439549008,0.2648672615,0.0167902992
This result is for a single JVM process which runs as part of the test.,Testing,False,71,CONTRIBUTOR,True,False,False,0.5357142857,0.2419354839,0.6,0.7341772152,0.5560450992,0.4439549008,0.2648672615,0.0167902992
"The real test runs 5 concurrently, but for the purposes of collecting the data we only ran 1.",Testing,False,93,CONTRIBUTOR,True,False,False,0.6428571429,0.2903225806,0.8,0.7383966245,0.5560450992,0.4439549008,0.2648672615,0.0167902992
"No MALLOCOPTIONS (aix71p7rt4)
CODE

ulimit -m unlimited;MALLOCOPTIONS=multiheap (aix71p7rt4)
OOM

ulimit -m unlimited;MALLOCOPTIONS=""multiheap:18"" (aix71p7rt14)
CODE

limit -m unlimited;export MALLOCOPTIONS=""multiheap:18,considersize"" (aix71p7rt4)
CODE",Testing,True,262,CONTRIBUTOR,True,False,False,1.0,0.4516129032,1.0,0.7426160338,0.5560450992,0.4439549008,0.2648672615,0.0167902992
"unfortunately, that is a big increase (even for 18 heap).",Testing,False,57,CONTRIBUTOR,False,False,False,0.625,0.1612903226,0.1666666667,0.746835443,0.5584831225,0.4415168775,0.0167902992,0.0009509446731
it might be specific to this test case allocating so many threads.,Testing,False,66,CONTRIBUTOR,False,False,False,0.75,0.1935483871,0.3333333333,0.7510548523,0.5584831225,0.4415168775,0.0167902992,0.0009509446731
can we have a comparison on Liberty for example?,Investigation and Exploration,False,48,CONTRIBUTOR,False,False,False,0.5625,0.1451612903,0.5,0.7552742616,0.5584831225,0.4415168775,0.0167902992,0.0009509446731
"sorry, @pshipton    i misremembered the ps command flag, although SZ and RSS are close mostly.",Testing,False,94,CONTRIBUTOR,False,False,False,1.0,0.2580645161,0.6666666667,0.7594936709,0.5584831225,0.4415168775,0.0167902992,0.0009509446731
"the real flag for RSS is v:

ps  v",Testing,False,36,CONTRIBUTOR,False,False,False,0.6875,0.1774193548,0.8333333333,0.7637130802,0.5584831225,0.4415168775,0.0167902992,0.0009509446731
[pid],Investigation and Exploration,False,5,CONTRIBUTOR,False,False,False,0.0625,0.01612903226,1.0,0.7679324895,0.5584831225,0.4415168775,0.0167902992,0.0009509446731
"with v flag, there is an explicit RSS field",Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,1.0,0.1451612903,1.0,0.7721518987,0.5586212038,0.4413787962,0.0009509446731,0.008625593247
"I added another run using an option I spotted, ""considersize"", which looks much better but not sure how it affects perf.",Testing,False,120,CONTRIBUTOR,True,False,False,1.0,0.3387096774,0.25,0.776371308,0.5598736768,0.4401263232,0.008625593247,0.002832414962
We'll change the ps option to 'v' and deliver the change to the test.,Solution Discussion,False,69,CONTRIBUTOR,True,False,False,0.6666666667,0.2258064516,0.5,0.7805907173,0.5598736768,0.4401263232,0.008625593247,0.002832414962
I can do more runs of this test next week.,Task Progress,False,42,CONTRIBUTOR,True,False,False,0.4761904762,0.1612903226,0.75,0.7848101266,0.5598736768,0.4401263232,0.008625593247,0.002832414962
Pls ask the perf team for runs of Liberty.,Contribution and Commitment,False,42,CONTRIBUTOR,True,False,False,0.4285714286,0.1451612903,1.0,0.7890295359,0.5598736768,0.4401263232,0.008625593247,0.002832414962
"@shanchao95 could you run a performance comparison between ""multiheap""  and ""multiheap,considersize"" settings?",Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,1.0,0.2258064516,1.0,0.7932489451,0.5602849556,0.4397150444,0.002832414962,0.00178229201
@vijaysun-omr      @piyush  could you do a footprint size comparison on AIX running Liberty/DT7 with these three environment variable settings below?,Investigation and Exploration,False,149,CONTRIBUTOR,False,False,False,1.0,0.3870967742,0.5,0.7974683544,0.5605437521,0.4394562479,0.00178229201,0.002861585044
"1) no setting
2) export MALLOCOPTIONS=multiheap
3) export MALLOCOPTIONS=multiheap,considersize",Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.5833333333,0.2258064516,1.0,0.8016877637,0.5605437521,0.4394562479,0.00178229201,0.002861585044
"@piyush note the latest OpenJ9 JVMs already set ""MALLOCOPTIONS=multiheap"".",Investigation and Exploration,False,74,CONTRIBUTOR,True,False,False,0.9090909091,0.1612903226,0.3333333333,0.805907173,0.5609592665,0.4390407335,0.002861585044,0.6866637302
It not sure if CODE overrides that.,Investigation and Exploration,True,35,CONTRIBUTOR,True,False,False,0.6363636364,0.1129032258,0.6666666667,0.8101265823,0.5609592665,0.4390407335,0.002861585044,0.6866637302
I suggest using the 0.18.1 release JVM to run the tests.,Investigation and Exploration,False,56,CONTRIBUTOR,True,False,False,1.0,0.1774193548,1.0,0.8143459916,0.5609592665,0.4390407335,0.002861585044,0.6866637302
"Not exactly apples to apples, but the result is consistent with the previous runs, and difference is so big I don't think it matters.",Investigation and Exploration,False,133,CONTRIBUTOR,True,False,False,1.0,0.3870967742,0.5,0.8185654008,0.6606657803,0.3393342197,0.6866637302,0.007715486688
"jdk11 CODE
CODE

jdk14 CODE
CODE",Investigation and Exploration,True,36,CONTRIBUTOR,True,False,False,0.375,0.1451612903,1.0,0.8227848101,0.6606657803,0.3393342197,0.6866637302,0.007715486688
"jdk11 CODE
CODE",Investigation and Exploration,True,16,CONTRIBUTOR,True,False,False,1.0,0.06451612903,1.0,0.8270042194,0.661786102,0.338213898,0.007715486688,0.001286400616
nice.,Social Conversation,False,5,CONTRIBUTOR,False,False,False,0.09090909091,0.01612903226,0.5,0.8312236287,0.6619728929,0.3380271071,0.001286400616,0.004063392422
"now, @shanchao95 performance comparison is the critical factor for fix decision.",Solution Discussion,False,80,CONTRIBUTOR,False,False,False,1.0,0.1774193548,1.0,0.835443038,0.6619728929,0.3380271071,0.001286400616,0.004063392422
"jdk 11 CODE
CODE",Investigation and Exploration,True,17,CONTRIBUTOR,True,False,False,1.0,0.08064516129,1.0,0.8396624473,0.6625629149,0.3374370851,0.004063392422,0.02615972953
Sorry I didn't see this issue since my external handle is wrong there.,Social Conversation,False,70,NONE,False,False,False,1.0,0.2096774194,0.4,0.8481012658,0.6663614196,0.3336385804,0.02615972953,0.2052027758
@sophiaxu0424 Can we please get the data requested in https://github.com/eclipse/openj9/issues/8842#issuecomment-605317393?,Investigation and Exploration,False,123,NONE,False,False,False,0.7692307692,0.1612903226,0.6,0.8523206751,0.6663614196,0.3336385804,0.02615972953,0.2052027758
"As Peter recommend in https://github.com/eclipse/openj9/issues/8842#issuecomment-605323016, we should use the 0.18.1 release build.",Investigation and Exploration,False,131,NONE,False,False,False,0.9230769231,0.1935483871,0.8,0.8565400844,0.6663614196,0.3336385804,0.02615972953,0.2052027758
Thanks!,Social Conversation,False,7,NONE,False,False,False,0.07692307692,0.01612903226,1.0,0.8607594937,0.6663614196,0.3336385804,0.02615972953,0.2052027758
"@zl-wang Sure, here is performance for CODE, CODE and CODE.",Investigation and Exploration,True,59,NONE,False,False,False,1.0,0.1774193548,0.5,0.864978903,0.6961577413,0.3038422587,0.2052027758,0.3314129696
"but I am confused:  previously between multiheap setting and no-setting, for 16-thread tests on small 512 payload, the performance improvement was from a few times to 100s times.",Investigation and Exploration,False,178,CONTRIBUTOR,False,False,False,1.0,0.5,0.3333333333,0.8734177215,0.7442803236,0.2557196764,0.3314129696,0.1778324879
"however, this batch of data didn't show that at all.",Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,0.3225806452,0.1612903226,0.6666666667,0.8776371308,0.7442803236,0.2557196764,0.3314129696,0.1778324879
I am wondering if your driver is after the code merge such that your no-setting actually means the current setting in the merge.,Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,0.7741935484,0.3870967742,1.0,0.8818565401,0.7442803236,0.2557196764,0.3314129696,0.1778324879
@zl-wang I found a different version of jdk was used for this performance test.,Investigation and Exploration,False,79,NONE,False,False,False,1.0,0.2419354839,0.25,0.8860759494,0.7701023622,0.2298976378,0.1778324879,1.0
"Previously i used jvm**0317 from espresso, but this is espresso 0327.",Investigation and Exploration,False,69,NONE,False,False,False,0.7333333333,0.1774193548,0.5,0.8902953586,0.7701023622,0.2298976378,0.1778324879,1.0
A new run with jdk0317 is running.,Task Progress,False,34,NONE,False,False,False,0.4666666667,0.1129032258,0.75,0.8945147679,0.7701023622,0.2298976378,0.1778324879,1.0
It will be updated once it is done.,Task Progress,False,35,NONE,False,False,False,0.5333333333,0.1290322581,1.0,0.8987341772,0.7701023622,0.2298976378,0.1778324879,1.0
"@zl-wang performance updated
[performance.xlsx] URL ",Task Progress,False,53,NONE,False,False,False,1.0,0.1129032258,1.0,0.9029535865,0.9153066441,0.08469335588,1.0,0.01000533813
"@shanchao95  thanks a lot for the data.  summary:
1) multiheap,considersize is 50% to 70% of performance of multiheap which is 10x to 100x performance of no-setting, for multi-threaded cases;
2) multiheap,considersize memory consumption/RSS is in the same ballpark as no-setting.",Social Conversation,False,281,CONTRIBUTOR,False,False,False,1.0,0.8064516129,0.1666666667,0.9071729958,0.9167594621,0.08324053794,0.01000533813,0.01893430022
"However, multiheap RSS  have two cases:
    2a) intensive multi-thread malloc/free:  it is more than 5x of no-setting RSS (e.g.  this PR test case)
    2b) sporadic malloc/free:  no impact ... in the same ballpark as no-setting (e.g. DT7 test)",Investigation and Exploration,False,245,CONTRIBUTOR,False,False,False,0.96,0.7741935484,0.3333333333,0.9113924051,0.9167594621,0.08324053794,0.01000533813,0.01893430022
what is the converged fix?,Social Conversation,False,26,CONTRIBUTOR,False,False,False,0.1,0.08064516129,0.5,0.9156118143,0.9167594621,0.08324053794,0.01000533813,0.01893430022
that is a good question.,Social Conversation,False,24,CONTRIBUTOR,False,False,False,0.1,0.08064516129,0.6666666667,0.9198312236,0.9167594621,0.08324053794,0.01000533813,0.01893430022
"I inclined to multiheap,considersize for moderate RSS plus most of the performance benefit.",Solution Discussion,False,91,CONTRIBUTOR,False,False,False,0.28,0.2258064516,0.8333333333,0.9240506329,0.9167594621,0.08324053794,0.01000533813,0.01893430022
"Note somewhere: multiheap,bucket setting may give another 100% to 40% performance boost for certain applications.",Solution Discussion,False,113,CONTRIBUTOR,False,False,False,0.32,0.2580645161,1.0,0.9282700422,0.9167594621,0.08324053794,0.01000533813,0.01893430022
@zl-wang we need to finalize the setting to be used for the 0.20.0 release this week.,Task Progress,False,85,CONTRIBUTOR,True,False,False,0.7727272727,0.2741935484,0.25,0.9324894515,0.9195088035,0.08049119647,0.01893430022,0.008255133205
"For the time being, I'm going to change to the head stream to ""multiheap,considersize"" to avoid failing the tests every night.",Solution Discussion,False,126,CONTRIBUTOR,True,False,False,1.0,0.3548387097,0.5,0.9367088608,0.9195088035,0.08049119647,0.01893430022,0.008255133205
It sounds like you are considering a perf/footprint comparison between CODE and CODE.,Solution Discussion,True,85,CONTRIBUTOR,True,False,False,0.6363636364,0.2258064516,0.75,0.94092827,0.9195088035,0.08049119647,0.01893430022,0.008255133205
Can you make an explicit request.,Solution Discussion,False,33,CONTRIBUTOR,True,False,False,0.2727272727,0.09677419355,1.0,0.9451476793,0.9195088035,0.08049119647,0.01893430022,0.008255133205
I am fine with the proposed CODE setting but should we get the JCE performance team to also measure with this setting on AIX to get the performance picture on the multithreaded scenarios they were running on ?,Solution Discussion,True,209,CONTRIBUTOR,False,False,False,1.0,0.5967741935,1.0,0.9493670886,0.9207074842,0.07929251579,0.008255133205,0.003961297135
@pshipton  sorry for my ambiguity.,Social Conversation,False,34,CONTRIBUTOR,False,False,False,0.4285714286,0.09677419355,0.2,0.9535864979,0.9212826815,0.07871731848,0.003961297135,0.01459087501
additional bucket option only had marginal performance advantage.,Solution Discussion,False,65,CONTRIBUTOR,False,False,False,0.5714285714,0.1290322581,0.4,0.9578059072,0.9212826815,0.07871731848,0.003961297135,0.01459087501
i was referring to the extreme case of tuning in performance guide or something.,Solution Discussion,False,80,CONTRIBUTOR,False,False,False,1.0,0.2258064516,0.6,0.9620253165,0.9212826815,0.07871731848,0.003961297135,0.01459087501
"i was proposing multiheap,considersize as the fix.",Solution Discussion,False,50,CONTRIBUTOR,False,False,False,0.5714285714,0.1290322581,0.8,0.9662447257,0.9212826815,0.07871731848,0.003961297135,0.01459087501
@vijaysun-omr   JCE performance data I summarized here:  https://github.com/eclipse/openj9/issues/8842#issuecomment-609841411,Testing,False,125,CONTRIBUTOR,False,False,False,0.7857142857,0.1774193548,1.0,0.970464135,0.9212826815,0.07871731848,0.003961297135,0.01459087501
Starup/footpirnt runs have finished.,Testing,False,36,NONE,False,False,False,0.1428571429,0.08064516129,0.25,0.9746835443,0.923401339,0.07659866095,0.01459087501,0.09372347346
"Please see: javanext/issues/176#issuecomment-19050257
1- no setting
2- export MALLOCOPTIONS=multiheap
3- export MALLOCOPTIONS=multiheap,considersize


1 |",Testing,False,160,NONE,False,False,False,0.6,0.3387096774,0.5,0.9789029536,0.923401339,0.07659866095,0.01459087501,0.09372347346
"No Setting |   |  
-- | -- | -- | --
  |   | Startup time in ms | Footprint in kb
  | mean | 12044.2292 | 436334.75
  | CI | 2.57% | 0.54%
  |   |   |  
3 | MALLOCOPTIONS=""multiheap,considersize""
  | mean | 11996.8125",Social Conversation,False,224,NONE,False,False,False,1.0,0.564516129,0.75,0.9831223629,0.923401339,0.07659866095,0.01459087501,0.09372347346
"| 436044.333
  | CI | 2.17% | 0.56%
  | withSetting/noSetting | 99.61% | 99.93%



Setting-2 keeps failing the jobs and might need some help to figure it out @zl-wang @piyush286  FYI.",Testing,False,189,NONE,False,False,False,0.8571428571,0.4838709677,1.0,0.9873417722,0.923401339,0.07659866095,0.01459087501,0.09372347346
"The change to use ""multiheap,considersize"" is merged to the head stream, but not yet to the 0.20.0 branches",Action on Issue,False,107,CONTRIBUTOR,True,False,False,1.0,0.3064516129,1.0,0.9915611814,0.9370103887,0.06298961129,0.09372347346,0.4337999574
The changes are merged to the 0.20.0 branches.,Action on Issue,False,46,CONTRIBUTOR,True,False,True,0.6153846154,0.1290322581,0.5,0.9957805907,1.0,0.0,0.4337999574,0.0
"Closing this issue, a new issue can be opened for any further improvements.",Action on Issue,False,75,CONTRIBUTOR,True,False,True,1.0,0.2096774194,1.0,1.0,1.0,0.0,0.4337999574,0.0
Segfault at checkCast on Java 17 when running multiple CODE threads,Observed Bug Behaviour,False,67,CONTRIBUTOR,True,True,False,0.4583333333,0.1182795699,0.1428571429,0.003861003861,0.0,1.0,0.0,0.03406420424
Crash happens during MemberName.clone().,Observed Bug Behaviour,False,40,CONTRIBUTOR,True,True,False,0.1666666667,0.04301075269,0.2857142857,0.007722007722,0.0,1.0,0.0,0.03406420424
Sample failure link:,Testing,False,20,CONTRIBUTOR,True,True,False,0.125,0.03225806452,0.4285714286,0.01158301158,0.0,1.0,0.0,0.03406420424
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_extended.functional_ppc64le_linux_Personal/11/tapResults/
CODE
To reproduce, run CODE threads (e.g. in rc021.java) in a loop, adding and removing a static field from a class.",Testing,True,232,CONTRIBUTOR,True,True,False,1.0,0.2580645161,0.5714285714,0.01544401544,0.0,1.0,0.0,0.03406420424
The threads must not be CODEed one by one otherwise the crash will not happen.,Bug Reproduction,True,78,CONTRIBUTOR,True,True,False,0.625,0.1612903226,0.7142857143,0.01930501931,0.0,1.0,0.0,0.03406420424
See https://github.com/eclipse-openj9/openj9/pull/13836#issuecomment-977193731.,Social Conversation,False,79,CONTRIBUTOR,True,True,False,0.08333333333,0.02150537634,0.8571428571,0.02316602317,0.0,1.0,0.0,0.03406420424
Also note that this happens without the non-test changes in #13836,Observed Bug Behaviour,False,66,CONTRIBUTOR,True,True,False,0.5,0.1290322581,1.0,0.02702702703,0.0,1.0,0.0,0.03406420424
I've tentatively assigned this to the 0.29.1 release as we need to determine if this is a stop-ship / blocker issue for that release as info so far indicates it's present in the release branch.,Action on Issue,False,193,MEMBER,False,False,False,1.0,0.3870967742,1.0,0.03088803089,0.008064658568,0.9919353414,0.03406420424,0.00204415067
@babsingh @fengxue-IS,Contribution and Commitment,False,21,CONTRIBUTOR,False,False,False,1.0,0.03225806452,1.0,0.03474903475,0.008548608732,0.9914513913,0.00204415067,0.000637864534
@EricYangIBM can you try this test again with Nazims work around in https://github.com/eclipse/omr/pull/6255,Contribution and Commitment,False,108,CONTRIBUTOR,False,False,False,1.0,0.1397849462,1.0,0.03861003861,0.008699622378,0.9913003776,0.000637864534,0.007094844115
It still crashes with the latest openj9 and omr changes (including that commit),Task Progress,False,79,CONTRIBUTOR,True,False,False,1.0,0.1397849462,1.0,0.04247104247,0.01037931802,0.989620682,0.007094844115,0.0004923866578
"It still crashes with the latest openj9 and omr changes (including that commit)

Thanks confirming",Social Conversation,False,100,CONTRIBUTOR,False,False,False,1.0,0.1720430108,1.0,0.04633204633,0.01049588996,0.98950411,0.0004923866578,0.0009250900844
Looks like this is similar to https://github.com/eclipse-openj9/openj9/issues/13504,Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,1.0,0.0752688172,1.0,0.05019305019,0.0107149039,0.9892850961,0.0009250900844,0.004424019516
"I put the truncated test code here: https://github.com/EricYangIBM/openj9/tree/crash
The crash occurs even if I redefine a class to itself as long as I start ~20+ redefine threads.",Testing,False,181,CONTRIBUTOR,True,False,False,1.0,0.3010752688,1.0,0.05405405405,0.01176228509,0.9882377149,0.004424019516,0.2864869704
The test is run with CODE.,Testing,True,26,CONTRIBUTOR,False,False,False,0.2608695652,0.06451612903,0.1111111111,0.05791505792,0.07958772392,0.9204122761,0.2864869704,0.001745734514
"Ran a 100x grinder:
- Segfault is only seen when CODE is specified.",Testing,True,68,CONTRIBUTOR,False,False,False,0.5652173913,0.1397849462,0.2222222222,0.06177606178,0.07958772392,0.9204122761,0.2864869704,0.001745734514
"- With CODE, the test passes 100 times.",Testing,True,39,CONTRIBUTOR,False,False,False,0.3043478261,0.0752688172,0.3333333333,0.06563706564,0.07958772392,0.9204122761,0.2864869704,0.001745734514
"- With JIT enabled but without CODE, the test passes 100 times.",Testing,True,63,CONTRIBUTOR,False,False,False,0.4782608696,0.1182795699,0.4444444444,0.0694980695,0.07958772392,0.9204122761,0.2864869704,0.001745734514
"Referring to the native stack from gdb below, the segfault happens while resolving CODE in the JVM, which invokes CODE -> CODE (Java methods).",Investigation and Exploration,True,142,CONTRIBUTOR,False,False,False,1.0,0.247311828,0.5555555556,0.07335907336,0.07958772392,0.9204122761,0.2864869704,0.001745734514
The crash stops happening once CODE is removed.,Solution Discussion,True,47,CONTRIBUTOR,False,False,False,0.347826087,0.08602150538,0.6666666667,0.07722007722,0.07958772392,0.9204122761,0.2864869704,0.001745734514
++@0xdaryl @nbhuiyan @jdmpapin for JIT insights.,Contribution and Commitment,False,48,CONTRIBUTOR,False,False,False,0.2608695652,0.06451612903,0.7777777778,0.08108108108,0.07958772392,0.9204122761,0.2864869704,0.001745734514
"Also, I was able to produce segfault at different locations when I tried CODE and CODE.",Bug Reproduction,True,87,CONTRIBUTOR,False,False,False,0.6956521739,0.1720430108,0.8888888889,0.08494208494,0.07958772392,0.9204122761,0.2864869704,0.001745734514
"### Native stack during crash

CODE",Observed Bug Behaviour,True,37,CONTRIBUTOR,False,False,False,0.2608695652,0.06451612903,1.0,0.0888030888,0.07958772392,0.9204122761,0.2864869704,0.001745734514
JIT team may have a better workaround.,Contribution and Commitment,False,38,CONTRIBUTOR,False,False,False,0.2592592593,0.0752688172,0.6666666667,0.09652509653,0.08000102442,0.9199989756,0.001745734514,0.002398519856
This issue should not be labelled as a stop-ship/blocker issue for 0.29.1 due to the presence of a workaround.,Action on Issue,False,110,CONTRIBUTOR,False,False,False,0.7777777778,0.2258064516,1.0,0.1003861004,0.08000102442,0.9199989756,0.001745734514,0.002398519856
"That's a pretty heavy hammer to use to avoid the issue as that will make all compilations synchronous, not just those needed to address guard failures.",Solution Discussion,False,151,MEMBER,False,False,False,0.962962963,0.2795698925,0.5,0.1081081081,0.08056887105,0.9194311289,0.002398519856,0.002025499661
Expect to see much higher latency and worse startup with that option.,Solution Discussion,False,69,MEMBER,False,False,False,0.4444444444,0.1290322581,0.75,0.111969112,0.08056887105,0.9194311289,0.002398519856,0.002025499661
I'm not comfortable with that being considered a sufficient workaround for this issue,Workarounds,False,85,MEMBER,False,False,False,0.4814814815,0.1397849462,1.0,0.1158301158,0.08056887105,0.9194311289,0.002398519856,0.002025499661
"The workaround suggested by @babsingh was to *avoid* passing CODE rather than to start passing it:

> Segfault is only seen when CODE is specified.",Workarounds,True,149,CONTRIBUTOR,False,False,False,1.0,0.2688172043,0.5,0.1196911197,0.08104840561,0.9189515944,0.002025499661,0.002003118449
"Running without specifying CODE just makes all compilations asynchronous, which is the default

Separately, I wonder whether this is related to #13162",Solution Discussion,True,152,CONTRIBUTOR,False,False,False,0.92,0.247311828,1.0,0.1235521236,0.08104840561,0.9189515944,0.002025499661,0.002003118449
"However: While running without CODE seems to prevent this test from failing, it's not necessarily a generally reliable workaround for the actual bug.",Workarounds,True,149,CONTRIBUTOR,False,False,False,0.4181818182,0.247311828,0.5,0.1274131274,0.08152264145,0.9184773586,0.002003118449,0.008601845704
"I would even go further and guess that it doesn't prevent the bug in general, since I don't think I've ever personally encountered a bug for which it would

I think it probably still makes sense to take into account that this is an unusual mode when evaluating the severity though:
CODE",Investigation and Exploration,True,289,CONTRIBUTOR,False,False,False,1.0,0.5913978495,1.0,0.1312741313,0.08152264145,0.9184773586,0.002003118449,0.008601845704
Thanks for the clarification @jdmpapin and apologies @babsingh - I misread the original comment.,Social Conversation,False,96,MEMBER,False,False,False,1.0,0.1397849462,1.0,0.1351351351,0.08355911787,0.9164408821,0.008601845704,0.01254839937
This issue was opened yesterday in the morning,Action on Issue,False,46,CONTRIBUTOR,False,False,False,1.0,0.08602150538,1.0,0.1428571429,0.08661913122,0.9133808688,0.0003767503973,0.002189628546
"re https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-980168128:

Yesterday, @EricYangIBM tried eclipse/omr#6255 and stated in https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-979425930 that the crash still happens.",Bug Reproduction,False,251,CONTRIBUTOR,False,False,False,1.0,0.1827956989,0.25,0.1467181467,0.08713752309,0.9128624769,0.002189628546,0.0003096067621
"Just now, I rebased both openj9 and omr repos with the latest changes.",Task Progress,False,70,CONTRIBUTOR,False,False,False,0.7647058824,0.1397849462,0.5,0.1505791506,0.08713752309,0.9128624769,0.002189628546,0.0003096067621
"But, I can no longer reproduce the segfault.",Bug Reproduction,False,44,CONTRIBUTOR,False,False,False,0.4705882353,0.08602150538,0.75,0.1544401544,0.08713752309,0.9128624769,0.002189628546,0.0003096067621
Can another person confirm this point?,Social Conversation,False,38,CONTRIBUTOR,False,False,False,0.3529411765,0.06451612903,1.0,0.1583011583,0.08713752309,0.9128624769,0.002189628546,0.0003096067621
"Oh I missed that, sorry",Social Conversation,False,23,CONTRIBUTOR,False,False,False,1.0,0.05376344086,1.0,0.1621621622,0.08721082211,0.9127891779,0.0003096067621,1.0
Has this been confirmed now?,Social Conversation,False,28,MEMBER,False,False,False,0.3333333333,0.05376344086,0.3333333333,0.166023166,0.3239595955,0.6760404045,1.0,0.005733320402
I see a 👍 on the post,Social Conversation,False,21,MEMBER,False,False,False,0.4666666667,0.0752688172,0.6666666667,0.1698841699,0.3239595955,0.6760404045,1.0,0.005733320402
"but I'm too old to know if that means ""confirmed"" or ""agree we should confirm""",Social Conversation,False,78,MEMBER,False,False,False,1.0,0.1612903226,1.0,0.1737451737,0.3239595955,0.6760404045,1.0,0.005733320402
"For the record, if I had confirmed something like that, I would have said so explicitly.",Social Conversation,False,88,CONTRIBUTOR,False,False,False,0.5333333333,0.1720430108,0.6666666667,0.1814671815,0.325316952,0.674683048,0.005733320402,0.06293969756
But sorry nonetheless for the ambiguity :confused:,Social Conversation,False,50,CONTRIBUTOR,False,False,False,0.2333333333,0.0752688172,1.0,0.1853281853,0.325316952,0.674683048,0.005733320402,0.06293969756
It still happens with the latest OpenJ9 and OMR changes.,Bug Reproduction,False,56,CONTRIBUTOR,False,False,False,0.2325581395,0.1075268817,0.07692307692,0.1891891892,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"I observed the following three scenarios:
- After the SCC is cleared, the first run with CODE will always pass.",Bug Reproduction,True,112,CONTRIBUTOR,False,False,False,0.4651162791,0.2150537634,0.1538461538,0.1930501931,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"But, subsequent runs will fail.",Investigation and Exploration,False,31,CONTRIBUTOR,False,False,False,0.1162790698,0.05376344086,0.2307692308,0.1969111969,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"Probably, the data after generation is good that's why the first run passes.",Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,0.3023255814,0.1397849462,0.3076923077,0.2007722008,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"After the data is stored in the SCC, it either gets corrupted or is not read correctly from the SCC which leads to segfaults in the subsequent runs.",Investigation and Exploration,False,148,CONTRIBUTOR,False,False,False,0.6511627907,0.3010752688,0.3846153846,0.2046332046,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"- After the SCC is cleared and if the first run does not use CODE, then subsequent runs with CODE will always pass.",Investigation and Exploration,True,115,CONTRIBUTOR,False,False,False,0.511627907,0.2365591398,0.4615384615,0.2084942085,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"In this scenario, some data is being stored in the SCC during the first run which allows subsequent runs to always pass.",Investigation and Exploration,False,120,CONTRIBUTOR,False,False,False,0.511627907,0.2365591398,0.5384615385,0.2123552124,0.3402178482,0.6597821518,0.06293969756,0.0116494207
The segfault re-occurs after the SCC is destroyed and CODE is used in the first run.,Investigation and Exploration,True,84,CONTRIBUTOR,False,False,False,0.3953488372,0.1827956989,0.6153846154,0.2162162162,0.3402178482,0.6597821518,0.06293969756,0.0116494207
- The segfault does not happen with SCC disabled (CODE).,Investigation and Exploration,True,56,CONTRIBUTOR,False,False,False,0.2093023256,0.09677419355,0.6923076923,0.2200772201,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"### Different SCC options

From the above scenarios, I feel that the JIT is storing some data in the SCC which is either corrupted or not being read correctly from the SCC.",Investigation and Exploration,False,174,CONTRIBUTOR,False,False,False,0.7441860465,0.3440860215,0.7692307692,0.2239382239,0.3402178482,0.6597821518,0.06293969756,0.0116494207
The culprit data is only generated when CODE is specified.,Investigation and Exploration,True,58,CONTRIBUTOR,False,False,False,0.2325581395,0.1075268817,0.8461538462,0.2277992278,0.3402178482,0.6597821518,0.06293969756,0.0116494207
"I tried the below [-Xshareclasses] URL  options to figure out where the corruption is happening in the SCC:
1. CODE
2. CODE
3. CODE
4. CODE
5. CODE

None of the above options prevented the segfault.",Investigation and Exploration,True,205,CONTRIBUTOR,False,False,False,1.0,0.4623655914,0.9230769231,0.2316602317,0.3402178482,0.6597821518,0.06293969756,0.0116494207
@hangshao0 for insights.,Contribution and Commitment,False,24,CONTRIBUTOR,False,False,False,0.06976744186,0.03225806452,1.0,0.2355212355,0.3402178482,0.6597821518,0.06293969756,0.0116494207
CODE (and similarly CODE) prevents storing new aot but doesn't stop loading of existing aot already in the cache.,Investigation and Exploration,True,113,CONTRIBUTOR,False,False,False,1.0,0.2043010753,0.5,0.2393822394,0.3429758343,0.6570241657,0.0116494207,0.01282443431
Try CODE.,Solution Discussion,True,9,CONTRIBUTOR,False,False,False,0.1052631579,0.02150537634,1.0,0.2432432432,0.3429758343,0.6570241657,0.0116494207,0.01282443431
"With CODE, the segfault does not happen.",Solution Discussion,True,40,CONTRIBUTOR,False,False,False,1.0,0.0752688172,0.5,0.2471042471,0.3460120034,0.6539879966,0.01282443431,0.1430196731
@dsouzai for AOT insights.,Contribution and Commitment,False,26,CONTRIBUTOR,False,False,False,0.5714285714,0.04301075269,1.0,0.250965251,0.3460120034,0.6539879966,0.01282443431,0.1430196731
This failure will have to be triaged to get to the root cause.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.5,0.1397849462,0.1428571429,0.2548262548,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
I suspect including CODE is really just affecting the timing or ordering of compilations in such a way that it is making the problem more reproducible.,Investigation and Exploration,True,151,CONTRIBUTOR,False,False,False,1.0,0.2795698925,0.2857142857,0.2586872587,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
It is likely the problem exists without  async compilation but it is harder to trigger.,Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,0.6153846154,0.1720430108,0.4285714286,0.2625482625,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
What is the failure rate in 100 runs?,Investigation and Exploration,False,37,CONTRIBUTOR,False,False,False,0.3076923077,0.08602150538,0.5714285714,0.2664092664,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
Does it fail every time?,Investigation and Exploration,False,24,CONTRIBUTOR,False,False,False,0.1923076923,0.05376344086,0.7142857143,0.2702702703,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
I don't think that statistic was mentioned above.,Social Conversation,False,49,CONTRIBUTOR,False,False,False,0.3076923077,0.08602150538,0.8571428571,0.2741312741,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
Given that CODE is not the default way of invoking the JIT suggests this is not a blocker but one that should be investigated for 0.30.,Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,1.0,0.2795698925,1.0,0.277992278,0.3798717355,0.6201282645,0.1430196731,0.0009064390746
"With the default test settings, this test will fail every-time except for the first run if the SCC has been destroyed prior.",Investigation and Exploration,False,124,CONTRIBUTOR,False,False,False,1.0,0.247311828,1.0,0.2818532819,0.3800863339,0.6199136661,0.0009064390746,0.003566073067
Is this a new test?,Social Conversation,False,19,CONTRIBUTOR,False,False,False,0.15625,0.05376344086,0.25,0.2857142857,0.3809305973,0.6190694027,0.003566073067,0.004767198096
Is that why we only hit this 5 days ago (where last commit to the branch is 11 days ago)?,Social Conversation,False,89,CONTRIBUTOR,False,False,False,0.625,0.2150537634,0.5,0.2895752896,0.3809305973,0.6190694027,0.003566073067,0.004767198096
"With the default settings, this test will fail every-time except for the first run if the SCC has been destroyed prior.",Bug Reproduction,False,119,CONTRIBUTOR,False,False,False,0.6875,0.2365591398,0.75,0.2934362934,0.3809305973,0.6190694027,0.003566073067,0.004767198096
"@babsingh Just to be clear: you mean it fails every time with the test's default command line options (which include several esoteric options to try to force problems to be found), correct ?",Social Conversation,False,190,CONTRIBUTOR,False,False,False,1.0,0.3440860215,1.0,0.2972972973,0.3809305973,0.6190694027,0.003566073067,0.004767198096
"Yes, it is a new test (CODE), which is included in https://github.com/eclipse-openj9/openj9/pull/13836.",Social Conversation,True,103,CONTRIBUTOR,False,False,False,0.4,0.1290322581,0.2,0.3011583012,0.3820592256,0.6179407744,0.004767198096,5.6e-05
This PR has not been merged yet.,Action on Issue,False,32,CONTRIBUTOR,False,False,False,0.2333333333,0.0752688172,0.4,0.305019305,0.3820592256,0.6179407744,0.004767198096,5.6e-05
"To reproduce the failure, I am using the truncated version (micro-test) of CODE created by Eric and available in https://github.com/EricYangIBM/openj9/tree/crash.",Bug Reproduction,True,162,CONTRIBUTOR,False,False,False,0.7,0.2258064516,0.6,0.3088803089,0.3820592256,0.6179407744,0.004767198096,5.6e-05
"Correct, it fails consistently with the test's default command line options:
CODE",Bug Reproduction,True,82,CONTRIBUTOR,False,False,False,0.4333333333,0.1397849462,1.0,0.3166023166,0.3820592256,0.6179407744,0.004767198096,5.6e-05
"After the SCC is cleared and if the first run does not use -Xjit:disableAsyncCompilation, then subsequent runs with -Xjit:disableAsyncCompilation will always pass.",Solution Discussion,False,163,CONTRIBUTOR,False,False,False,1.0,0.2580645161,0.2,0.3204633205,0.3820724724,0.6179275276,5.6e-05,0.006214516454
"This is because when there's a mismatch between sync and async compilation between jvm instances, the AOT code in the SCC won't be loaded.",Investigation and Exploration,False,138,CONTRIBUTOR,False,False,False,1.0,0.2580645161,0.4,0.3243243243,0.3820724724,0.6179275276,5.6e-05,0.006214516454
"After the SCC is cleared, the first run with -Xjit:disableAsyncCompilation will always pass.",Solution Discussion,False,92,CONTRIBUTOR,False,False,False,0.5833333333,0.1505376344,0.6,0.3281853282,0.3820724724,0.6179275276,5.6e-05,0.006214516454
"This could either just be timing related, or a missing relocation.",Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,0.4583333333,0.1182795699,0.8,0.332046332,0.3820724724,0.6179275276,5.6e-05,0.006214516454
This would require further investigation to get to the root cause.,Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,0.4583333333,0.1182795699,1.0,0.3359073359,0.3820724724,0.6179275276,5.6e-05,0.006214516454
"any chance we could run this test on a previous release to see if the problem is already ""in the wild"" ?",Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,1.0,0.2258064516,0.5,0.3397683398,0.3835437516,0.6164562484,0.006214516454,0.000634134332
Or is it 17 specific?,Investigation and Exploration,False,21,CONTRIBUTOR,False,False,False,0.2380952381,0.05376344086,1.0,0.3436293436,0.3835437516,0.6164562484,0.006214516454,0.000634134332
"As discussed on the OpenJ9 call today, we're waiting for more information about this problem before releasing Java 17 GA, so it's effectively a blocker at this point.",Task Progress,False,166,CONTRIBUTOR,False,False,False,1.0,0.3010752688,0.5,0.3474903475,0.3836938821,0.6163061179,0.000634134332,0.0045844182
Once we have more information this could lift the blocker status.,Action on Issue,False,65,CONTRIBUTOR,False,False,False,0.3928571429,0.1182795699,1.0,0.3513513514,0.3836938821,0.6163061179,0.000634134332,0.0045844182
"Or is it 17 specific?

I believe @tajila (apologies if it was someone else) mentioned on the community call that this was not seen with JDK 8 or 11.",Investigation and Exploration,False,150,CONTRIBUTOR,False,False,False,1.0,0.3225806452,1.0,0.3552123552,0.3847792375,0.6152207625,0.0045844182,0.0009250900844
I discussed with @dsouzai and he has agreed to dive deeper into this problem to understand the nature of it.,Contribution and Commitment,False,108,CONTRIBUTOR,False,False,False,0.7407407407,0.2150537634,0.3333333333,0.3590733591,0.3849982514,0.6150017486,0.0009250900844,0.03688423691
"However, if the issue involves AOT loaded methods, past experience suggests the investigation may take some time to narrow down with an AOT loaded method limitfile approach.",Investigation and Exploration,False,173,CONTRIBUTOR,False,False,False,1.0,0.2903225806,0.6666666667,0.3629343629,0.3849982514,0.6150017486,0.0009250900844,0.03688423691
He may ask help getting set up to triage this.,Contribution and Commitment,False,46,CONTRIBUTOR,False,False,False,0.3703703704,0.1075268817,1.0,0.3667953668,0.3849982514,0.6150017486,0.0009250900844,0.03688423691
"Stack of the crashing thread:
CODE

The bytecodes of CODE are:
CODE

The crash happens at CODE.",Observed Bug Behaviour,True,101,CONTRIBUTOR,False,False,False,0.2258064516,0.2258064516,0.08333333333,0.3706563707,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"The local stackslots for this method is:
CODE
and CODE is a valid object:
CODE

If we look at the raw stack:
CODE
We can see that CODE passes in the valid CODE object CODE to CODE which then calls CODE, as seen in the bytecodes:
CODE

Given that the value at the top of the stack is CODE, it means that CODE loaded the valid value CODE to the top of the stack and then CODE updated it (via the return value) with CODE.",Observed Bug Behaviour,True,428,CONTRIBUTOR,False,False,False,1.0,1.0,0.1666666667,0.3745173745,0.3937305493,0.6062694507,0.03688423691,0.3568236584
The checkcast then crashes when trying to work with this invalid value.,Observed Bug Behaviour,False,71,CONTRIBUTOR,False,False,False,0.1290322581,0.1290322581,0.25,0.3783783784,0.3937305493,0.6062694507,0.03688423691,0.3568236584
It is worth noting that any method of the form CODE does **NOT** get AOT compiled.,Investigation and Exploration,True,82,CONTRIBUTOR,False,False,False,0.1720430108,0.1720430108,0.3333333333,0.3822393822,0.3937305493,0.6062694507,0.03688423691,0.3568236584
The only method that could be compiled would be CODE.,Investigation and Exploration,True,53,CONTRIBUTOR,False,False,False,0.1075268817,0.1075268817,0.4166666667,0.3861003861,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"Looking at it in kca:
CODE",Investigation and Exploration,True,27,CONTRIBUTOR,False,False,False,0.0752688172,0.0752688172,0.5,0.38996139,0.3937305493,0.6062694507,0.03688423691,0.3568236584
So I looked the disassembly ([object.clone.diss.txt] URL .,Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.0752688172,0.0752688172,0.5833333333,0.3938223938,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"The relevant snippet is:
CODE

I don't see anything incorrect in the generated code.",Investigation and Exploration,True,87,CONTRIBUTOR,False,False,False,0.1720430108,0.1720430108,0.6666666667,0.3976833977,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"There is a call to CODE, which is
CODE
where the CODE is CODE which gets set in CODE or CODE; I suppose the latter is more likely here.",Investigation and Exploration,True,137,CONTRIBUTOR,False,False,False,0.3333333333,0.3333333333,0.75,0.4015444015,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"If you search for CODE in OpenJ9, you'll see that the JIT transforms these calls to potentially perform the work inline.",Investigation and Exploration,True,120,CONTRIBUTOR,False,False,False,0.2258064516,0.2258064516,0.8333333333,0.4054054054,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"However, that transformation does not happen in AOT, hence the call out.",Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.1290322581,0.1290322581,0.9166666667,0.4092664093,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"As such, I think the problem is in CODE; I don't think there's anything wrong in the AOT code for CODE,",Investigation and Exploration,True,103,CONTRIBUTOR,False,False,False,0.2258064516,0.2258064516,1.0,0.4131274131,0.3937305493,0.6062694507,0.03688423691,0.3568236584
"I think the problem is in java/lang/J9VMInternals.primitiveClone

I added CODE statements at the start and end of CODE:
https://github.com/eclipse-openj9/openj9/blob/8b18a989f32dfc03c0dc352e1d969e181100e3da/runtime/vm/FastJNI_java_lang_J9VMInternals.cpp#L56-L60

I also tried setting a CODE in CODE for the above function.",Investigation and Exploration,True,327,CONTRIBUTOR,False,False,False,1.0,0.3870967742,0.5,0.416988417,0.4782081127,0.5217918873,0.3568236584,0.02724539507
@dsouzai Neither the print statements got invoked nor the breakpoint was hit before the segfault.,Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,0.4166666667,0.1612903226,1.0,0.4208494208,0.4782081127,0.5217918873,0.3568236584,0.02724539507
"Yesterday, the question was raised whether CODE could subvert the workaround we have in place for #13162.",Workarounds,True,105,CONTRIBUTOR,False,False,False,0.53125,0.1827956989,0.1666666667,0.4247104247,0.4846584266,0.5153415734,0.02724539507,0.2051611074
"I thought the answer was no, but in discussing with @vijaysun-omr it turns out it is possible to circumvent the workaround.",Workarounds,False,123,CONTRIBUTOR,False,False,False,0.6875,0.2365591398,0.3333333333,0.4285714286,0.4846584266,0.5153415734,0.02724539507,0.2051611074
"These are the options in play as you posted above:
CODE
@babsingh : Can you try removing just the CODE from this option list to see if the test still fails?",Solution Discussion,True,158,CONTRIBUTOR,False,False,False,1.0,0.3440860215,0.5,0.4324324324,0.4846584266,0.5153415734,0.02724539507,0.2051611074
(EDIT: this is assuming you are using a build with the workaround).,Workarounds,False,67,CONTRIBUTOR,False,False,False,0.375,0.1290322581,0.6666666667,0.4362934363,0.4846584266,0.5153415734,0.02724539507,0.2051611074
"If that still fails, can you add the following to the above CODE option set:   CODE and re-run?",Solution Discussion,True,95,CONTRIBUTOR,False,False,False,0.625,0.2150537634,0.8333333333,0.4401544402,0.4846584266,0.5153415734,0.02724539507,0.2051611074
"If this fails, the CODE file produced might contain useful information.",Solution Discussion,True,71,CONTRIBUTOR,False,False,False,0.34375,0.1182795699,1.0,0.444015444,0.4846584266,0.5153415734,0.02724539507,0.2051611074
"re: https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-984098564 

> Neither the print statements got invoked nor the breakpoint was hit before the segfault.",Investigation and Exploration,False,175,CONTRIBUTOR,False,False,False,1.0,0.1827956989,0.3333333333,0.4478764479,0.5332300671,0.4667699329,0.2051611074,0.002331376221
I missed to trace the interpreter version of CODE in CODE due to the different naming.,Investigation and Exploration,True,86,CONTRIBUTOR,False,False,False,0.9411764706,0.1720430108,0.6666666667,0.4517374517,0.5332300671,0.4667699329,0.2051611074,0.002331376221
Tracing the interpreter version of CODE to see if it returns an invalid value.,Investigation and Exploration,True,78,CONTRIBUTOR,False,False,False,0.8235294118,0.1505376344,1.0,0.4555984556,0.5332300671,0.4667699329,0.2051611074,0.002331376221
Can you try removing just the enableOSROnGuardFailure from this option list to see if the test still fails?,Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,0.5142857143,0.1935483871,0.2,0.4594594595,0.5337820175,0.4662179825,0.002331376221,0.004039808715
It still fails after removing just the CODE from the option list.,Investigation and Exploration,True,65,CONTRIBUTOR,False,False,False,0.3428571429,0.1290322581,0.4,0.4633204633,0.5337820175,0.4662179825,0.002331376221,0.004039808715
"I also made sure that https://github.com/eclipse/omr/pull/6255 is applied to the build.

CODE

> If that still fails, can you add the following to the above -Xjit option set: prepareForOSREvenIfThatDoesNothing,verbose={osr*},vlog=osrtransitions and re-run?",Investigation and Exploration,True,260,CONTRIBUTOR,False,False,False,1.0,0.376344086,0.6,0.4671814672,0.5337820175,0.4662179825,0.002331376221,0.004039808715
"If this fails, the osrtransitions file produced might contain useful information.",Solution Discussion,False,81,CONTRIBUTOR,False,False,False,0.3142857143,0.1182795699,0.8,0.471042471,0.5337820175,0.4662179825,0.002331376221,0.004039808715
"It still fails. CODE log file: [osrtransitions.20211202.073456.30262.txt] URL 

CODE",Solution Discussion,True,86,CONTRIBUTOR,False,False,False,0.2857142857,0.1075268817,1.0,0.4749034749,0.5337820175,0.4662179825,0.002331376221,0.004039808715
"Is it possible to run with 
CODE
i.e. without CODE to see if there are any OSR transitions in that case.",Solution Discussion,True,106,CONTRIBUTOR,False,False,False,1.0,0.247311828,0.5,0.4787644788,0.5347384373,0.4652615627,0.004039808715,0.003498929432
"If not, then OSR would be ruled out completely as a factor.",Solution Discussion,False,59,CONTRIBUTOR,False,False,False,0.5217391304,0.1290322581,1.0,0.4826254826,0.5347384373,0.4652615627,0.004039808715,0.003498929432
Could you also add CODE to the original command-line options please and report what happens?,Solution Discussion,True,92,CONTRIBUTOR,False,False,False,1.0,0.1720430108,0.5,0.4864864865,0.5355668046,0.4644331954,0.003498929432,0.003129639439
"i.e.,
CODE",Solution Discussion,True,11,CONTRIBUTOR,False,False,False,0.1875,0.03225806452,1.0,0.4903474903,0.5355668046,0.4644331954,0.003498929432,0.003129639439
"This is the stackslots from a recent (ie 10 min ago) run:
CODE

There seems to be some kind of OSR information in the frame of CODE.",Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,0.935483871,0.311827957,0.2,0.4942084942,0.5363077428,0.4636922572,0.003129639439,0.0028647951
"However, the crash happens in CODE which is interpreted.",Investigation and Exploration,True,56,CONTRIBUTOR,False,False,False,0.2903225806,0.09677419355,0.4,0.4980694981,0.5363077428,0.4636922572,0.003129639439,0.0028647951
"Now, the object CODE in CODE is valid:
CODE

At the time of the crash:
CODE
CODE
So that CODE is definitely the problem.",Investigation and Exploration,True,126,CONTRIBUTOR,False,False,False,0.935483871,0.311827957,0.6,0.5019305019,0.5363077428,0.4636922572,0.003129639439,0.0028647951
"That said, CODE is interpreted, and so is the method it calls:
CODE
namely CODE:
CODE
The checkcast it crashes on happens after the invokespecial to CODE.",Investigation and Exploration,True,158,CONTRIBUTOR,False,False,False,1.0,0.3333333333,0.8,0.5057915058,0.5363077428,0.4636922572,0.003129639439,0.0028647951
"Right before the segfault, the output was:
CODE
I didn't see a message for the copy of the object CODE.",Investigation and Exploration,True,105,CONTRIBUTOR,False,False,False,0.7096774194,0.2365591398,1.0,0.5096525097,0.5363077428,0.4636922572,0.003129639439,0.0028647951
"-Xjit:enableOSR,count=1,disableAsyncCompilation,prepareForOSREvenIfThatDoesNothing,verbose{osr*},vlog=osrtransitions

@vijaysun-omr",Investigation and Exploration,False,133,CONTRIBUTOR,False,False,False,1.0,0.09677419355,0.2,0.5135135135,0.5369859796,0.4630140204,0.0028647951,0.0003133369641
It still segfaults at CODE:,Investigation and Exploration,True,27,CONTRIBUTOR,False,False,False,0.5555555556,0.05376344086,0.4,0.5173745174,0.5369859796,0.4630140204,0.0028647951,0.0003133369641
[osrtransitions.20211202.083039.19170.txt] URL .,Investigation and Exploration,False,48,CONTRIBUTOR,False,False,False,0.2222222222,0.02150537634,0.6,0.5212355212,0.5369859796,0.4630140204,0.0028647951,0.0003133369641
"-Xjit:enableOSR,enableOSROnGuardFailure,count=1,disableAsyncCompilation,disableEscapeAnalysis

@0xdaryl",Investigation and Exploration,False,105,CONTRIBUTOR,False,False,False,0.7777777778,0.0752688172,0.8,0.5250965251,0.5369859796,0.4630140204,0.0028647951,0.0003133369641
It still segfaults at CODE.,Investigation and Exploration,True,27,CONTRIBUTOR,False,False,False,0.5555555556,0.05376344086,1.0,0.528957529,0.5369859796,0.4630140204,0.0028647951,0.0003133369641
"Just to make sure I'm following, it's the pending push slot from the J2I transition that's the problematic one we're trying to diagnose, right?
<22dc00>",Investigation and Exploration,False,153,CONTRIBUTOR,False,False,False,1.0,0.2795698925,0.25,0.5328185328,0.5370601617,0.4629398383,0.0003133369641,0.001592796234
"Pending stack starting at 0x0000000000321568 for UDATA(0x0000000000000001) slots
<22dc00>",Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,0.3846153846,0.1075268817,0.5,0.5366795367,0.5370601617,0.4629398383,0.0003133369641,0.001592796234
O-Slot: p0[0x0000000000321568],Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,0.1153846154,0.03225806452,0.75,0.5405405405,0.5370601617,0.4629398383,0.0003133369641,0.001592796234
"Just to make sure I'm following, it's the pending push slot from the J2I transition that's the problematic one we're trying to diagnose, right?
 <22dc00 Pending stack starting at 0x0000000000321568 for UDATA(0x0000000000000001) slots
 <22dc00 O-Slot: p0[0x0000000000321568] = 0x000000000000000E

As far as I can tell, yes",Investigation and Exploration,False,325,CONTRIBUTOR,False,False,False,1.0,0.5161290323,1.0,0.5482625483,0.5374372543,0.4625627457,0.001592796234,0.03390753575
"Please let's not stop investigating the root cause here, but would it be possible to also measure how often this test fails with default options ?",Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,1.0,0.2688172043,1.0,0.5521235521,0.5454648218,0.4545351782,0.03390753575,0.01613685365
"I know it's < 1 in 100, which normally wouldn't warrant ""blocker"" status.",Observed Bug Behaviour,False,73,CONTRIBUTOR,False,False,False,0.6,0.1290322581,0.5,0.555984556,0.5492852021,0.4507147979,0.01613685365,0.00255891854
How low a repro rate do we think we would need to shift this one to nonblocker status @DanHeidinga @pshipton ?,Solution Discussion,False,110,CONTRIBUTOR,False,False,False,1.0,0.2150537634,1.0,0.5598455598,0.5492852021,0.4507147979,0.01613685365,0.00255891854
"would it be possible to also measure how often this test fails with default options ?

**0 failures are seen in 100 runs** when the test is run without CODE.",Solution Discussion,True,159,CONTRIBUTOR,False,False,False,1.0,0.3225806452,1.0,0.5637065637,0.5498910229,0.4501089771,0.00255891854,0.001391365329
"I also noticed that the failure goes away with CODE. 
CODE",Solution Discussion,True,59,CONTRIBUTOR,False,False,False,1.0,0.1290322581,1.0,0.5675675676,0.5502204269,0.4497795731,0.001391365329,0.003338530748
"re: https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-984786749

> I didn't see a message for the copy of the object 0x00000007058C31A0.",Investigation and Exploration,False,155,CONTRIBUTOR,False,False,False,0.7894736842,0.1612903226,0.1666666667,0.5714285714,0.55101082,0.44898918,0.003338530748,0.005248394148
"There is an OSR transition to the interpreter for executing CODE, which should invoke CODE -> CODE before the CODE.",Investigation and Exploration,True,115,CONTRIBUTOR,False,False,False,1.0,0.2043010753,0.3333333333,0.5752895753,0.55101082,0.44898918,0.003338530748,0.005248394148
"Similar to Irwin's observation, I do not see signs of CODE being invoked for the CODE.",Investigation and Exploration,True,86,CONTRIBUTOR,False,False,False,0.8421052632,0.1720430108,0.5,0.5791505792,0.55101082,0.44898918,0.003338530748,0.005248394148
This results in the bad O-slot value: CODE.,Investigation and Exploration,True,43,CONTRIBUTOR,False,False,False,0.4736842105,0.09677419355,0.6666666667,0.583011583,0.55101082,0.44898918,0.003338530748,0.005248394148
I could not find reasons which would prevent CODE from being invoked.,Investigation and Exploration,True,69,CONTRIBUTOR,False,False,False,0.6315789474,0.1290322581,0.8333333333,0.5868725869,0.55101082,0.44898918,0.003338530748,0.005248394148
Figuring out why CODE was not invoked will help further the investigation.,Investigation and Exploration,True,74,CONTRIBUTOR,False,False,False,0.6315789474,0.1290322581,1.0,0.5907335907,0.55101082,0.44898918,0.003338530748,0.005248394148
"After taking a look I've found that we perform a decompilation right before the crash on checkcast

CODE

At this point the stack looks like:

CODE

Note that the bytecode index is 1 and there are no pending pushes.",Investigation and Exploration,True,223,CONTRIBUTOR,False,False,False,0.8461538462,0.4731182796,0.25,0.5945945946,0.5522533709,0.4477466291,0.005248394148,0.002801381667
"After we pop down to the CODE frame:

we run:

CODE

This means CODE is never actually invoked in the interpreter, and the return value comes from CODE

CODE

As expected CODE is 1 and CODE is 0xE",Investigation and Exploration,True,206,CONTRIBUTOR,False,False,False,0.8269230769,0.4623655914,0.5,0.5984555985,0.5522533709,0.4477466291,0.005248394148,0.002801381667
"The next bytecode will be the checkcast and it crashes on the 0xE receiver

Looking at the decompRecord I see:

CODE

The CODE method is CODE

It looks like decompOnReturn was registered with CODE, so after running Object.clone in the JIT it decompiled and transitioned to the interpreter.",Investigation and Exploration,True,297,CONTRIBUTOR,False,False,False,1.0,0.5591397849,0.75,0.6023166023,0.5522533709,0.4477466291,0.005248394148,0.002801381667
But maybe someone more familiar with OSR can confirm.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.1730769231,0.09677419355,1.0,0.6061776062,0.5522533709,0.4477466291,0.005248394148,0.002801381667
"As for Marks question, the failure has never been seen without those test options, however, I am not sure if that means this scenario would never be recreated without those options.",Investigation and Exploration,False,181,CONTRIBUTOR,False,False,False,1.0,0.3333333333,0.5,0.61003861,0.5529165945,0.4470834055,0.002801381667,0.003696630136
Since we have narrowed it down to the usage of CODE perhaps that detail can help guide whether this should still be a blocker or not.,Investigation and Exploration,True,133,CONTRIBUTOR,False,False,False,0.8387096774,0.2795698925,1.0,0.6138996139,0.5529165945,0.4470834055,0.002801381667,0.003696630136
"Looking at the disassembly in https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-982954463, it doesn't look like the startPC was patched.",Solution Discussion,False,153,CONTRIBUTOR,False,False,False,0.6363636364,0.1505376344,0.1111111111,0.6177606178,0.5537917672,0.4462082328,0.003696630136,0.001219776039
So the only way for involuntary OSR<sup>1</sup> to occur would be via the call to CODE.,Solution Discussion,True,87,CONTRIBUTOR,False,False,False,0.7727272727,0.1827956989,0.2222222222,0.6216216216,0.5537917672,0.4462082328,0.003696630136,0.001219776039
(which in that run was not compiled or inlined).,Solution Discussion,False,48,CONTRIBUTOR,False,False,False,0.4090909091,0.09677419355,0.3333333333,0.6254826255,0.5537917672,0.4462082328,0.003696630136,0.001219776039
"Now I was under the impression that in that case, we transition to the interpreter which would then run the CODE code.",Solution Discussion,True,118,CONTRIBUTOR,False,False,False,1.0,0.2365591398,0.4444444444,0.6293436293,0.5537917672,0.4462082328,0.003696630136,0.001219776039
Somehow it looks like neither compiled code nore interpreter  is running that call.,Solution Discussion,False,83,CONTRIBUTOR,False,False,False,0.6363636364,0.1505376344,0.5555555556,0.6332046332,0.5537917672,0.4462082328,0.003696630136,0.001219776039
Is there a corner case in the whole OSR infra when it comes to these special primitives?,Solution Discussion,False,88,CONTRIBUTOR,False,False,False,0.7727272727,0.1827956989,0.6666666667,0.6370656371,0.5537917672,0.4462082328,0.003696630136,0.001219776039
@jdmpapin do you have any thoughts?,Contribution and Commitment,False,35,CONTRIBUTOR,False,False,False,0.2727272727,0.06451612903,0.7777777778,0.6409266409,0.5537917672,0.4462082328,0.003696630136,0.001219776039
"1. I said ""involuntary OSR"" because that disassembly was of an AOT body, and AOT only supports involuntary OSR right now.",Solution Discussion,False,121,CONTRIBUTOR,False,False,False,0.9545454545,0.2258064516,1.0,0.6486486486,0.5537917672,0.4462082328,0.003696630136,0.001219776039
"Also worth noting that in https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-984786749, CODE wasn't compiled, so I don't know if the decompile circumstance applies there.",Solution Discussion,True,186,CONTRIBUTOR,False,False,False,1.0,0.2043010753,0.3333333333,0.6525096525,0.5540805477,0.4459194523,0.001219776039,0.002831223282
"At any rate, the reason I say 'wasn't compiled' is because the CODE field had a count of 14.",Solution Discussion,True,92,CONTRIBUTOR,False,False,False,1.0,0.2043010753,0.6666666667,0.6563706564,0.5540805477,0.4459194523,0.001219776039,0.002831223282
"So unless the count got re-encoded during the decompile, it hadn't been compiled yet.",Solution Discussion,False,85,CONTRIBUTOR,False,False,False,0.7894736842,0.1612903226,1.0,0.6602316602,0.5540805477,0.4459194523,0.001219776039,0.002831223282
"To be clear, I'm not suggesting the options make the problem go away.",Solution Discussion,False,69,CONTRIBUTOR,False,False,False,0.1666666667,0.1397849462,0.125,0.6640926641,0.5547508363,0.4452491637,0.002831223282,0.01376817541
I'm sure it's a real problem and we should continue to diagnose it and fix it.,Motivation,False,78,CONTRIBUTOR,False,False,False,0.2051282051,0.1720430108,0.25,0.667953668,0.5547508363,0.4452491637,0.002831223282,0.01376817541
Crashes are bad.,Motivation,False,16,CONTRIBUTOR,False,False,False,0.03846153846,0.03225806452,0.375,0.6718146718,0.5547508363,0.4452491637,0.002831223282,0.01376817541
The question I'm asking (sorry to have to weave it in with the diagnosis comments) is really whether we think enough people will encounter this problem in the field to warrant blocking the JDK17 release which has already (otherwise) passed a full test cycle (to our satisfaction) and is very very late affecting our perception in the market.,Motivation,False,341,CONTRIBUTOR,False,False,False,0.7435897436,0.623655914,0.5,0.6756756757,0.5547508363,0.4452491637,0.002831223282,0.01376817541
We found this via a newly written test (if we'd resolved the earlier blocker a few days faster we would already have released JDK17 -- for better or worse :) ).,Investigation and Exploration,False,160,CONTRIBUTOR,False,False,False,0.3974358974,0.3333333333,0.625,0.6795366795,0.5547508363,0.4452491637,0.002831223282,0.01376817541
"Given zero known failures with default options, the esoteric options needed to cause the problem, and the nature of the test itself (I'd like to believe it's not all that common to have multiple parallel threads continuously adding then removing a static field from one particular class), I'm just worried that we are being more cautious with this defect than any of the other ones we deferred already and holding back our already very late JDK17 release.",Motivation,False,455,CONTRIBUTOR,False,False,False,1.0,0.8387096774,0.75,0.6833976834,0.5547508363,0.4452491637,0.002831223282,0.01376817541
"If holding back the release is the right thing to do, then we should hold it back.",Solution Discussion,False,82,CONTRIBUTOR,False,False,False,0.2179487179,0.1827956989,0.875,0.6872586873,0.5547508363,0.4452491637,0.002831223282,0.01376817541
I'm just not convinced that holding back is warranted.,Social Conversation,False,54,CONTRIBUTOR,False,False,False,0.1153846154,0.09677419355,1.0,0.6911196911,0.5547508363,0.4452491637,0.002831223282,0.01376817541
It would help a lot if we could get a JIT log for CODE with CODE.,Solution Discussion,True,65,CONTRIBUTOR,False,False,False,1.0,0.1720430108,0.5,0.694980695,0.558010435,0.441989565,0.01376817541,0.001749464716
i.e. CODE,Solution Discussion,True,9,CONTRIBUTOR,False,False,False,0.125,0.02150537634,1.0,0.6988416988,0.558010435,0.441989565,0.01376817541,0.001749464716
Does it still fail with the environment variable CODE?,Solution Discussion,True,54,CONTRIBUTOR,False,False,False,1.0,0.09677419355,1.0,0.7027027027,0.5584246186,0.4415753814,0.001749464716,0.0008281048336
To elaborate: VP transforms direct calls to CODE or CODE with a fixed-type object into a CODE followed by calls to CODE.,Solution Discussion,True,120,CONTRIBUTOR,False,False,False,0.323943662,0.247311828,0.3333333333,0.7065637066,0.5586206714,0.4413793286,0.0008281048336,0.009049469938
"I think this is incorrect when involuntary OSR is enabled (since neither the CODE nor the calls appear verbatim in the bytecode), but I don't see any existing logic to back off in that case

This transformation would probably be applied here because CODE is final, so we should have a fixed-type constraint for the receiver within CODE, and that method calls CODE via CODE, i.e. a direct call",Solution Discussion,True,394,CONTRIBUTOR,False,False,False,1.0,0.7634408602,0.6666666667,0.7104247104,0.5586206714,0.4413793286,0.0008281048336,0.009049469938
"If this is the bug, then I think it's been around for quite a while",Solution Discussion,False,67,CONTRIBUTOR,False,False,False,0.2112676056,0.1612903226,1.0,0.7142857143,0.5586206714,0.4413793286,0.0008281048336,0.009049469938
"There may be other optimizations such as this, e.g. string peepholes, that also may not be possible to do in the presence of involuntary OSR.",Solution Discussion,False,141,CONTRIBUTOR,False,False,False,0.5952380952,0.2688172043,0.5,0.7181467181,0.5607631223,0.4392368777,0.009049469938,0.004800769914
"But given that involuntary OSR is only used under debug (FSD compiles), it may be okay to disable such optimizations (performance under debug is anyway not expected to be close to the peak level, presently it is within 25-30% of peak).",Solution Discussion,False,235,CONTRIBUTOR,False,False,False,1.0,0.4516129032,1.0,0.722007722,0.5607631223,0.4392368777,0.009049469938,0.004800769914
"re https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-985077977:

> It would help a lot if we could get a JIT log for java/lang/invoke/MemberName.clone()Ljava/lang/invoke/MemberName; with traceOSR,traceFull.

**Logs:**
- [mylog.25697.90826.20211202.162026.25697.txt] URL 
- [osrtransitions.20211202.162026.25697.txt] URL 

re https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-985082138:

> Does it still fail with the environment variable TR_disableFastObjectClone=1?",Testing,False,510,CONTRIBUTOR,False,False,False,1.0,0.5161290323,0.3333333333,0.7258687259,0.5618996987,0.4381003013,0.004800769914,0.1957833797
"No, it consistently passes.",Testing,False,27,CONTRIBUTOR,False,False,False,0.08333333333,0.04301075269,0.6666666667,0.7297297297,0.5618996987,0.4381003013,0.004800769914,0.1957833797
0 failures in 100 runs.,Testing,False,23,CONTRIBUTOR,False,False,False,0.1041666667,0.05376344086,1.0,0.7335907336,0.5618996987,0.4381003013,0.004800769914,0.1957833797
"Does it still fail with the environment variable TR_disableFastObjectClone=1?
 
 No, it consistently passes.",Testing,False,110,CONTRIBUTOR,False,False,False,1.0,0.1505376344,0.25,0.7374517375,0.6082511737,0.3917488263,0.1957833797,0.007960250968
Great!,Social Conversation,False,6,CONTRIBUTOR,False,False,False,0.07142857143,0.01075268817,0.5,0.7413127413,0.6082511737,0.3917488263,0.1957833797,0.007960250968
"In that case, I think [this patch] URL  should fix the problem.",Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.9285714286,0.1397849462,0.75,0.7451737452,0.6082511737,0.3917488263,0.1957833797,0.007960250968
"Can you confirm, @babsingh?",Contribution and Commitment,False,27,CONTRIBUTOR,False,False,False,0.2857142857,0.04301075269,1.0,0.749034749,0.6082511737,0.3917488263,0.1957833797,0.007960250968
"While I am confident @jdmpapin has identified a real problem, how can we confirm that it is *the* problem we were after here?",Solution Discussion,False,125,CONTRIBUTOR,False,False,False,0.7931034483,0.247311828,0.3333333333,0.7528957529,0.6101357533,0.3898642467,0.007960250968,0.001063107557
Can we log some of the problematic methods to see if the transformation has occurred in them?,Solution Discussion,False,93,CONTRIBUTOR,False,False,False,0.5862068966,0.1827956989,0.6666666667,0.7567567568,0.6101357533,0.3898642467,0.007960250968,0.001063107557
"Tinkering with these command-line options has caused the problem to go into hiding before, so I just want to be sure that hasn't happened by disabling this feature.",Solution Discussion,False,164,CONTRIBUTOR,False,False,False,1.0,0.311827957,1.0,0.7606177606,0.6101357533,0.3898642467,0.007960250968,0.001063107557
"In that case, I think this patch should fix the problem.",Testing,False,56,CONTRIBUTOR,False,False,False,1.0,0.1182795699,0.25,0.7644787645,0.6103874427,0.3896125573,0.001063107557,0.0008616766512
The patch works.,Testing,False,16,CONTRIBUTOR,False,False,False,0.2727272727,0.03225806452,0.5,0.7683397683,0.6103874427,0.3896125573,0.001063107557,0.0008616766512
@EricYangIBM Can you validate my results for a firm confirmation?,Testing,False,65,CONTRIBUTOR,False,False,False,0.9090909091,0.1075268817,0.75,0.7722007722,0.6103874427,0.3896125573,0.001063107557,0.0008616766512
"Applying the patch:
CODE",Testing,True,25,CONTRIBUTOR,False,False,False,0.4545454545,0.05376344086,1.0,0.7760617761,0.6103874427,0.3896125573,0.001063107557,0.0008616766512
How can we confirm that it is the problem we were after here?,Solution Discussion,False,61,CONTRIBUTOR,False,False,False,0.4482758621,0.1397849462,0.5,0.7799227799,0.6105914436,0.3894085564,0.0008616766512,0.001283189472
"Can we log some of the problematic methods to see if the transformation has occurred in them?

Will the below option list collect the needed logs?
CODE",Solution Discussion,True,154,CONTRIBUTOR,False,False,False,1.0,0.311827957,1.0,0.7837837838,0.6105914436,0.3894085564,0.0008616766512,0.001283189472
"I think so, but in a build without the patch applied.",Solution Discussion,False,53,CONTRIBUTOR,False,False,False,0.5,0.1182795699,0.5,0.7876447876,0.6108952372,0.3891047628,0.001283189472,0.002338836625
"There are some deeper explorations needed across other optimizations as @vijaysun-omr suggested, though not necessarily as part of this particular fix.",Investigation and Exploration,False,151,CONTRIBUTOR,False,False,False,1.0,0.2365591398,1.0,0.7915057915,0.6108952372,0.3891047628,0.001283189472,0.002338836625
"mylog[...].txt from https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-985111499 shows:
CODE
The CODE and the two newly created calls all have CODE copied from the original call to CODE.",Testing,True,204,CONTRIBUTOR,False,False,False,0.5531914894,0.2795698925,0.3333333333,0.7953667954,0.6114489539,0.3885510461,0.002338836625,0.001335412299
"I believe all three of those trees can OSR—certainly the calls can, at least—but none of them can be expected to OSR correctly.",Solution Discussion,False,127,CONTRIBUTOR,False,False,False,0.5744680851,0.2903225806,0.6666666667,0.7992277992,0.6114489539,0.3885510461,0.002338836625,0.001335412299
"If we OSR incorrectly here, then we would expect this method to pick up with a bad state immediately after the CODE call, i.e. at the CODE, which is exactly what has been seen in the analysis above

Edit: This also explains why CODE wasn't called",Solution Discussion,True,248,CONTRIBUTOR,False,False,False,1.0,0.5053763441,1.0,0.8030888031,0.6114489539,0.3885510461,0.002338836625,0.001335412299
"Just running some testing, and I'll have a PR open soon",Task Progress,False,55,CONTRIBUTOR,False,False,False,1.0,0.1182795699,1.0,0.8069498069,0.6117651111,0.3882348889,0.001335412299,0.002708126618
"https://github.com/eclipse-openj9/openj9/issues/14014#issuecomment-985626197

Ran CODE and CODE and both passed",Solution Discussion,True,113,CONTRIBUTOR,True,False,False,1.0,0.09677419355,1.0,0.8108108108,0.6124062567,0.3875937433,0.002708126618,0.04747801046
"BTW, I took a look at string peepholes, and it seems it will already refuse to transform under involuntary OSR, though not as intentionally as we might like.",Solution Discussion,False,157,CONTRIBUTOR,False,False,False,0.3294117647,0.3010752688,0.1666666667,0.8146718147,0.6236466175,0.3763533825,0.04747801046,0.02028856842
"The patterns it's looking for start like so:
CODE
(though CODE and a few other constructor signatures are also accepted)

With involuntary OSR, the trees for this bytecode contain a store to a pending push temp because the CODE result (in its original stack slot) is live across the constructor call:
CODE
When string peepholes sees the CODE and starts looking for the pattern, it searches for the constructor call using CODE starting at the tree just after the CODE.",Solution Discussion,True,473,CONTRIBUTOR,False,False,False,1.0,0.9139784946,0.3333333333,0.8185328185,0.6236466175,0.3763533825,0.04747801046,0.02028856842
"In the above trees, that's the store to the pending push temp.",Solution Discussion,False,62,CONTRIBUTOR,False,False,False,0.1411764706,0.1290322581,0.5,0.8223938224,0.6236466175,0.3763533825,0.04747801046,0.02028856842
"It does not satisfy CODE (which only skips potential OSR point helper calls and some other nodes in post-execution OSR, which is all for voluntary OSR).",Solution Discussion,True,152,CONTRIBUTOR,False,False,False,0.3176470588,0.2903225806,0.6666666667,0.8262548263,0.6236466175,0.3763533825,0.04747801046,0.02028856842
"Then because the CODE node occurs within the CODE tree, CODE stops searching there, and it stops the search without setting CODE, preventing the transformation",Solution Discussion,True,159,CONTRIBUTOR,False,False,False,0.2941176471,0.2688172043,0.8333333333,0.8301158301,0.6236466175,0.3763533825,0.04747801046,0.02028856842
"So we shouldn't currently have this same bug for string peepholes, though IMO it would be an improvement to explicitly skip the attempt to find patterns and transform, e.g. here:
https://github.com/eclipse-openj9/openj9/blob/0f92184aec12c9963f3efd588a2f91ed258e287d/runtime/compiler/optimizer/StringPeepholes.cpp#L217-L223

FYI @vijaysun-omr, @0xdaryl",Solution Discussion,False,354,CONTRIBUTOR,False,False,False,0.4352941176,0.3978494624,1.0,0.833976834,0.6236466175,0.3763533825,0.04747801046,0.02028856842
"Similarly, CODE transformer expects to find the constructor call in the next tree after the CODE (possibly skipping an CODE, and possibly skipping some other nodes in post-execution OSR, which again is voluntary)",Solution Discussion,True,212,CONTRIBUTOR,False,False,False,1.0,0.3655913978,1.0,0.8378378378,0.6284499112,0.3715500888,0.02028856842,0.008046045613
Thanks @jdmpapin I agree it would be better to more explicitly avoid those kinds of transformations that change the program in ways that involuntary OSR may not be able to handle.,Social Conversation,False,179,CONTRIBUTOR,False,False,False,1.0,0.3333333333,0.5,0.8416988417,0.6303548026,0.3696451974,0.008046045613,0.8852104953
"I wonder if these transformations in the IL generator also fall in a similar category : 
https://github.com/eclipse-openj9/openj9/blob/5afc033b29efad4b23a171492e6fcb9460a78747/runtime/compiler/ilgen/Walker.cpp#L4374",Solution Discussion,False,216,CONTRIBUTOR,False,False,False,0.5483870968,0.1827956989,1.0,0.8455598456,0.6303548026,0.3696451974,0.008046045613,0.8852104953
Now that we understand the circumstances in which this problem occurs I don't believe this a blocker for 0.29.1 and can wait for the 0.30 release.,Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,1.0,0.2795698925,0.1111111111,0.8494208494,0.8399273015,0.1600726985,0.8852104953,0.004353145679
I recommend the fix (#14071) be merged into master and then subsequently merged into 0.30 when it is ready.,Action on Issue,False,107,CONTRIBUTOR,False,False,False,0.7307692308,0.2043010753,0.2222222222,0.8532818533,0.8399273015,0.1600726985,0.8852104953,0.004353145679
This is a long-standing problem that is not JDK17-specific.,Investigation and Exploration,False,59,CONTRIBUTOR,False,False,False,0.4230769231,0.1182795699,0.3333333333,0.8571428571,0.8399273015,0.1600726985,0.8852104953,0.004353145679
"It manifests itself when CODE calls are transformed to allocations by the JIT and an OSR is subsequently provoked during these ""artificial"" allocations.",Investigation and Exploration,True,152,CONTRIBUTOR,False,False,False,0.8846153846,0.247311828,0.4444444444,0.861003861,0.8399273015,0.1600726985,0.8852104953,0.004353145679
The problem can be triggered more readily through a carefully designed test case and JIT stress options.,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.6538461538,0.1827956989,0.5555555556,0.8648648649,0.8399273015,0.1600726985,0.8852104953,0.004353145679
Even with this test it has not appeared with default JIT options.,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,0.4615384615,0.1290322581,0.6666666667,0.8687258687,0.8399273015,0.1600726985,0.8852104953,0.004353145679
Exploration of other OSR problems with existing JIT optimizations will also be conducted in the background and contributed to the code base when ready.,Investigation and Exploration,False,151,CONTRIBUTOR,False,False,False,0.9230769231,0.2580645161,0.7777777778,0.8725868726,0.8399273015,0.1600726985,0.8852104953,0.004353145679
We are not aware of any known OSR problems from any of these other JIT optimizations.,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,0.6153846154,0.1720430108,0.8888888889,0.8764478764,0.8399273015,0.1600726985,0.8852104953,0.004353145679
@mstoodle @pshipton @DanHeidinga,Contribution and Commitment,False,32,CONTRIBUTOR,False,False,False,0.1153846154,0.03225806452,1.0,0.8803088803,0.8399273015,0.1600726985,0.8852104953,0.004353145679
"I agree with @0xdaryl 's analysis and suggested course of action, which suggests this issue can be removed from 0.29.1's milestone blockers https://github.com/eclipse-openj9/openj9/milestone/32 .",Social Conversation,False,195,CONTRIBUTOR,False,False,False,1.0,0.2365591398,0.3333333333,0.8841698842,0.8409579034,0.1590420966,0.004353145679,0.0215829485
"Thank you to everyone who contributed to understanding this issue, regardless of how we proceed here.",Social Conversation,False,101,CONTRIBUTOR,False,False,False,0.7272727273,0.1720430108,0.6666666667,0.888030888,0.8409579034,0.1590420966,0.004353145679,0.0215829485
Everyone worked hard to figure out the underlying problem and it showed great collaboration across teams as the investigation progressed!,Social Conversation,False,137,CONTRIBUTOR,False,False,False,0.9090909091,0.2150537634,1.0,0.8918918919,0.8409579034,0.1590420966,0.004353145679,0.0215829485
"Are the segfaults running rc021 in
https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_aarch64_linux_Nightly_testList_1/44
https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_ppc64le_linux_Nightly_testList_0/156
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_1/48/
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_0/49/
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_1/49/
this problem or a different problem?

Dec 7:
https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_aarch64_linux_Nightly_testList_1/46
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_0/50",Investigation and Exploration,False,874,CONTRIBUTOR,False,False,False,1.0,0.3225806452,1.0,0.8957528958,0.84606764,0.15393236,0.0215829485,0.007266433405
"The original problem was only seen in JDK17, Ill take a look at these ones to determine the cause",Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,1.0,0.2043010753,1.0,0.8996138996,0.8477879592,0.1522120408,0.007266433405,0.00290209712
"Similar failure observed at an internal JDK8 build CODE(CODE)
CODE",Testing,True,67,MEMBER,False,False,False,1.0,0.1182795699,1.0,0.9034749035,0.8484750271,0.1515249729,0.00290209712,0.005725859998
To confirm I understand the latest updates - the issue is with any call to clone() where the jit inlines the sequence directly that we later OSR out of?,Investigation and Exploration,False,152,MEMBER,False,False,False,1.0,0.3010752688,0.2857142857,0.9111969112,0.8498306174,0.1501693826,0.005725859998,0.01048932789
It applies to all current releases with OSR-enabled and could occur in any release in the field.,Investigation and Exploration,False,96,MEMBER,False,False,False,0.6428571429,0.1935483871,0.4285714286,0.9150579151,0.8498306174,0.1501693826,0.005725859998,0.01048932789
17 just happens to be where we found it.,Investigation and Exploration,False,40,MEMBER,False,False,False,0.3214285714,0.09677419355,0.5714285714,0.9189189189,0.8498306174,0.1501693826,0.005725859998,0.01048932789
"Assuming that's accurate, then the plan to move this out of the 0.29.1 release's list of blockers makes sense to me.",Social Conversation,False,116,MEMBER,False,False,False,0.75,0.2258064516,0.7142857143,0.9227799228,0.8498306174,0.1501693826,0.005725859998,0.01048932789
It's not specific to the 17 release and is already present in the field.,Investigation and Exploration,False,72,MEMBER,False,False,False,0.5,0.1505376344,0.8571428571,0.9266409266,0.8498306174,0.1501693826,0.005725859998,0.01048932789
A big +1 to this as well!,Social Conversation,False,25,MEMBER,False,False,False,0.25,0.0752688172,1.0,0.9305019305,0.8498306174,0.1501693826,0.005725859998,0.01048932789
Assuming that's accurate,Solution Discussion,False,24,CONTRIBUTOR,False,False,False,1.0,0.03225806452,0.5,0.9343629344,0.852313953,0.147686047,0.01048932789,0.2809961131
"Yes, that's accurate.",Solution Discussion,False,21,CONTRIBUTOR,False,False,False,1.0,0.03225806452,1.0,0.9382239382,0.852313953,0.147686047,0.01048932789,0.2809961131
"Are the segfaults running rc021 in
https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_aarch64_linux_Nightly_testList_1/44
https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_ppc64le_linux_Nightly_testList_0/156
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_1/48/
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_0/49/
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_1/49/
this problem or a different problem?

 Dec 7:
https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_aarch64_linux_Nightly_testList_1/46
https://openj9-jenkins.osuosl.org/job/Test_openjdk11_j9_extended.functional_aarch64_linux_Nightly_testList_0/50

I think its the same issue, there is a decompile right before the crash.",Testing,False,951,CONTRIBUTOR,False,False,False,1.0,0.4838709677,0.25,0.9420849421,0.9188394381,0.08116056195,0.2809961131,0.003058765602
"The crash is caused by a corrupt o-slot

We will exclude the test on PPC and arch64.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.4222222222,0.2043010753,0.5,0.9459459459,0.9188394381,0.08116056195,0.2809961131,0.003058765602
"Interestingly, I wasn't able to reproduce it on x86 jdk8/11.",Bug Reproduction,False,60,CONTRIBUTOR,False,False,False,0.2222222222,0.1075268817,0.75,0.9498069498,0.9188394381,0.08116056195,0.2809961131,0.003058765602
This is why we thought it was specific to jdk17 initially.,Observed Bug Behaviour,False,58,CONTRIBUTOR,False,False,False,0.2444444444,0.1182795699,1.0,0.9536679537,0.9188394381,0.08116056195,0.2809961131,0.003058765602
We will exclude the test on PPC and arch64.,Solution Discussion,False,43,CONTRIBUTOR,False,False,False,0.6,0.09677419355,0.2,0.9575289575,0.9195635971,0.08043640294,0.003058765602,0.2682425527
I don't think we should be excluding.,Solution Discussion,False,37,CONTRIBUTOR,False,False,False,0.4666666667,0.0752688172,0.4,0.9613899614,0.9195635971,0.08043640294,0.003058765602,0.2682425527
We've already merged a fix #14071.,Action on Issue,False,34,CONTRIBUTOR,False,False,False,0.4666666667,0.0752688172,0.6,0.9652509653,0.9195635971,0.08043640294,0.003058765602,0.2682425527
We should be removing the exclude for jdk17 if the problem has been resolved.,Solution Discussion,False,77,CONTRIBUTOR,False,False,False,0.9333333333,0.1505376344,0.8,0.9691119691,0.9195635971,0.08043640294,0.003058765602,0.2682425527
Also note that excluding the entire test rather than just rc021 could hide other issues.,Solution Discussion,False,88,CONTRIBUTOR,False,False,False,1.0,0.1612903226,1.0,0.972972973,0.9195635971,0.08043640294,0.003058765602,0.2682425527
"This is still failing although the build contains https://github.com/eclipse-openj9/openj9/pull/14071

https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_aarch64_linux_Nightly_testList_0/47/",Testing,False,216,CONTRIBUTOR,False,False,False,1.0,0.1182795699,1.0,0.9768339768,0.9830696924,0.01693030764,0.2682425527,0.007389530069
"This is still failing although the build contains #14071
 https://openj9-jenkins.osuosl.org/job/Test_openjdk8_j9_extended.functional_aarch64_linux_Nightly_testList_0/47/

@jdmpapin : can you take a look at the crash, at least to confirm whether it is or isn't related to the original problem?",Testing,False,295,CONTRIBUTOR,False,False,False,1.0,0.376344086,0.5,0.9806949807,0.9848191545,0.01518084546,0.007389530069,0.03826814184
If AArch64-specific I can farm it out for investigation.,Contribution and Commitment,False,56,CONTRIBUTOR,False,False,False,0.2857142857,0.1075268817,1.0,0.9845559846,0.9848191545,0.01518084546,0.007389530069,0.03826814184
"Comparing the output against the only prior failure I've found linked from this issue, which is from the initial comment https://github.com/eclipse-openj9/openj9/issues/14014#issue-1063735139

Within rc021, the original failure occurred in CODE:
CODE
The crash was in libj9vm29.so:
CODE",Investigation and Exploration,True,291,CONTRIBUTOR,False,False,False,0.5466666667,0.4408602151,0.5,0.9884169884,0.9938790902,0.006120909826,0.03826814184,0.02585402974
"And it indicated that there was a bad reference encountered in CODE:
CODE
On the other hand, in this more recent failed test, CODE ran to completion, and the crash occurred during CODE, in libjclse29.so, and without any output complaining of a bad reference or mentioning a CODE method
CODE
With these differences and the fact that the more recent failure happened despite #14071, I'm pretty sure it's a distinct bug",Investigation and Exploration,True,420,CONTRIBUTOR,False,False,False,1.0,0.8064516129,1.0,0.9922779923,0.9938790902,0.006120909826,0.03826814184,0.02585402974
We can close this one once https://github.com/eclipse-openj9/openj9/pull/14105 is merged.,Action on Issue,False,89,CONTRIBUTOR,False,False,True,1.0,0.09677419355,1.0,1.0,1.0,0.0,0.02585402974,0.0
jdk15+36: java/foreign/TestMismatch.java.TestMismatch J9 Crash,Observed Bug Behaviour,False,62,CONTRIBUTOR,True,True,False,0.2222222222,0.170212766,0.25,0.003846153846,0.0,1.0,0.0,0.002175337965
"Failure link
------------
https://ci.adoptopenjdk.net/job/Test_openjdk15_j9_sanity.openjdk_ppc64le_linux/43/consoleFull
java/foreign/TestMismatch.java
Fails on platforms: Platforms: pLinux, xLinuxXL

Optional info
-------------
- intermittent failure (yes|no): possibly
- regression or new test:  Regression
-",Testing,False,319,CONTRIBUTOR,True,True,False,1.0,0.7659574468,0.5,0.007692307692,0.0,1.0,0.0,0.002175337965
"if regression, what are the last passing / first failing public SHAs (OpenJ9, OMR, JCL) :",Testing,False,89,CONTRIBUTOR,True,True,False,0.3888888889,0.2978723404,0.75,0.01153846154,0.0,1.0,0.0,0.002175337965
"Failure output (captured from console output)
---------------------------------------------
CODE",Testing,True,98,CONTRIBUTOR,True,True,False,0.2777777778,0.2127659574,1.0,0.01538461538,0.0,1.0,0.0,0.002175337965
It appears https://github.com/eclipse/openj9/issues/10580 with different error output.,Testing,False,86,MEMBER,False,False,False,1.0,0.1489361702,1.0,0.01923076923,0.0003970034597,0.9996029965,0.002175337965,0.006689164241
"Compiled_method=jdk/internal/foreign/NativeMemorySegmentImpl.makeNativeSegment(JJ)Ljdk/incubator/foreign/MemorySegment;

fyi @andrewcraik",Contribution and Commitment,False,139,MEMBER,False,False,False,1.0,0.2340425532,1.0,0.02307692308,0.001617789098,0.9983822109,0.006689164241,0.0003091269739
We need a stop-ship determination on this issue.,Investigation and Exploration,False,48,MEMBER,False,False,False,0.2647058824,0.1914893617,0.5,0.02692307692,0.001674205379,0.9983257946,0.0003091269739,0.001010387239
"Given the crash is in java.foreign package which I believe is still in preview, I don't think will be but we should still look at the crash to be sure it's a broader issue",Investigation and Exploration,False,171,MEMBER,False,False,False,1.0,0.7234042553,1.0,0.03076923077,0.001674205379,0.9983257946,0.0003091269739,0.001010387239
@liqunl sorry to interrupt your dev work but could you take a look as this is lined up against the release that will be going out imminently.,Contribution and Commitment,False,141,CONTRIBUTOR,False,False,False,1.0,0.5744680851,1.0,0.03461538462,0.001858603039,0.998141397,0.001010387239,0.00295674226
@andrew-m-leonard @llxia What should be the target if I want to rerun the failed test?,Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,1.0,0.3617021277,1.0,0.03846153846,0.00239821432,0.9976017857,0.00295674226,0.0001574257737
"@andrew-m-leonard You mentioned the test also failed on xlinux, could you provide the link to the x86 failure?",Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,1.0,0.4255319149,1.0,0.04230769231,0.002426944834,0.9975730552,0.0001574257737,0.005864825644
#10580 is a failure in the same test and it has a link to rerun the test with target CODE.,Investigation and Exploration,True,90,CONTRIBUTOR,False,False,False,1.0,0.4255319149,0.25,0.04615384615,0.003497287056,0.9965027129,0.005864825644,0.0004608281741
"20 iterations
https://ci.adoptopenjdk.net/job/Grinder/3856/

But it failed.",Testing,False,78,CONTRIBUTOR,False,False,False,0.4,0.170212766,0.5,0.05,0.003497287056,0.9965027129,0.005864825644,0.0004608281741
@rpshukla Could you help with the grinder?,Testing,False,42,CONTRIBUTOR,False,False,False,0.35,0.1489361702,0.75,0.05384615385,0.003497287056,0.9965027129,0.005864825644,0.0004608281741
"I don't know why my grinder failed, maybe something's wrong in my configuration?",Social Conversation,False,80,CONTRIBUTOR,False,False,False,0.65,0.2765957447,1.0,0.05769230769,0.003497287056,0.9965027129,0.005864825644,0.0004608281741
xLinux: https://ci.adoptopenjdk.net/job/Test_openjdk15_j9_sanity.openjdk_x86-64_linux_xl/41/console,Investigation and Exploration,False,99,CONTRIBUTOR,True,False,False,1.0,0.04255319149,1.0,0.06153846154,0.003581389105,0.9964186109,0.0004608281741,0.001943492734
@liqunl i've just kicked off a Grinder on xLinux for just the TestMissmatch test here: https://ci.adoptopenjdk.net/job/Grinder/3859/console,Testing,False,139,CONTRIBUTOR,True,False,False,1.0,0.3617021277,1.0,0.06538461538,0.003936080354,0.9960639196,0.001943492734,0.0003892710042
"@liqunl fyi, the ""Rerun Grinder"" links rarely work as-is, as they typically point at the ""upstream"" job artifact, which by the time you run the grinder has dissappeared!",Investigation and Exploration,False,169,CONTRIBUTOR,True,False,False,1.0,0.6170212766,0.5,0.06923076923,0.004007123078,0.9959928769,0.0003892710042,0.001399658243
"I change it to use ""customized"" and point SDK_URL at the required github binary",Task Progress,False,79,CONTRIBUTOR,True,False,False,0.4827586207,0.2978723404,1.0,0.07307692308,0.004007123078,0.9959928769,0.0003892710042,0.001399658243
"I started another plinux grinder using CUSTOMIZED_SDK_URL instead of UPSTREAM_JOB_NAME
https://ci.adoptopenjdk.net/job/Grinder/3861/",Testing,False,133,CONTRIBUTOR,False,False,False,1.0,0.2553191489,1.0,0.07692307692,0.004262563462,0.9957374365,0.001399658243,0.005529938089
"Looked at the xlinuxXL failure, the error message is the same as #10580, which is 
CODE
So the crash is only seen on ppcle.",Investigation and Exploration,True,125,CONTRIBUTOR,False,False,False,1.0,0.5531914894,0.5,0.08076923077,0.005271788046,0.994728212,0.005529938089,0.002175337965
FYI @gita-omr,Contribution and Commitment,False,13,CONTRIBUTOR,False,False,False,0.1153846154,0.06382978723,1.0,0.08461538462,0.005271788046,0.994728212,0.005529938089,0.002175337965
@AlenBadel could you kindly take a look?,Contribution and Commitment,False,40,CONTRIBUTOR,False,False,False,1.0,0.1489361702,1.0,0.08846153846,0.005668791506,0.9943312085,0.002175337965,0.234046329
Failure rate on my side is between 1/10 and 1/20.,Observed Bug Behaviour,False,49,CONTRIBUTOR,False,False,False,0.2127659574,0.2127659574,0.25,0.09230769231,0.04838270716,0.9516172928,0.234046329,0.001299478205
"Given the crash is in java.foreign package which I believe is still in preview, I don't think will be but we should still look at the crash to be sure it's a broader issue

java.foreign was bundled with OpenJDK and Oracle builds starting with Java 14.",Investigation and Exploration,False,253,CONTRIBUTOR,False,False,False,1.0,1.0,0.5,0.09615384615,0.04838270716,0.9516172928,0.234046329,0.001299478205
I understand J9 may not be in total sync with package support (i.e javafx).,Investigation and Exploration,False,75,CONTRIBUTOR,False,False,False,0.2978723404,0.2978723404,0.75,0.1,0.04838270716,0.9516172928,0.234046329,0.001299478205
Is foreign bundled with J9 Java 14 builds?,Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.170212766,0.170212766,1.0,0.1038461538,0.04838270716,0.9516172928,0.234046329,0.001299478205
"Foreign is still incubator status for Java 15, but it is included.
https://openjdk.java.net/jeps/383",Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,1.0,0.2978723404,1.0,0.1076923077,0.04861986449,0.9513801355,0.001299478205,0.01613471067
It looks like the foreign package is also included in J9 Java 14 builds.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.8235294118,0.2978723404,0.25,0.1115384615,0.05156448094,0.9484355191,0.01613471067,0.05286071254
"I ran it with the latest Java 14 release, and was not able to reproduce the failure.",Bug Reproduction,False,84,CONTRIBUTOR,False,False,False,1.0,0.3617021277,0.5,0.1153846154,0.05156448094,0.9484355191,0.01613471067,0.05286071254
This suggests that this is a recent regression.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.4705882353,0.170212766,0.75,0.1192307692,0.05156448094,0.9484355191,0.01613471067,0.05286071254
"I'm still actively attempting to open the core file, and analyzing the failure.",Task Progress,False,79,CONTRIBUTOR,False,False,False,0.7647058824,0.2765957447,1.0,0.1230769231,0.05156448094,0.9484355191,0.01613471067,0.05286071254
I'm afraid that the core files are not readable on my end.,Social Conversation,False,58,CONTRIBUTOR,False,False,False,0.4,0.2553191489,0.3333333333,0.1269230769,0.06121166501,0.938788335,0.05286071254,0.04938589637
"I've even tried to add CODE in order to get more core context and that causes EOF issues with the test, none of the iterations have crashed using CODE.",Task Progress,True,151,CONTRIBUTOR,False,False,False,1.0,0.6382978723,0.6666666667,0.1307692308,0.06121166501,0.938788335,0.05286071254,0.04938589637
"Continuing my investigation by attempting to increase the reproducibility, so that I can reliably get this test to fail locally.",Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,0.6666666667,0.4255319149,1.0,0.1346153846,0.06121166501,0.938788335,0.05286071254,0.04938589637
I'm guessing the core file(s) aren't readable because you need the jextract data from the machine that produced the core file.,Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,1.0,0.4468085106,0.3333333333,0.1384615385,0.07022468829,0.9297753117,0.04938589637,0.1311728793
If it's reproducible on an OpenJ9 or internal jenkins machine we can get that.,Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.6666666667,0.2978723404,0.6666666667,0.1423076923,0.07022468829,0.9297753117,0.04938589637,0.1311728793
"If it's only reproducible at Adopt, someone with access to those machines could run jextract.",Observed Bug Behaviour,False,93,CONTRIBUTOR,False,False,False,0.7142857143,0.3191489362,1.0,0.1461538462,0.07022468829,0.9297753117,0.04938589637,0.1311728793
This is considered stop-ship until we have a core file and can evaluate the cause and frequency,Investigation and Exploration,False,95,MEMBER,False,False,False,1.0,0.3829787234,1.0,0.15,0.09416399691,0.9058360031,0.1311728793,0.05832768032
"It's reproducible on internal jenkins machine, failure rate seems to be 4/12 on nightly build.",Observed Bug Behaviour,False,94,CONTRIBUTOR,False,False,False,1.0,0.3191489362,0.25,0.1538461538,0.1048089134,0.8951910866,0.05832768032,0.01345561023
Also saw crash in compiled method CODE,Observed Bug Behaviour,True,38,CONTRIBUTOR,False,False,False,0.4666666667,0.1489361702,0.5,0.1576923077,0.1048089134,0.8951910866,0.05832768032,0.01345561023
"The following grinder is to reproduce the timeout, and it hasn't finished yet.",Bug Reproduction,False,78,CONTRIBUTOR,False,False,False,0.8666666667,0.2765957447,0.75,0.1615384615,0.1048089134,0.8951910866,0.05832768032,0.01345561023
https://hyc-runtimes-jenkins.swg-devops.com/job/Grinder/10355,Bug Reproduction,False,61,CONTRIBUTOR,False,False,False,0.06666666667,0.02127659574,1.0,0.1653846154,0.1048089134,0.8951910866,0.05832768032,0.01345561023
I was able to reproduce this locally on one of our internal farm machines.,Bug Reproduction,False,74,CONTRIBUTOR,False,False,False,0.6086956522,0.2978723404,0.1666666667,0.1692307692,0.1072645887,0.8927354113,0.01345561023,0.009663080221
Failing at a rate of 100% on this particular machine.,Bug Reproduction,False,53,CONTRIBUTOR,False,False,False,0.4347826087,0.2127659574,0.3333333333,0.1730769231,0.1072645887,0.8927354113,0.01345561023,0.009663080221
jextract can't find the libraries unfortunately.,Investigation and Exploration,False,48,CONTRIBUTOR,False,False,False,0.2608695652,0.1276595745,0.5,0.1769230769,0.1072645887,0.8927354113,0.01345561023,0.009663080221
"GDB, as well as our internal debugging tools are not able to load the libraries even when given the prefix, and absolute path.",Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,1.0,0.4893617021,0.6666666667,0.1807692308,0.1072645887,0.8927354113,0.01345561023,0.009663080221
"CODE

I've also tried to generate a trace file, without any luck.",Task Progress,True,67,CONTRIBUTOR,False,False,False,0.6086956522,0.2978723404,0.8333333333,0.1846153846,0.1072645887,0.8927354113,0.01345561023,0.009663080221
I'll attempt to run this workload with gdb to get a snapshot of where we're crashing.,Task Progress,False,85,CONTRIBUTOR,False,False,False,0.6956521739,0.3404255319,1.0,0.1884615385,0.1072645887,0.8927354113,0.01345561023,0.009663080221
"The jextract problem may be related to https://github.com/eclipse/openj9/issues/9549, for which we have a PR under review.",Investigation and Exploration,False,122,CONTRIBUTOR,False,False,False,1.0,0.3404255319,0.3333333333,0.1923076923,0.1090281199,0.8909718801,0.009663080221,0.009602972199
"@keithc-ca 

Although it makes no sense that GDB doesn't work.",Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.75,0.2553191489,0.6666666667,0.1961538462,0.1090281199,0.8909718801,0.009663080221,0.009602972199
Perhaps it needs to be updated.,Investigation and Exploration,False,31,CONTRIBUTOR,False,False,False,0.375,0.1276595745,1.0,0.2,0.1090281199,0.8909718801,0.009663080221,0.009602972199
"The jextract problem may be related to #9549, for which we have a PR under review.",Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,0.4210526316,0.3404255319,0.125,0.2038461538,0.1107806812,0.8892193188,0.009602972199,0.01857337902
"@keithc-ca

Thanks.",Investigation and Exploration,False,21,CONTRIBUTOR,False,False,False,0.1052631579,0.08510638298,0.25,0.2076923077,0.1107806812,0.8892193188,0.009602972199,0.01857337902
I'll give the build a try to see if it addresses my issue.,Task Progress,False,58,CONTRIBUTOR,False,False,False,0.3421052632,0.2765957447,0.375,0.2115384615,0.1107806812,0.8892193188,0.009602972199,0.01857337902
Although it makes no sense that GDB doesn't work.,Investigation and Exploration,False,49,CONTRIBUTOR,False,False,False,0.2368421053,0.1914893617,0.625,0.2192307692,0.1107806812,0.8892193188,0.009602972199,0.01857337902
"I'm currently using GDB 8.2, which is older.",Task Progress,False,44,CONTRIBUTOR,False,False,False,0.2105263158,0.170212766,0.75,0.2230769231,0.1107806812,0.8892193188,0.009602972199,0.01857337902
However it's the most current available build given the OS I'm using is ubuntu 16.04.,Task Progress,False,85,CONTRIBUTOR,False,False,False,0.3947368421,0.3191489362,0.875,0.2269230769,0.1107806812,0.8892193188,0.009602972199,0.01857337902
"I'm just shooting in the dark here, but I wonder if I can get this to reproduce on a newer OS, there might be a bug with some of these older c libraries and runtimes; specially on PPC64LE.",Investigation and Exploration,False,188,CONTRIBUTOR,False,False,False,1.0,0.8085106383,1.0,0.2307692308,0.1107806812,0.8892193188,0.009602972199,0.01857337902
"I vaguely remember having trouble with gdb 8 and needing to use gdb 7. There's a copy for x86-64 in /team/keithc/gdb-7, but, unfortunately, I don't know where to find gdb 7 for ppc64le.",Social Conversation,False,185,CONTRIBUTOR,False,False,False,1.0,0.7659574468,1.0,0.2346153846,0.1141703594,0.8858296406,0.01857337902,0.0002203960832
In a turn of events.,Social Conversation,False,20,CONTRIBUTOR,False,False,False,0.1282051282,0.1063829787,0.25,0.2384615385,0.1142105821,0.8857894179,0.0002203960832,0.005424033477
This OpenJ9 JDK15 nightly is now starting to hang during a simple CODE on the same machine.,Social Conversation,True,91,CONTRIBUTOR,False,False,False,0.4358974359,0.3617021277,0.5,0.2423076923,0.1142105821,0.8857894179,0.0002203960832,0.005424033477
Also hangs with CODE.,Investigation and Exploration,True,21,CONTRIBUTOR,False,False,False,0.1025641026,0.08510638298,0.75,0.2461538462,0.1142105821,0.8857894179,0.0002203960832,0.005424033477
"Point where it's hanging:
Stack Trace of all three threads

CODE

CODE

CODE

Safe to assume that the second thread is waiting on the third thread, and that thread is hanging somewhere in libc.",Investigation and Exploration,True,202,CONTRIBUTOR,False,False,False,1.0,0.829787234,1.0,0.25,0.1142105821,0.8857894179,0.0002203960832,0.005424033477
Looks to be hanging only on Non XL releases of PPC64LE JDK15.,Investigation and Exploration,False,61,CONTRIBUTOR,False,False,False,0.6,0.2553191489,0.3333333333,0.2538461538,0.1152004789,0.8847995211,0.005424033477,0.1326211964
Works on the JDK14 equivalent.,Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,0.25,0.1063829787,0.6666666667,0.2576923077,0.1152004789,0.8847995211,0.005424033477,0.1326211964
"I went back all the way to the first nightly of ppc64le JDK15 on adoptopenjdk, and they all hang similarly.",Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,1.0,0.4255319149,1.0,0.2615384615,0.1152004789,0.8847995211,0.005424033477,0.1326211964
Which nightly build are you using?,Social Conversation,False,34,CONTRIBUTOR,False,False,False,0.1935483871,0.1276595745,0.5,0.2653846154,0.1394041083,0.8605958917,0.1326211964,0.006159641184
"I don't have that problem with the latest nightly from adoptopenjdk.net:
CODE
And using that as the boot jdk, I was able to produce a local build:
CODE",Investigation and Exploration,True,154,CONTRIBUTOR,False,False,False,1.0,0.6595744681,1.0,0.2692307692,0.1394041083,0.8605958917,0.1326211964,0.006159641184
@AlenBadel there is a grinder in https://github.com/eclipse/openj9/issues/10580#issuecomment-694222270 which crashed 3/20 on a rhel7 machine.,Investigation and Exploration,False,141,CONTRIBUTOR,False,False,False,1.0,0.2978723404,0.3333333333,0.2730769231,0.1405282549,0.8594717451,0.006159641184,0.02092045419
Does that help?,Social Conversation,False,15,CONTRIBUTOR,False,False,False,0.2142857143,0.06382978723,0.6666666667,0.2769230769,0.1405282549,0.8594717451,0.006159641184,0.02092045419
Perhaps these cores will be readable or gdb is working on rhel7.,Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.8571428571,0.2553191489,1.0,0.2807692308,0.1405282549,0.8594717451,0.006159641184,0.02092045419
I was able to get a stack trace for this crash.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,1.0,0.2340425532,0.5,0.2846153846,0.144346279,0.855653721,0.02092045419,0.9710937657
"Investigating further.
CODE",Investigation and Exploration,True,28,CONTRIBUTOR,False,False,False,0.3636363636,0.08510638298,1.0,0.2884615385,0.144346279,0.855653721,0.02092045419,0.9710937657
"The stack trace above is certainly not related to the crash within the compiled method
CODE.",Investigation and Exploration,True,93,CONTRIBUTOR,False,False,False,0.5666666667,0.3617021277,0.1111111111,0.2923076923,0.3215728023,0.6784271977,0.9710937657,0.01822418003
We're seeing this mainly on systems that are resource starved.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.3333333333,0.2127659574,0.2222222222,0.2961538462,0.3215728023,0.6784271977,0.9710937657,0.01822418003
As is I have not been able to reproduce this on any baremetal machines or Power VMs with more than 8GB of Ram.,Bug Reproduction,False,110,CONTRIBUTOR,False,False,False,0.8,0.5106382979,0.3333333333,0.3,0.3215728023,0.6784271977,0.9710937657,0.01822418003
"However, running with CODE will allow the test to fail with certainty on almost any Power machine.",Bug Reproduction,True,98,CONTRIBUTOR,False,False,False,0.5666666667,0.3617021277,0.4444444444,0.3038461538,0.3215728023,0.6784271977,0.9710937657,0.01822418003
Obtaining a core file has been quite difficult.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.2666666667,0.170212766,0.5555555556,0.3076923077,0.3215728023,0.6784271977,0.9710937657,0.01822418003
"The core file that is produced is never saved on disk, no matter what machine I've ran it on.",Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,0.6666666667,0.4255319149,0.6666666667,0.3115384615,0.3215728023,0.6784271977,0.9710937657,0.01822418003
I've also verified the ulimit values to be acceptable to produce a core file.,Investigation and Exploration,False,77,CONTRIBUTOR,False,False,False,0.5,0.3191489362,0.7777777778,0.3153846154,0.3215728023,0.6784271977,0.9710937657,0.01822418003
GDB also does not break upon segmentation.,Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.2333333333,0.1489361702,0.8888888889,0.3192307692,0.3215728023,0.6784271977,0.9710937657,0.01822418003
"Currently, I'm working on isolating and producing a trace of the compiled method we're crashing in, once that is done I hope to have a genuine core and stack trace.",Task Progress,False,164,CONTRIBUTOR,False,False,False,1.0,0.6382978723,1.0,0.3230769231,0.3215728023,0.6784271977,0.9710937657,0.01822418003
I would note CODE is a bit of a weird stress mode because nothing will be resolved at compile-time.,Investigation and Exploration,True,99,CONTRIBUTOR,False,False,False,0.8,0.4255319149,0.3333333333,0.3269230769,0.3248987511,0.6751012489,0.01822418003,0.04520695765
It also forces the JIT to do synchronous compilation.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.36,0.1914893617,0.6666666667,0.3307692308,0.3248987511,0.6751012489,0.01822418003,0.04520695765
It would be good to know if the synchronous compilation that is important or the super low count and does it also fail with CODE?,Investigation and Exploration,True,129,CONTRIBUTOR,False,False,False,1.0,0.5319148936,1.0,0.3346153846,0.3248987511,0.6751012489,0.01822418003,0.04520695765
"On the machine with ample resources, the crash does not appear with CODE.",Solution Discussion,True,73,CONTRIBUTOR,False,False,False,0.5652173913,0.2765957447,0.5,0.3423076923,0.3331491098,0.6668508902,0.04520695765,0.0003119892607
I'm attempting the same test on one of the machines that produces the failure under normal circumstances.,Testing,False,105,CONTRIBUTOR,False,False,False,0.7391304348,0.3617021277,0.75,0.3461538462,0.3331491098,0.6668508902,0.04520695765,0.0003119892607
"The state of the machine I was using has changed, so I'll be running a Grinder to verify the result on other machines.",Investigation and Exploration,False,118,CONTRIBUTOR,False,False,False,1.0,0.4893617021,1.0,0.35,0.3331491098,0.6668508902,0.04520695765,0.0003119892607
"If count=0 makes it fail in exactly the same way as described when the defect was opened, e.g. crash in:

Compiled_method=jdk/internal/foreign/NativeMemorySegmentImpl.makeNativeSegment(JJ)Ljdk/incubator/foreign/MemorySegment;

then I think it would be ok to stick to count=0 and try to debug that.",Investigation and Exploration,False,301,CONTRIBUTOR,False,False,False,1.0,0.9787234043,0.3333333333,0.3538461538,0.3332060485,0.6667939515,0.0003119892607,0.001565670877
As I understand @AlenBadel managed to make it fail consistently that way.,Social Conversation,False,73,CONTRIBUTOR,False,False,False,0.2608695652,0.2553191489,0.6666666667,0.3576923077,0.3332060485,0.6667939515,0.0003119892607,0.001565670877
And this a native method btw.,Investigation and Exploration,False,29,CONTRIBUTOR,False,False,False,0.1304347826,0.1276595745,1.0,0.3615384615,0.3332060485,0.6667939515,0.0003119892607,0.001565670877
Unless we are trying to determine the severity of this defect...,Social Conversation,False,64,CONTRIBUTOR,False,False,False,1.0,0.2340425532,1.0,0.3653846154,0.3334917865,0.6665082135,0.001565670877,0.1462886158
I think the above was both to verify if the crash was specific to count=0 and to assess severity.,Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,0.8260869565,0.4042553191,0.2,0.3692307692,0.3601897468,0.6398102532,0.1462886158,0.02184783511
Looking at the most recent backtrace from Alen I see: CODE under the Unsafe API - seems like we are failing to allocate memory?,Investigation and Exploration,True,127,CONTRIBUTOR,False,False,False,1.0,0.4893617021,0.4,0.3730769231,0.3601897468,0.6398102532,0.1462886158,0.02184783511
Is this just a resource exhaustion issue?,Investigation and Exploration,False,41,CONTRIBUTOR,False,False,False,0.3043478261,0.1489361702,0.6,0.3769230769,0.3601897468,0.6398102532,0.1462886158,0.02184783511
Is the test running single threaded or are there multiple things running on the machine?,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.652173913,0.3191489362,0.8,0.3807692308,0.3601897468,0.6398102532,0.1462886158,0.02184783511
That kind of error could be something like being unable to grow the stack or unable to satisfy a native memory request...,Investigation and Exploration,False,121,CONTRIBUTOR,False,False,False,0.9565217391,0.4680851064,1.0,0.3846153846,0.3601897468,0.6398102532,0.1462886158,0.02184783511
seems like we are failing to allocate memory?,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.3333333333,0.170212766,0.1428571429,0.3884615385,0.3641770197,0.6358229803,0.02184783511,0.004874474413
"Yes, as I've mentioned I've only been able to reproduce this bug under normal conditions on a system with very constrained resources.",Bug Reproduction,False,133,CONTRIBUTOR,False,False,False,1.0,0.5106382979,0.2857142857,0.3923076923,0.3641770197,0.6358229803,0.02184783511,0.004874474413
We're talking about 8GB provisioned PowerVMs on a heavily cached system.,Social Conversation,False,72,CONTRIBUTOR,False,False,False,0.5,0.2553191489,0.4285714286,0.3961538462,0.3641770197,0.6358229803,0.02184783511,0.004874474413
"I have not been able to reproduce this upon restarting and dropping these caches, as well as on any larger systems.",Bug Reproduction,False,115,CONTRIBUTOR,False,False,False,0.875,0.4468085106,0.5714285714,0.4,0.3641770197,0.6358229803,0.02184783511,0.004874474413
I.e a 32GB PowerVM or a baremetal.,Bug Reproduction,False,34,CONTRIBUTOR,False,False,False,0.3333333333,0.170212766,0.7142857143,0.4038461538,0.3641770197,0.6358229803,0.02184783511,0.004874474413
The tests for the most part are single threaded.,Testing,False,48,CONTRIBUTOR,False,False,False,0.375,0.1914893617,0.8571428571,0.4076923077,0.3641770197,0.6358229803,0.02184783511,0.004874474413
At most it will create a worker thread to conduct a test and waits for it to finish.,Testing,False,84,CONTRIBUTOR,False,False,False,0.75,0.3829787234,1.0,0.4115384615,0.3641770197,0.6358229803,0.02184783511,0.004874474413
Does it fail with the same setNativeOutOfMemoryError issue?,Investigation and Exploration,False,59,CONTRIBUTOR,False,False,False,1.0,0.170212766,1.0,0.4153846154,0.3650666208,0.6349333792,0.004874474413,0.002719172456
"In any case, I guess we should look into how to exist gracefully (throwing Java exception)  from setNativeOutOfMemoryError when resources are limited.",Investigation and Exploration,False,150,CONTRIBUTOR,False,False,False,1.0,0.4893617021,1.0,0.4192307692,0.3655628752,0.6344371248,0.002719172456,0.01937481932
"After a discussion in Slack, this has been determined not a stop ship issue for the 0.22 release.",Action on Issue,False,97,CONTRIBUTOR,False,False,False,0.8181818182,0.3829787234,0.3333333333,0.4230769231,0.3690988178,0.6309011822,0.01937481932,0.007316005049
The 0.22 release has been finalized and this issue is moved to the 0.23 release for which we've already branched.,Action on Issue,False,113,CONTRIBUTOR,False,False,False,0.9545454545,0.4468085106,0.6666666667,0.4269230769,0.3690988178,0.6309011822,0.01937481932,0.007316005049
The work to fix it should continue at the same priority so we have a fix by Oct 2 for 0.23 M2.,Social Conversation,False,94,CONTRIBUTOR,False,False,False,1.0,0.4680851064,1.0,0.4307692308,0.3690988178,0.6309011822,0.01937481932,0.007316005049
"Does it fail with the same setNativeOutOfMemoryError issue?

To summarize:

**Running the test as-is (Without Overriding JVM Options) on a resource constraint system**
- The test will fail with the segmentation fault we're seeing.",Investigation and Exploration,False,235,CONTRIBUTOR,False,False,False,1.0,0.7872340426,0.1,0.4346153846,0.3704340031,0.6295659969,0.007316005049,0.001912007579
The core file is not saved on disk.,Investigation and Exploration,False,35,CONTRIBUTOR,False,False,False,0.2162162162,0.170212766,0.2,0.4384615385,0.3704340031,0.6295659969,0.007316005049,0.001912007579
"- An additional core file may be saved to disk with the CODE, this core is not a dump of the thread that encountered the segmentation fault.",Investigation and Exploration,True,140,CONTRIBUTOR,False,False,False,0.7027027027,0.5531914894,0.3,0.4423076923,0.3704340031,0.6295659969,0.007316005049,0.001912007579
I'm unsure of the origins of this core.,Social Conversation,False,39,CONTRIBUTOR,False,False,False,0.2162162162,0.170212766,0.4,0.4461538462,0.3704340031,0.6295659969,0.007316005049,0.001912007579
**Running the test as-is on a system with ample resources**,Testing,False,59,CONTRIBUTOR,False,False,False,0.2972972973,0.2340425532,0.5,0.45,0.3704340031,0.6295659969,0.007316005049,0.001912007579
- The test passes.,Testing,False,18,CONTRIBUTOR,False,False,False,0.08108108108,0.06382978723,0.6,0.4538461538,0.3704340031,0.6295659969,0.007316005049,0.001912007579
No core files produced.,Investigation and Exploration,False,23,CONTRIBUTOR,False,False,False,0.1081081081,0.08510638298,0.7,0.4576923077,0.3704340031,0.6295659969,0.007316005049,0.001912007579
"**Running the test with CODE on a system with ample resources**
- A segmentation fault in the same compiled method occurs.",Testing,True,123,CONTRIBUTOR,False,False,False,0.5675675676,0.4468085106,0.8,0.4615384615,0.3704340031,0.6295659969,0.007316005049,0.001912007579
- No additional core files produced.,Investigation and Exploration,False,36,CONTRIBUTOR,False,False,False,0.1351351351,0.1063829787,0.9,0.4653846154,0.3704340031,0.6295659969,0.007316005049,0.001912007579
"**Running the test with CODE on a system with ample resources**
- The test passes.",Testing,True,83,CONTRIBUTOR,False,False,False,0.4054054054,0.3191489362,1.0,0.4692307692,0.3704340031,0.6295659969,0.007316005049,0.001912007579
Thanks for the summary.,Social Conversation,False,23,CONTRIBUTOR,False,False,False,0.3333333333,0.08510638298,0.25,0.4730769231,0.3707829483,0.6292170517,0.001912007579,0.2098027598
I would propose to focus on *,Social Conversation,False,29,CONTRIBUTOR,False,False,False,0.5,0.1276595745,0.5,0.4769230769,0.3707829483,0.6292170517,0.001912007579,0.2098027598
*Running the test with -Xjit:count=0 on a system with ample resources**,Investigation and Exploration,False,71,CONTRIBUTOR,False,False,False,1.0,0.2553191489,0.75,0.4807692308,0.3707829483,0.6292170517,0.001912007579,0.2098027598
but I am open to other suggestions.,Social Conversation,False,35,CONTRIBUTOR,False,False,False,0.5833333333,0.1489361702,1.0,0.4846153846,0.3707829483,0.6292170517,0.001912007579,0.2098027598
"https://ci.eclipse.org/openj9/job/Test_openjdk15_j9_sanity.openjdk_ppc64le_linux_Nightly/55
CODE",Testing,True,97,CONTRIBUTOR,False,False,False,1.0,0.06382978723,1.0,0.4884615385,0.4090723649,0.5909276351,0.2098027598,0.003809703725
"The latest crash is worse: the handler crashed:
CODE",Testing,True,53,CONTRIBUTOR,False,False,False,1.0,0.2127659574,1.0,0.4923076923,0.4097676433,0.5902323567,0.003809703725,0.01939485533
"The latest crash is worse: the handler crashed:
 
 CODE

Right.",Testing,True,67,CONTRIBUTOR,False,False,False,0.6,0.2553191489,0.5,0.4961538462,0.4133072425,0.5866927575,0.01939485533,0.001585706885
"We've been seeing that all along, which is why the core files never end up being saved to disk.",Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,1.0,0.4255319149,1.0,0.5,0.4133072425,0.5866927575,0.01939485533,0.001585706885
"which is why the core files never end up being saved to disk

There is a core file, what I assume you are saying is that the core file is for the writeCrashDataToConsole issue and not the original issue.",Investigation and Exploration,False,205,CONTRIBUTOR,False,False,False,1.0,0.8510638298,0.5,0.5038461538,0.4135966372,0.5864033628,0.001585706885,0.2342152039
@keithc-ca can you please help look at the writeCrashDataToConsole problem.,Contribution and Commitment,False,75,CONTRIBUTOR,False,False,False,0.275,0.2340425532,1.0,0.5076923077,0.4135966372,0.5864033628,0.001585706885,0.2342152039
"I was able to narrow the problem down to this simple test case.
CODE

I'm able to get a core file via GDB, however a normal invocation of this test cases the handler to hang attempting to create the core file.",Investigation and Exploration,True,212,CONTRIBUTOR,False,False,False,1.0,0.914893617,1.0,0.5115384615,0.4563413728,0.5436586272,0.2342152039,0.006494528739
What happens with -Xint?,Investigation and Exploration,False,24,CONTRIBUTOR,False,False,False,1.0,0.08510638298,1.0,0.5153846154,0.4575266371,0.5424733629,0.006494528739,0.0009359677821
"What happens with -Xint?

Test Passes with CODE, and passes allocating smaller memory segments.",Investigation and Exploration,True,97,CONTRIBUTOR,False,False,False,1.0,0.3191489362,1.0,0.5192307692,0.4576974531,0.5423025469,0.0009359677821,0.01461769866
Is the CODE pass because we run less allocations total or do we do the same allocation with the JIT it just isn't satisfied or something?,Investigation and Exploration,True,137,CONTRIBUTOR,False,False,False,1.0,0.5531914894,1.0,0.5230769231,0.4603652118,0.5396347882,0.01461769866,0.2185584951
"We're running the same test with the same number of allocations, both with and without -Xint.",Testing,False,93,CONTRIBUTOR,False,False,False,0.6153846154,0.3404255319,0.6666666667,0.5307692308,0.5002525673,0.4997474327,0.2185584951,0.01535044408
"Updating with the stack trace. 
CODE",Investigation and Exploration,True,37,CONTRIBUTOR,False,False,False,0.2692307692,0.1489361702,1.0,0.5346153846,0.5002525673,0.4997474327,0.2185584951,0.01535044408
"Narrowing it further, 

- This is reproduced by limiting compilation to CODE hence we don't need to worry about any callers being compiled.",Investigation and Exploration,True,141,CONTRIBUTOR,False,False,False,1.0,0.4893617021,0.25,0.5384615385,0.5030540536,0.4969459464,0.01535044408,0.005154978519
- Crash only occurs when inlining is enabled.,Bug Reproduction,False,45,CONTRIBUTOR,False,False,False,0.3043478261,0.1489361702,0.5,0.5423076923,0.5030540536,0.4969459464,0.01535044408,0.005154978519
"It's reproducible when inlining is the only optimization enabled.

- Further, allocating a Memory Segment larger than CODE causes the failure.",Bug Reproduction,True,144,CONTRIBUTOR,False,False,False,0.9130434783,0.4468085106,0.75,0.5461538462,0.5030540536,0.4969459464,0.01535044408,0.005154978519
This suggests that there's an overflow issue.,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.3043478261,0.1489361702,1.0,0.55,0.5030540536,0.4969459464,0.01535044408,0.005154978519
"Precisely, the crash is occurring in the following portion of the compiled method. 

CODE",Investigation and Exploration,True,91,CONTRIBUTOR,False,False,False,0.5172413793,0.3191489362,0.08333333333,0.5538461538,0.5039948473,0.4960051527,0.005154978519,0.01512432343
My assumption is that this loop is actively clearing memory allocated.,Investigation and Exploration,False,70,CONTRIBUTOR,False,False,False,0.3793103448,0.2340425532,0.1666666667,0.5576923077,0.5039948473,0.4960051527,0.005154978519,0.01512432343
"Specifically,
CODE contains 0. 
 CODE starts off with the head of the memory to be allocated, and is incremented to subsequent segments as each segment is cleared.",Investigation and Exploration,True,165,CONTRIBUTOR,False,False,False,1.0,0.6170212766,0.25,0.5615384615,0.5039948473,0.4960051527,0.005154978519,0.01512432343
The number of segments to be cleared is determined the value stored into the count register.,Investigation and Exploration,False,92,CONTRIBUTOR,False,False,False,0.5517241379,0.3404255319,0.3333333333,0.5653846154,0.5039948473,0.4960051527,0.005154978519,0.01512432343
The loop terminates when the counter reaches to 0.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.3103448276,0.1914893617,0.4166666667,0.5692307692,0.5039948473,0.4960051527,0.005154978519,0.01512432343
Just before entering the loop the count register is set to CODE.,Investigation and Exploration,True,64,CONTRIBUTOR,False,False,False,0.4137931034,0.2553191489,0.5,0.5730769231,0.5039948473,0.4960051527,0.005154978519,0.01512432343
"An invalid counter value, which could be due to overflow.",Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,0.3448275862,0.2127659574,0.5833333333,0.5769230769,0.5039948473,0.4960051527,0.005154978519,0.01512432343
"This results in r3 reaching read-only memory, which causes the seg fault we're seeing.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.5172413793,0.3191489362,0.6666666667,0.5807692308,0.5039948473,0.4960051527,0.005154978519,0.01512432343
"This is confirmed by looking at the javacore
CODE 
CODE

As a side note.",Investigation and Exploration,True,76,CONTRIBUTOR,False,False,False,0.5862068966,0.3617021277,0.75,0.5846153846,0.5039948473,0.4960051527,0.005154978519,0.01512432343
I suspect the value of the counter should be actually slightly less than 0x4001FFE.,Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,0.4827586207,0.2978723404,0.8333333333,0.5884615385,0.5039948473,0.4960051527,0.005154978519,0.01512432343
That value comes from the delta between the value of the counter initially to the moment it encounters the read-only memory.,Investigation and Exploration,False,124,CONTRIBUTOR,False,False,False,0.7586206897,0.4680851064,0.9166666667,0.5923076923,0.5039948473,0.4960051527,0.005154978519,0.01512432343
Which is about 2.15GB.,Investigation and Exploration,False,22,CONTRIBUTOR,False,False,False,0.1724137931,0.1063829787,1.0,0.5961538462,0.5039948473,0.4960051527,0.005154978519,0.01512432343
The size of the segment inside the java stack is correct.,Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,0.6875,0.2340425532,0.3333333333,0.6,0.5067550661,0.4932449339,0.01512432343,0.04264807325
This issue is stemming from an instruction call srawi which only shifts the lower 32 bits.,Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,1.0,0.3404255319,0.6666666667,0.6038461538,0.5067550661,0.4932449339,0.01512432343,0.04264807325
"I.e it sounds like somewhere we're assuming the generated size to be an integer. 

CODE",Investigation and Exploration,True,89,CONTRIBUTOR,False,False,False,1.0,0.3404255319,1.0,0.6076923077,0.5067550661,0.4932449339,0.01512432343,0.04264807325
Changing CODE to CODE looks to resolve the issue on Power.,Solution Discussion,True,58,CONTRIBUTOR,False,False,False,0.6875,0.2340425532,0.5,0.6115384615,0.5145384234,0.4854615766,0.04264807325,0.3869983485
"https://github.com/AlenBadel/omr/commit/0b9653c23ba22247f66c11ad6df8a3b46c2c4738

I'll be taking a look on xLinuxXL to see if it's a similar story.",Investigation and Exploration,False,149,CONTRIBUTOR,False,False,False,1.0,0.3404255319,1.0,0.6153846154,0.5145384234,0.4854615766,0.04264807325,0.3869983485
it sounds like somewhere we're assuming the generated size to be an integer.,Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,0.7647058824,0.2765957447,0.3333333333,0.6192307692,0.5851663836,0.4148336164,0.3869983485,0.2686456518
I think we need to find out  which opcode (or some recognized method?),Investigation and Exploration,False,70,CONTRIBUTOR,False,False,False,0.8235294118,0.2978723404,0.6666666667,0.6230769231,0.5851663836,0.4148336164,0.3869983485,0.2686456518
this instruction is coming from and check/document overall assumptions about the incoming length for that code.,Investigation and Exploration,False,111,CONTRIBUTOR,False,False,False,1.0,0.3617021277,1.0,0.6269230769,0.5851663836,0.4148336164,0.3869983485,0.2686456518
"From what Alen showed me, it comes from CODE.",Investigation and Exploration,True,45,CONTRIBUTOR,False,False,False,0.5294117647,0.1914893617,0.3333333333,0.6307692308,0.6341947438,0.3658052562,0.2686456518,0.0113804523
The third parameter is the size of the data to write and it accepts a Long value.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,1.0,0.3617021277,0.6666666667,0.6346153846,0.6341947438,0.3658052562,0.2686456518,0.0113804523
The generated code treating it like an int value is wrong.,Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.6470588235,0.2340425532,1.0,0.6384615385,0.6341947438,0.3658052562,0.2686456518,0.0113804523
"Running the same test https://github.com/eclipse/openj9/issues/10588#issuecomment-698430817 on XLinuxXL does not produce a crash, or does it hang.",Testing,False,146,CONTRIBUTOR,False,False,False,0.6666666667,0.3404255319,0.3333333333,0.6423076923,0.6362716987,0.3637283013,0.0113804523,0.01862203789
"I will continue attempting to reproduce this on XLinuxXL, but I believe the reproduction rate was established to be less than 1 in 300.",Task Progress,False,135,CONTRIBUTOR,False,False,False,1.0,0.5106382979,0.6666666667,0.6461538462,0.6362716987,0.3637283013,0.0113804523,0.01862203789
@IBMJimmyk is a tree problem or a codegen problem just to be clear on the width issue at play here?,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,1.0,0.4255319149,0.5,0.6538461538,0.6396702573,0.3603297427,0.01862203789,0.008463782054
I'm guessing codegen?,Investigation and Exploration,False,21,CONTRIBUTOR,False,False,False,0.15,0.06382978723,1.0,0.6576923077,0.6396702573,0.3603297427,0.01862203789,0.008463782054
At least the problem on Power was a codegen issue.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.3125,0.2127659574,0.2,0.6615384615,0.6412149142,0.3587850858,0.008463782054,0.002100918508
The child for the size of the data to write was an CODE which is expected.,Investigation and Exploration,True,74,CONTRIBUTOR,False,False,False,0.5,0.3404255319,0.4,0.6653846154,0.6412149142,0.3587850858,0.008463782054,0.002100918508
What was going on was the call to CODE was being recognized as CODE.,Investigation and Exploration,True,68,CONTRIBUTOR,False,False,False,0.4375,0.2978723404,0.6,0.6692307692,0.6412149142,0.3587850858,0.008463782054,0.002100918508
Part way into generating code for a recognized call to CODE the wrong data size is used from an instruction which treated the data as if it was int and not long.,Investigation and Exploration,True,161,CONTRIBUTOR,False,False,False,1.0,0.6808510638,0.8,0.6730769231,0.6412149142,0.3587850858,0.008463782054,0.002100918508
That's what caused the bug and is in the fix Alen made a few comments earlier.,Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.5,0.3404255319,1.0,0.6769230769,0.6412149142,0.3587850858,0.008463782054,0.002100918508
ok great thanks - just confirming there wasn't a trees/common issue - looks to be codegen - thanks!,Social Conversation,False,99,CONTRIBUTOR,False,False,False,1.0,0.3404255319,1.0,0.6807692308,0.6415983359,0.3584016641,0.002100918508,0.005132080224
"In regards to the crash on power, the following are the trees generated.
CODE

I'll be taking a second look at the generated sequence to see if there were any similar assumptions, otherwise we should be ready for a PR.",Investigation and Exploration,True,221,CONTRIBUTOR,False,False,False,1.0,0.8936170213,0.5,0.6846153846,0.6425349507,0.3574650493,0.005132080224,0.00304547315
"On the XlinuxXL front, I'm checking if there are similar assumptions taken (I.e size of data treated as an int), otherwise there's very little I can do without being able to reproduce the failure.",Investigation and Exploration,False,196,CONTRIBUTOR,False,False,False,0.8095238095,0.7234042553,1.0,0.6884615385,0.6425349507,0.3574650493,0.005132080224,0.00304547315
so the trees do look correct so the issue would just be incorrect widths in the codegen - thanks for the great analysis @AlenBadel,Social Conversation,False,130,CONTRIBUTOR,False,False,False,1.0,0.4893617021,1.0,0.6923076923,0.6430907555,0.3569092445,0.00304547315,0.0002776418192
I think we still need to understand the whole flow: which opcodes and evaluators are involved.,Investigation and Exploration,False,94,CONTRIBUTOR,False,False,False,1.0,0.3404255319,0.5,0.6961538462,0.6431414257,0.3568585743,0.0002776418192,0.002558884395
"For example, we might be reusing some code that normally accepts int length.",Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,0.8125,0.2765957447,1.0,0.7,0.6431414257,0.3568585743,0.0002776418192,0.002558884395
I agree.,Social Conversation,False,8,CONTRIBUTOR,False,False,False,0.1176470588,0.04255319149,0.5,0.7038461538,0.6436084271,0.3563915729,0.002558884395,0.002369973467
I will have an update soon with the summary of the issue from a top-down approach.,Task Progress,False,82,CONTRIBUTOR,False,False,False,1.0,0.3617021277,1.0,0.7076923077,0.6436084271,0.3563915729,0.002558884395,0.002369973467
"It occurs to me that this would have been avoided if we had some kind of 'compiler' to check uses like that, along the lines of the error you get in Java passing a long to a function that expects an int (e.g. CODE).",Solution Discussion,True,215,CONTRIBUTOR,False,False,False,1.0,0.9361702128,0.5,0.7115384615,0.644040952,0.355959048,0.002369973467,0.007376113072
"To make it concrete here, we would have a class whose job is to form an instruction stream, that class would have methods CODE and  CODE - calling the former with 64-bit registers or a a 64-bit value would not compile.",Solution Discussion,True,218,CONTRIBUTOR,False,False,False,0.9772727273,0.914893617,1.0,0.7153846154,0.644040952,0.355959048,0.002369973467,0.007376113072
"Basically, Power codegen's assumption is that a register containing an Int can have an undefined value in its upper half.",Solution Discussion,False,121,CONTRIBUTOR,False,False,False,1.0,0.4255319149,0.5,0.7230769231,0.6453871071,0.3546128929,0.007376113072,0.2919761514
So Int and Long types need to be treated differently.,Solution Discussion,False,53,CONTRIBUTOR,False,False,False,0.5,0.2127659574,0.75,0.7269230769,0.6453871071,0.3546128929,0.007376113072,0.2919761514
However we only have Register class and not Register32 and Register64.,Solution Discussion,False,70,CONTRIBUTOR,False,False,False,0.55,0.2340425532,1.0,0.7307692308,0.6453871071,0.3546128929,0.007376113072,0.2919761514
"_To Summarize the issue on Power:_

We’ve established that the crash occurs when MemorySegment.allocateNative is JIT compiled and invoked with a requested memory segment size greater than Integer.",Investigation and Exploration,False,198,CONTRIBUTOR,False,False,False,0.9677419355,0.6382978723,0.03703703704,0.7346153846,0.6986733294,0.3013266706,0.2919761514,0.1217072968
MAX_VALUE.,Investigation and Exploration,False,10,CONTRIBUTOR,False,False,False,0.03225806452,0.02127659574,0.07407407407,0.7384615385,0.6986733294,0.3013266706,0.2919761514,0.1217072968
E.x CODE,Investigation and Exploration,True,8,CONTRIBUTOR,False,False,False,0.06451612903,0.04255319149,0.1111111111,0.7423076923,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"The method attempts to create, and allocate a new memory segment that is an allocated block from off-heap memory.",Investigation and Exploration,False,113,CONTRIBUTOR,False,False,False,0.6451612903,0.4255319149,0.1481481481,0.7461538462,0.6986733294,0.3013266706,0.2919761514,0.1217072968
The size argument represents the size of the memory segment requested.,Investigation and Exploration,False,70,CONTRIBUTOR,False,False,False,0.3548387097,0.2340425532,0.1851851852,0.75,0.6986733294,0.3013266706,0.2919761514,0.1217072968
**The crash*,Observed Bug Behaviour,False,12,CONTRIBUTOR,False,False,False,0.06451612903,0.04255319149,0.2222222222,0.7538461538,0.6986733294,0.3013266706,0.2919761514,0.1217072968
The segmentation fault occurs inside the compiled inlined call to CODEwhich is called by CODE.,Investigation and Exploration,True,94,CONTRIBUTOR,False,False,False,0.4838709677,0.3191489362,0.2962962963,0.7615384615,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"Given the reference to the memory segment, offset, size and a value, the method will set the entire memory segment to a value specified by the value argument.",Investigation and Exploration,False,158,CONTRIBUTOR,False,False,False,0.9032258065,0.5957446809,0.3333333333,0.7653846154,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"In this case, the method is being called to clear memory.",Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,0.3548387097,0.2340425532,0.3703703704,0.7692307692,0.6986733294,0.3013266706,0.2919761514,0.1217072968
A segmentation fault occurs because the system was attempting to clear read-only memory[1].,Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,0.4516129032,0.2978723404,0.4074074074,0.7730769231,0.6986733294,0.3013266706,0.2919761514,0.1217072968
This is happening because the instructions generated which computes how much memory should be cleared was not correct[2].,Investigation and Exploration,False,121,CONTRIBUTOR,False,False,False,0.5806451613,0.3829787234,0.4444444444,0.7769230769,0.6986733294,0.3013266706,0.2919761514,0.1217072968
**Where was this code generated?,Investigation and Exploration,False,32,CONTRIBUTOR,False,False,False,0.1612903226,0.1063829787,0.4814814815,0.7807692308,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"Taking a look at the trees for the sequence of generated instructions[3], we can see that the compiled method is calling CODE, which is a recognized method[4].",Investigation and Exploration,True,159,CONTRIBUTOR,False,False,False,0.8709677419,0.5744680851,0.5555555556,0.7884615385,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"Specifically on Power, CODE is compiled using the CODE[5], which is only invoked by CODE.",Investigation and Exploration,True,89,CONTRIBUTOR,False,False,False,0.4838709677,0.3191489362,0.5925925926,0.7923076923,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"The CODE is invoked when compiling an inlined call(TR::call), this is illustrated looking in the prior treetop reference.",Investigation and Exploration,True,121,CONTRIBUTOR,False,False,False,0.5806451613,0.3829787234,0.6296296296,0.7961538462,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"This also explains why our test case would not fail when disabling inlining, as that would prevent inlining of the direct call which ultimately generates the sequence.",Investigation and Exploration,False,167,CONTRIBUTOR,False,False,False,0.8709677419,0.5744680851,0.6666666667,0.8,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"The only point where CODE is called, is when compiling CODE[6].",Investigation and Exploration,True,63,CONTRIBUTOR,False,False,False,0.3548387097,0.2340425532,0.7037037037,0.8038461538,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"The signature for CODE suggests four arguments (Object,  long, long, bytes).",Investigation and Exploration,True,76,CONTRIBUTOR,False,False,False,0.3870967742,0.2553191489,0.7407407407,0.8076923077,0.6986733294,0.3013266706,0.2919761514,0.1217072968
Hence the size of the segment is always specified as a long.,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.3870967742,0.2553191489,0.7777777778,0.8115384615,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"Further it is a valid and concrete requirement that the size of the segment be a long, and the evaluator is not used for any other case other than compiling CODE.",Investigation and Exploration,True,162,CONTRIBUTOR,False,False,False,1.0,0.6595744681,0.8148148148,0.8153846154,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"**The Fix**

As discussed within the CODE compiled method, this issue stems from an instruction call CODE.",Solution Discussion,True,108,CONTRIBUTOR,False,False,False,0.5806451613,0.3829787234,0.8518518519,0.8192307692,0.6986733294,0.3013266706,0.2919761514,0.1217072968
The intention of this instruction is to properly set the loop counter so that the entire data region is properly encoded[1].,Solution Discussion,False,124,CONTRIBUTOR,False,False,False,0.6774193548,0.4468085106,0.8888888889,0.8230769231,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"This instruction shifts the lower 32 bits, which limits the size of the memory region to a size contained by an int(32-bits), rather than the long(64-bits) we expect.",Solution Discussion,False,166,CONTRIBUTOR,False,False,False,0.9677419355,0.6382978723,0.9259259259,0.8269230769,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"Instead, this should be replaced by CODE which shifts a double word, and supports a segment size of long[7].",Solution Discussion,True,108,CONTRIBUTOR,False,False,False,0.6129032258,0.4042553191,0.962962963,0.8307692308,0.6986733294,0.3013266706,0.2919761514,0.1217072968
"[1] https://github.com/eclipse/openj9/issues/10588#issuecomment-699047069
[2] https://github.com/eclipse/openj9/issues/10588#issuecomment-699089621
[3] https://github.com/eclipse/openj9/issues/10588#issuecomment-700216843
[4] https://github.com/eclipse/openj9/blob/9b680196cdee54cd185340e287e13ad924b9052a/runtime/compiler/env/j9method.cpp#L3362
[5] https://github.com/eclipse/omr/blob/0b9653c23ba22247f66c11ad6df8a3b46c2c4738/compiler/p/codegen/OMRTreeEvaluator.cpp#L4159-L4160
[6] https://github.com/eclipse/openj9/blob/9369e4e005a130411ae2606a25d08588a0920c7a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp#L12052
[7] https://github.com/eclipse/openj9/issues/10588#issuecomment-699196511",Solution Discussion,False,696,CONTRIBUTOR,False,False,False,0.6451612903,0.4255319149,1.0,0.8346153846,0.6986733294,0.3013266706,0.2919761514,0.1217072968
Thanks for the very detailed investigation and the summary.,Social Conversation,False,59,CONTRIBUTOR,False,False,False,0.3214285714,0.1914893617,0.1666666667,0.8384615385,0.7208851506,0.2791148494,0.1217072968,0.03144222045
"However, I am not sure I agree with the proposed fix.",Social Conversation,False,53,CONTRIBUTOR,False,False,False,0.3928571429,0.2340425532,0.3333333333,0.8423076923,0.7208851506,0.2791148494,0.1217072968,0.03144222045
CODEis defined in OMR without much description of the expected input parameters [1].,Solution Discussion,True,84,CONTRIBUTOR,False,False,False,0.4642857143,0.2765957447,0.5,0.8461538462,0.7208851506,0.2791148494,0.1217072968,0.03144222045
"It is invoked in openj9 like this:

https://github.com/eclipse/openj9/blob/9369e4e005a130411ae2606a25d08588a0920c7a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp#L12049-L12052

Note that the length information is conveyed via creating an CODE node that normally takes Int length.",Solution Discussion,True,284,CONTRIBUTOR,False,False,False,0.9642857143,0.5744680851,0.6666666667,0.85,0.7208851506,0.2791148494,0.1217072968,0.03144222045
"I am not sure we can change OMR method to adjust it to a particular consumer, openj9, especially since even this consumer passes information in somewhat inconsistent way.",Solution Discussion,False,170,CONTRIBUTOR,False,False,False,1.0,0.5957446809,0.8333333333,0.8538461538,0.7208851506,0.2791148494,0.1217072968,0.03144222045
[1] https://github.com/eclipse/omr/blob/0b9653c23ba22247f66c11ad6df8a3b46c2c4738/compiler/p/codegen/OMRTreeEvaluator.cpp#L4159-L4160,Solution Discussion,False,132,CONTRIBUTOR,False,False,False,0.07142857143,0.04255319149,1.0,0.8576923077,0.7208851506,0.2791148494,0.1217072968,0.03144222045
BTW : I think we need to remove the Intel  label and assume that this issue  will only take care of the Power failure.,Action on Issue,False,118,CONTRIBUTOR,False,False,False,1.0,0.5319148936,1.0,0.8615384615,0.7266234177,0.2733765823,0.03144222045,0.002441530636
"Removed the intel label, this platform should be covered by https://github.com/eclipse/openj9/issues/10580",Action on Issue,False,106,CONTRIBUTOR,False,False,False,1.0,0.2340425532,1.0,0.8653846154,0.7270690018,0.2729309982,0.002441530636,0.01554507959
CODEis defined in OMR without much description of the expected input parameters [1],Solution Discussion,True,83,CONTRIBUTOR,False,False,False,0.3421052632,0.2765957447,0.05555555556,0.8692307692,0.7299060094,0.2700939906,0.01554507959,0.00748487997
This description can certainly be added.,Solution Discussion,False,40,CONTRIBUTOR,False,False,False,0.1578947368,0.1276595745,0.1111111111,0.8730769231,0.7299060094,0.2700939906,0.01554507959,0.00748487997
Note that the length information is conveyed via creating an arrayset node that normally takes Int length.,Solution Discussion,False,106,CONTRIBUTOR,False,False,False,0.4473684211,0.3617021277,0.1666666667,0.8769230769,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"This is true, an ArraySet does normally allocate an array length of type int due to indexing limitations.",Solution Discussion,False,105,CONTRIBUTOR,False,False,False,0.4736842105,0.3829787234,0.2222222222,0.8807692308,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"The limitation is historical, and based off the class ArraySet inherits; ArrayList which itself is an implementation of List.",Solution Discussion,False,125,CONTRIBUTOR,False,False,False,0.5,0.4042553191,0.2777777778,0.8846153846,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"Looking through the remainder of the Unsafe methods, we can see that we tend use the underlying array evaluators.",Solution Discussion,False,113,CONTRIBUTOR,False,False,False,0.5,0.4042553191,0.3333333333,0.8884615385,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"From what I've seen they all support a length which could be long, or int.",Solution Discussion,False,74,CONTRIBUTOR,False,False,False,0.4210526316,0.3404255319,0.3888888889,0.8923076923,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"For example, such case as CODE[1] which uses the underlying CODE[2].",Solution Discussion,True,68,CONTRIBUTOR,False,False,False,0.2894736842,0.2340425532,0.4444444444,0.8961538462,0.7299060094,0.2700939906,0.01554507959,0.00748487997
We see that the underlying arrayCopyEvaluator does support sizes of long[3].,Solution Discussion,False,76,CONTRIBUTOR,False,False,False,0.2894736842,0.2340425532,0.5,0.9,0.7299060094,0.2700939906,0.01554507959,0.00748487997
I believe as long as the evaluators we use support the initialization of a contiguous memory segment which has a length argument of type long then we could easily justify it's use to compile and evaluate Unsafe methods.,Solution Discussion,False,219,CONTRIBUTOR,False,False,False,1.0,0.8085106383,0.5555555556,0.9038461538,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"To note, arrays do not have a bound on how large they can be, rather they have a bound on the number of objects (ArrayList based implementations i.e ArraySet) or primitives they index (Integer.MAX_VALUE).",Solution Discussion,False,204,CONTRIBUTOR,False,False,False,0.9210526316,0.7446808511,0.6111111111,0.9076923077,0.7299060094,0.2700939906,0.01554507959,0.00748487997
Hence the process of initialization of contiguous memory is identical in the case of Unsafe.,Solution Discussion,False,92,CONTRIBUTOR,False,False,False,0.3947368421,0.3191489362,0.6666666667,0.9115384615,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"CopyMemory, or Unsafe.",Solution Discussion,False,22,CONTRIBUTOR,False,False,False,0.07894736842,0.06382978723,0.7222222222,0.9153846154,0.7299060094,0.2700939906,0.01554507959,0.00748487997
SetMemory compared to arrays themselves.,Solution Discussion,False,40,CONTRIBUTOR,False,False,False,0.1315789474,0.1063829787,0.7777777778,0.9192307692,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"The evaluator should support both long, or int length values.",Solution Discussion,False,61,CONTRIBUTOR,False,False,False,0.2631578947,0.2127659574,0.8333333333,0.9230769231,0.7299060094,0.2700939906,0.01554507959,0.00748487997
This is consistent with many of our other evaluators.,Solution Discussion,False,53,CONTRIBUTOR,False,False,False,0.2368421053,0.1914893617,0.8888888889,0.9269230769,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"Java is not the only language that has the capability to allocate, and initialize a very-large contiguous region of memory.",Solution Discussion,False,123,CONTRIBUTOR,False,False,False,0.5526315789,0.4468085106,0.9444444444,0.9307692308,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"[1] https://github.com/eclipse/omr/blob/0b9653c23ba22247f66c11ad6df8a3b46c2c4738/compiler/p/codegen/OMRTreeEvaluator.cpp#L4276-L4277
[2] https://github.com/eclipse/openj9/blob/9369e4e005a130411ae2606a25d08588a0920c7a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp#L12842
[3] https://github.com/eclipse/openj9/blob/9369e4e005a130411ae2606a25d08588a0920c7a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp#L12890-L12891",Solution Discussion,False,417,CONTRIBUTOR,False,False,False,0.2105263158,0.170212766,1.0,0.9346153846,0.7299060094,0.2700939906,0.01554507959,0.00748487997
"CODE

Do you mean we should be able to pass nodes with the length child being both Int and Long type?",Solution Discussion,True,103,CONTRIBUTOR,False,False,False,1.0,0.4680851064,1.0,0.9384615385,0.7312720148,0.2687279852,0.00748487997,0.001396795956
Do you mean we should be able to pass nodes with the length child being both Int and Long type?,Solution Discussion,False,95,CONTRIBUTOR,False,False,False,0.6666666667,0.4255319149,0.2,0.9423076923,0.7315269328,0.2684730672,0.001396795956,0.005094870496
"They can be either Long, or Int.",Solution Discussion,False,32,CONTRIBUTOR,False,False,False,0.2333333333,0.1489361702,0.4,0.9461538462,0.7315269328,0.2684730672,0.001396795956,0.005094870496
We currently don't call CODE for any other case other than CODE which accepts a long type length value.,Solution Discussion,True,103,CONTRIBUTOR,False,False,False,0.6333333333,0.4042553191,0.6,0.95,0.7315269328,0.2684730672,0.001396795956,0.005094870496
"However, it's better illustrated with the example of CODE.",Solution Discussion,True,58,CONTRIBUTOR,False,False,False,0.3,0.1914893617,0.8,0.9538461538,0.7315269328,0.2684730672,0.001396795956,0.005094870496
"Which is used by CODE as it accepts a length value of long type, and at the same time is used with CODE which accepts a length of int type.",Solution Discussion,True,139,CONTRIBUTOR,False,False,False,1.0,0.6382978723,1.0,0.9576923077,0.7315269328,0.2684730672,0.001396795956,0.005094870496
"I had a look at how CODE might fail, but didn't see anything obvious.",Solution Discussion,True,69,CONTRIBUTOR,False,False,False,0.35,0.2978723404,0.5,0.9615384615,0.7324567567,0.2675432433,0.005094870496,0.01440588944
"Given that the current theory is that the generated code was clearing memory that should have been left alone, it's reasonable that some of the data examined by CODE was corrupted and so a second fault should not be unexpected.",Solution Discussion,True,227,CONTRIBUTOR,False,False,False,1.0,0.8510638298,1.0,0.9653846154,0.7324567567,0.2675432433,0.005094870496,0.01440588944
Exactly.,Social Conversation,False,8,CONTRIBUTOR,False,False,False,0.1,0.02127659574,0.3333333333,0.9692307692,0.7350858598,0.2649141402,0.01440588944,0.1968967087
We can use CODE to generate either CODEor  CODE.,Solution Discussion,True,48,CONTRIBUTOR,False,False,False,1.0,0.2127659574,0.6666666667,0.9730769231,0.7350858598,0.2649141402,0.01440588944,0.1968967087
That would be the safest way to address the issue.,Solution Discussion,False,50,CONTRIBUTOR,False,False,False,1.0,0.2127659574,1.0,0.9769230769,0.7350858598,0.2649141402,0.01440588944,0.1968967087
OMR PR: https://github.com/eclipse/omr/pull/5590,Solution Discussion,False,48,CONTRIBUTOR,False,False,False,1.0,0.06382978723,1.0,0.9807692308,0.7710198967,0.2289801033,0.1968967087,0.2393844938
The above PR has been merged.,Action on Issue,False,29,CONTRIBUTOR,False,False,False,0.75,0.1276595745,0.3333333333,0.9846153846,0.8147080379,0.1852919621,0.2393844938,1.0
Fix will be merged into R0.23 as well.,Action on Issue,False,38,CONTRIBUTOR,False,False,False,1.0,0.170212766,0.6666666667,0.9884615385,0.8147080379,0.1852919621,0.2393844938,1.0
https://github.com/eclipse/openj9-omr/pull/81,Action on Issue,False,45,CONTRIBUTOR,False,False,False,0.125,0.02127659574,1.0,0.9923076923,0.8147080379,0.1852919621,0.2393844938,1.0
@andrew-m-leonard  can this be closed?,Action on Issue,False,38,CONTRIBUTOR,False,False,False,1.0,0.170212766,1.0,0.9961538462,0.9972100059,0.00278999405,1.0,0.01528747377
"I'll go ahead and close it since the fix has been merged, we can open a new issue if another problem is found.",Action on Issue,False,110,CONTRIBUTOR,False,False,True,1.0,0.4893617021,1.0,1.0,1.0,0.0,0.01528747377,0.0
JTReg VM Failure: java/nio/charset/coders/BashStreams.java,Observed Bug Behaviour,False,58,NONE,True,True,False,0.2222222222,0.08791208791,0.3333333333,0.003496503497,0.0,1.0,0.0,0.003603409297
"Failure link
------------
https://github.com/ibmruntimes/openj9-openjdk-jdk11/blob/f4e1e81163ae8ead82ac546d7f8d2e7a3ed24871/test/jdk/java/nio/charset/coders/BashStreams.java#L1 fails on JDK11-openj9 AIX
- test category, openjdk 
- OS/architecture, ppc64_aix
CODE

Optional info
-------------
- New test

Failure output (captured from console output)",Testing,True,360,NONE,True,True,False,1.0,0.3956043956,0.6666666667,0.006993006993,0.0,1.0,0.0,0.003603409297
"---------------------------------------------
CODE
Dumps: https://ibm.box.com/s/ra34mxfgz1mh8bih1pw1dqqeu5rnq2pb",Testing,True,114,NONE,True,True,False,0.1666666667,0.06593406593,1.0,0.01048951049,0.0,1.0,0.0,0.003603409297
@M-Davies how often does it fail?,Investigation and Exploration,False,33,CONTRIBUTOR,False,False,False,1.0,0.07692307692,1.0,0.01398601399,0.0006591571412,0.9993408429,0.003603409297,0.003686600448
Does it fail on jdk14 as well?,Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,1.0,0.07692307692,1.0,0.01748251748,0.001333532104,0.9986664679,0.003686600448,0.004487700419
"It failed on two of the last four jdk11 nightlies, hasn't been seen on jdk14 (the jdk_nio test fails in other ways though).",Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,1.0,0.2527472527,0.5,0.02097902098,0.002154449057,0.9978455509,0.004487700419,0.003086545757
@M-Davies is running a grinder to confirm.,Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.347826087,0.08791208791,1.0,0.02447552448,0.002154449057,0.9978455509,0.004487700419,0.003086545757
I don't believe this affects JDK14.,Social Conversation,False,35,NONE,True,False,False,0.3333333333,0.06593406593,0.25,0.02797202797,0.002719058434,0.9972809416,0.003086545757,0.005933531811
I've ran 2 10 iteration grinders on two seperate aix machines and couldn't reproduce the error.,Bug Reproduction,False,95,NONE,True,False,False,0.9444444444,0.1868131868,0.5,0.03146853147,0.002719058434,0.9972809416,0.003086545757,0.005933531811
~I'm running another at https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/2333/console that is trying to recreate the exact conditions the test was conducted under.,Testing,False,172,NONE,True,False,False,1.0,0.1978021978,0.75,0.03496503497,0.002719058434,0.9972809416,0.003086545757,0.005933531811
"If that passes, I'm going to make a judgement that this was a very intermittent failure.~ It passed",Testing,False,99,NONE,True,False,False,1.0,0.1978021978,1.0,0.03846153846,0.002719058434,0.9972809416,0.003086545757,0.005933531811
"At class unloading time, cleaning classloaders time GC trying to unload one of classloaders (I will try to find out which one).",Investigation and Exploration,False,127,CONTRIBUTOR,False,False,False,1.0,0.2417582418,0.25,0.04195804196,0.003804455496,0.9961955445,0.005933531811,0.005236420778
As a part of operation it calls CODE in VM in CODE.,Investigation and Exploration,True,51,CONTRIBUTOR,False,False,False,0.5454545455,0.1318681319,0.5,0.04545454545,0.003804455496,0.9961955445,0.005933531811,0.005236420778
This function triggers CODE hook.,Investigation and Exploration,True,33,CONTRIBUTOR,False,False,False,0.2272727273,0.05494505495,0.75,0.04895104895,0.003804455496,0.9961955445,0.005933531811,0.005236420778
There is only one subscriber to this hook in JIT code CODE in CODE and it is where crash occur,Investigation and Exploration,True,94,CONTRIBUTOR,False,False,False,0.9090909091,0.2197802198,1.0,0.05244755245,0.003804455496,0.9961955445,0.005933531811,0.005236420778
This is table of Classloaders in the system.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.5714285714,0.08791208791,0.5,0.05594405594,0.004762332847,0.9952376672,0.005236420778,0.0002611277793
"""Object is not marked"" means this classloader is about to be unloaded:
CODE",Investigation and Exploration,True,76,CONTRIBUTOR,False,False,False,1.0,0.1538461538,1.0,0.05944055944,0.004762332847,0.9952376672,0.005236420778,0.0002611277793
"The crash occur in CODE

This is c-stack (with preserved registers):
CODE",Investigation and Exploration,True,76,CONTRIBUTOR,False,False,False,1.0,0.1758241758,1.0,0.06293706294,0.004810099899,0.9951899001,0.0002611277793,0.0001840989358
Please let me know if you need more help.,Social Conversation,False,41,CONTRIBUTOR,False,False,False,1.0,0.0989010989,0.5,0.06643356643,0.004843776376,0.9951562236,0.0001840989358,0.001428885046
I do have core dumps/JVM downloaded.,Social Conversation,False,36,CONTRIBUTOR,False,False,False,0.7777777778,0.07692307692,1.0,0.06993006993,0.004843776376,0.9951562236,0.0001840989358,0.001428885046
"There is classloader address in the registers of crashed method CODE and I am sure it causes a trouble:
CODE",Investigation and Exploration,True,109,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.07342657343,0.005105156559,0.9948948434,0.001428885046,0.003392350266
@gita-omr could someone with AIX skills have an initial look at this to find the right place to send it?,Contribution and Commitment,False,104,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.07692307692,0.005725705522,0.9942742945,0.003392350266,0.001958073201
I think it's more of debugging skills that is needed :),Social Conversation,False,55,CONTRIBUTOR,False,False,False,1.0,0.1208791209,0.5,0.08041958042,0.006083887962,0.993916112,0.001958073201,0.4507797245
We will try to take a look next week.,Task Progress,False,37,CONTRIBUTOR,False,False,False,0.8181818182,0.0989010989,1.0,0.08391608392,0.006083887962,0.993916112,0.001958073201,0.4507797245
"This has now occurred on jdk14 aix too running test java/nio/channels/FileChannel/TransferToChannel.java: https://ci.adoptopenjdk.net/job/Test_openjdk14_j9_sanity.openjdk_ppc64_aix/12/console
CODE",Investigation and Exploration,True,197,CONTRIBUTOR,False,False,False,1.0,0.1978021978,1.0,0.08741258741,0.08854320636,0.9114567936,0.4507797245,0.0006539748809
"I stored results locally, so if somebody needs core files for previous or this one ask me",Social Conversation,False,89,CONTRIBUTOR,False,False,False,1.0,0.1868131868,1.0,0.09090909091,0.08866283535,0.9113371647,0.0006539748809,0.0636581768
Moving forward since I don't see any fix in hand and it's becoming too late to update the 0.19 release.,Task Progress,False,103,CONTRIBUTOR,False,False,False,1.0,0.2197802198,0.5,0.09440559441,0.1003075691,0.8996924309,0.0636581768,0.01551514965
Note the branch for the 0.20 release occurs on March 8.,Social Conversation,False,55,CONTRIBUTOR,False,False,False,0.55,0.1208791209,1.0,0.0979020979,0.1003075691,0.8996924309,0.0636581768,0.01551514965
@dmitripivkine you mentioned xlinux jdmpview couldn't find the java context in the core file from the Adopt build?,Investigation and Exploration,False,114,CONTRIBUTOR,False,False,False,0.8571428571,0.1978021978,0.25,0.1013986014,0.1031456929,0.8968543071,0.01551514965,0.04744206468
"I tried creating a core CODE from an Adopt jdk14 build, it's 3GB+, and the context is found running xlinux jdmpview.",Investigation and Exploration,True,116,CONTRIBUTOR,False,False,False,1.0,0.2307692308,0.5,0.1048951049,0.1031456929,0.8968543071,0.01551514965,0.04744206468
Various commands work as well.,Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,0.2380952381,0.05494505495,0.75,0.1083916084,0.1031456929,0.8968543071,0.01551514965,0.04744206468
"If there is a problem with the core, it's probably a machine issue as you suggested.",Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,0.7619047619,0.1758241758,1.0,0.1118881119,0.1031456929,0.8968543071,0.01551514965,0.04744206468
"I stored results locally, so if somebody needs core files for previous or this one ask me

please note that system core from second failure can not be opened in CODE (CODE) @pshipton have tested ability of CODE to open file for core generated on AIX in Java 14 and seems it is not broken.",Investigation and Exploration,True,290,CONTRIBUTOR,False,False,False,1.0,0.6153846154,0.5,0.1153846154,0.1118240786,0.8881759214,0.04744206468,0.0005430533463
I guess something is missed in machine configuration,Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,0.1428571429,0.08791208791,1.0,0.1188811189,0.1118240786,0.8881759214,0.04744206468,0.0005430533463
"I'll see if I can't narrow down which AIX machines are affected
- https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/2430/ JDK11-j9 CODE
- https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/2431/ JDK11-j9 CODE
- https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/2434/ JDK14-j9 CODE",Investigation and Exploration,True,306,NONE,True,False,False,1.0,0.2967032967,1.0,0.1223776224,0.1119234172,0.8880765828,0.0005430533463,0.008570999411
Please confirm that fullcore attribute is set. CODE.,Investigation and Exploration,True,52,CONTRIBUTOR,False,False,False,0.4210526316,0.08791208791,0.25,0.1258741259,0.1134912755,0.8865087245,0.008570999411,0.04891716703
You can enable with CODE.,Investigation and Exploration,True,25,CONTRIBUTOR,False,False,False,0.2631578947,0.05494505495,0.5,0.1293706294,0.1134912755,0.8865087245,0.008570999411,0.04891716703
I have access to both CODE and CODE and the attribute is set to True on both of them.,Investigation and Exploration,True,85,CONTRIBUTOR,False,False,False,1.0,0.2087912088,0.75,0.1328671329,0.1134912755,0.8865087245,0.008570999411,0.04891716703
I don't have access to the others to check.,Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.4736842105,0.0989010989,1.0,0.1363636364,0.1134912755,0.8865087245,0.008570999411,0.04891716703
@jdekonin Raised https://github.com/AdoptOpenJDK/openjdk-infrastructure/issues/1189 for the fullcore enabling.,Task Progress,False,110,NONE,True,False,False,0.7777777778,0.07692307692,0.5,0.1398601399,0.1224394958,0.8775605042,0.04891716703,0.8694307183
Although it looks like all the grinders passed anyway,Investigation and Exploration,False,53,NONE,True,False,False,1.0,0.0989010989,1.0,0.1433566434,0.1224394958,0.8775605042,0.04891716703,0.8694307183
I haven't seen this pop up in the nightly builds at adopt or in grinders so I'll close this as resolved for now.,Action on Issue,False,112,NONE,True,False,False,1.0,0.2527472527,0.5,0.1468531469,0.2814809533,0.7185190467,0.8694307183,0.002857770092
"If it comes back, it can always be reopened",Action on Issue,False,43,NONE,True,False,False,0.3913043478,0.0989010989,1.0,0.1503496503,0.2814809533,0.7185190467,0.8694307183,0.002857770092
I can not understand why this issue is closed without investigation.,Social Conversation,False,68,CONTRIBUTOR,False,False,False,0.7333333333,0.1208791209,0.25,0.1538461538,0.2820037137,0.7179962863,0.002857770092,0.01329594867
We know this is highly intermittent issue.,Social Conversation,False,42,CONTRIBUTOR,False,False,False,0.4666666667,0.07692307692,0.5,0.1573426573,0.2820037137,0.7179962863,0.002857770092,0.01329594867
I would prefer to close https://github.com/eclipse/openj9/issues/8619 instead,Action on Issue,False,77,CONTRIBUTOR,False,False,False,0.4666666667,0.07692307692,1.0,0.1643356643,0.2820037137,0.7179962863,0.002857770092,0.01329594867
"For failure https://ci.adoptopenjdk.net/view/Test_openjdk/job/Test_openjdk8_j9_sanity.openjdk_ppc64le_linux/148/ the crash occur in the same method as before CODE:
CODE
just from different hook, this time CODE",Bug Reproduction,True,211,CONTRIBUTOR,False,False,False,1.0,0.2527472527,0.2,0.1678321678,0.284435888,0.715564112,0.01329594867,0.3731531372
The method was called with classloader 0x3FFF80098CC8 CODE.,Investigation and Exploration,True,59,CONTRIBUTOR,False,False,False,0.347826087,0.08791208791,0.4,0.1713286713,0.284435888,0.715564112,0.01329594867,0.3731531372
I believe the exact reason for crash was an attempt to get CODE (decoding garbage ?),Investigation and Exploration,True,84,CONTRIBUTOR,False,False,False,0.652173913,0.1648351648,0.6,0.1748251748,0.284435888,0.715564112,0.01329594867,0.3731531372
"and entry address was 0x3FFF805FDB30
CODECODE._..?....<..... ]
0x3FFF805FDBB0 :  00003fff805fd5f0 0000000000000008 [ .._..?..........",Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,0.7826086957,0.1978021978,0.8,0.1783216783,0.284435888,0.715564112,0.01329594867,0.3731531372
"]
0x3FFF805FDBC0 :  0000000000000040 0000000000000000 [ @............... ]
CODE`",Investigation and Exploration,True,82,CONTRIBUTOR,False,False,False,0.347826087,0.08791208791,1.0,0.1818181818,0.284435888,0.715564112,0.01329594867,0.3731531372
"Just occurred again in a jdk14-j9-plinux run the other night ([test-osuosl-centos74-ppc64le-1] URL 
https://ci.adoptopenjdk.net/view/Test_openjdk/job/Test_openjdk14_j9_sanity.openjdk_ppc64le_linux/39/console

Diagnostic files: https://ibm.box.com/s/e0tvq7etp9o5rhp5dpul72qas8qil3tr

~Will try and run a few grinders on CODE.",Bug Reproduction,True,329,NONE,True,False,False,1.0,0.3626373626,0.5,0.1853146853,0.3526952876,0.6473047124,0.3731531372,0.01011234657
"See if I can't reproduce it.~ All passed, not sure if there is a specific way to reproduce this",Investigation and Exploration,False,95,NONE,True,False,False,0.5757575758,0.2087912088,1.0,0.1888111888,0.3526952876,0.6473047124,0.3731531372,0.01011234657
I believe this is just very intermittent issue.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,1.0,0.08791208791,0.5,0.1923076923,0.3545450984,0.6454549016,0.01011234657,0.0005314990198
"There is the same stack:
CODE",Investigation and Exploration,True,30,CONTRIBUTOR,False,False,False,0.875,0.07692307692,1.0,0.1958041958,0.3545450984,0.6454549016,0.01011234657,0.0005314990198
That's correct.,Social Conversation,False,15,CONTRIBUTOR,False,False,False,0.2222222222,0.02197802198,0.5,0.1993006993,0.3546423234,0.6453576766,0.0005314990198,0.0001694634556
From my observations the failure rate is around 1/20.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,1.0,0.0989010989,1.0,0.2027972028,0.3546423234,0.6453576766,0.0005314990198,0.0001694634556
"This looks like a dup of this as well https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.openjdk_ppc64le_linux_Personal/4/
java/util/jar/JarFile/ScanSignedJar.java
CODE",Investigation and Exploration,True,177,CONTRIBUTOR,False,False,False,1.0,0.1978021978,1.0,0.2062937063,0.3546733227,0.6453266773,0.0001694634556,0.0007155979557
As you know Compilation Threads don't stop while GC takes Exclusive VM Access (known as Stop-The-World).,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,1.0,0.1978021978,0.25,0.2097902098,0.3548042241,0.6451957759,0.0007155979557,0.1429285596
However there are some limitations related with Class Unloading apply (controlled using Mutex).,Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.7222222222,0.1428571429,0.5,0.2132867133,0.3548042241,0.6451957759,0.0007155979557,0.1429285596
Is this table walkable at any moment of time?,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.5,0.0989010989,0.75,0.2167832168,0.3548042241,0.6451957759,0.0007155979557,0.1429285596
Is it possible this function got garbage if this table (for example) under modification?,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.7777777778,0.1538461538,1.0,0.2202797203,0.3548042241,0.6451957759,0.0007155979557,0.1429285596
"Got one on zlinux https://ci.eclipse.org/openj9/job/Grinder/719
 java/nio/charset/coders/BashStreams.java.",Bug Reproduction,False,107,CONTRIBUTOR,False,False,False,1.0,0.1208791209,0.5,0.2237762238,0.3809495695,0.6190504305,0.1429285596,0.02657957272
"BashStreams
CODE",Testing,True,17,CONTRIBUTOR,False,False,False,0.2727272727,0.03296703297,1.0,0.2272727273,0.3809495695,0.6190504305,0.1429285596,0.02657957272
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.openjdk_s390x_linux_Nightly/13
java/nio/channels/SocketChannel/ShortWrite.java.ShortWrite",Testing,False,148,CONTRIBUTOR,False,False,False,1.0,0.08791208791,1.0,0.2307692308,0.3858116637,0.6141883363,0.02657957272,0.1629868704
"First of all let's list all the different places this failure can occur:

CODE

CODE

CODE

CODE

CODE

Firstly, the failure looks to be identical in each one of these cases.",Investigation and Exploration,True,186,CONTRIBUTOR,False,False,False,0.4404761905,0.4065934066,0.1666666667,0.2377622378,0.5985521651,0.4014478349,1.0,0.01222678832
"I've tried running these tests explicitly, without any luck reproducing the failure in the individual tests.",Testing,False,108,CONTRIBUTOR,False,False,False,0.2023809524,0.1868131868,0.3333333333,0.2412587413,0.5985521651,0.4014478349,1.0,0.01222678832
"However because the nio test suites runs many of these tests sequentially, I've been able to get the nio test suite to fail in about 1/20 iterations in one of the above listed test cases.",Testing,False,187,CONTRIBUTOR,False,False,False,0.4285714286,0.3956043956,0.5,0.2447552448,0.5985521651,0.4014478349,1.0,0.01222678832
"Specifically, let's take a look at the exact failure in this issue.",Investigation and Exploration,False,67,CONTRIBUTOR,False,False,False,0.1428571429,0.1318681319,0.6666666667,0.2482517483,0.5985521651,0.4014478349,1.0,0.01222678832
"Looking into the assembly:
CODE

As Dmitri has pointed out, It became obvious that the seg fault happens at:
CODE
Specifically the segfault happens while fetching:
CODE

Expanding this further, we can see that it's trying to obtain the j9class using the constant pool address.
CODE
As we're iterating through the j9method entries in the HT, the entry that we see the segfault looks to be a valid j9method, however the constant pool address is invalid.",Testing,True,461,CONTRIBUTOR,False,False,False,1.0,0.9230769231,0.8333333333,0.2517482517,0.5985521651,0.4014478349,1.0,0.01222678832
The expected constant pool address within the j9method was actually just CODE in this case.,Investigation and Exploration,True,91,CONTRIBUTOR,False,False,False,0.1785714286,0.1648351648,1.0,0.2552447552,0.5985521651,0.4014478349,1.0,0.01222678832
Taking a closer look the j9method we're referencing seems to have been deleted.,Investigation and Exploration,False,79,CONTRIBUTOR,False,False,False,0.3023255814,0.1428571429,0.1,0.2587412587,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"Everything looks to be invalid, not just the constant pool address.",Investigation and Exploration,False,67,CONTRIBUTOR,False,False,False,0.2558139535,0.1208791209,0.2,0.2622377622,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"Running an experiment to verify if the HT was invalid upon classunloading verified that it was corrupted somewhere prior to entering the classunloading routine. 

CODE

The CODE method should also segfault if the j9method being inserted was also invalid upon entry.",Investigation and Exploration,True,269,CONTRIBUTOR,False,False,False,1.0,0.4725274725,0.3,0.2657342657,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"So, we can assume that the entry was valid upon entry.",Investigation and Exploration,False,54,CONTRIBUTOR,False,False,False,0.2558139535,0.1208791209,0.4,0.2692307692,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"To double check, I also added a check to only add the entry if it has a valid classloader.",Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,0.4418604651,0.2087912088,0.5,0.2727272727,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"To obtain that classloader the j9method being inserted would need to have a valid constantpool address, otherwise that check would segfault itself.",Investigation and Exploration,False,147,CONTRIBUTOR,False,False,False,0.511627907,0.2417582418,0.6,0.2762237762,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"This wasn't a successful experiment since I wasn't able to reproduce the failure after adding this check, it might've changed timing.",Investigation and Exploration,False,133,CONTRIBUTOR,False,False,False,0.511627907,0.2417582418,0.7,0.2797202797,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"Next Steps:

It looks like something deleted the j9method that we're trying to reference before it was removed from the HT.",Investigation and Exploration,False,125,CONTRIBUTOR,False,False,False,0.511627907,0.2417582418,0.8,0.2832167832,0.6007887623,0.3992112377,0.01222678832,0.05114946292
"Next steps include investigating:
-> The classunloading routine within the HT was never called, due to some missed path.
-> An invalid j9classloader was passed into the classunloading routine and the entry was never removed.",Investigation and Exploration,False,226,CONTRIBUTOR,False,False,False,0.8139534884,0.3846153846,0.9,0.2867132867,0.6007887623,0.3992112377,0.01222678832,0.05114946292
I'll be trying to narrow down if we ever call the classunloading routine without removing anything.,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,0.3720930233,0.1758241758,1.0,0.2902097902,0.6007887623,0.3992112377,0.01222678832,0.05114946292
Adding an assert if CODE does not remove an entry has not triggered.,Investigation and Exploration,True,68,CONTRIBUTOR,False,False,False,0.7222222222,0.1428571429,0.1428571429,0.2937062937,0.6101453274,0.3898546726,0.05114946292,0.001708499748
"Also, enabling sampling verbose options does not cause this to failure to be triggered.",Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,0.7777777778,0.1538461538,0.2857142857,0.2972027972,0.6101453274,0.3898546726,0.05114946292,0.001708499748
I suspect this is some sort of synchronization issue.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.5,0.0989010989,0.4285714286,0.3006993007,0.6101453274,0.3898546726,0.05114946292,0.001708499748
"Unless an experiment causes the failure, or triggers some sort of assert the experiment cannot be reliable.",Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,1.0,0.1978021978,0.5714285714,0.3041958042,0.6101453274,0.3898546726,0.05114946292,0.001708499748
"What we've verified:
-> The J9Method_HT Entry was invalid prior to entering CODE.",Investigation and Exploration,True,82,CONTRIBUTOR,False,False,False,0.7777777778,0.1538461538,0.7142857143,0.3076923077,0.6101453274,0.3898546726,0.05114946292,0.001708499748
"Assumptions:
-> CODE can not happen at the same time as CODE, since CODE occurs ONLY during STW.",Investigation and Exploration,True,97,CONTRIBUTOR,False,False,False,1.0,0.1978021978,0.8571428571,0.3111888112,0.6101453274,0.3898546726,0.05114946292,0.001708499748
"-> The Entry being loaded, during CODE is always a valid j9method.",Investigation and Exploration,True,66,CONTRIBUTOR,False,False,False,0.6111111111,0.1208791209,1.0,0.3146853147,0.6101453274,0.3898546726,0.05114946292,0.001708499748
"- CODE can not happen at the same time as CODE, since CODE occurs ONLY during STW.",Investigation and Exploration,True,82,CONTRIBUTOR,False,False,False,0.9411764706,0.1758241758,0.5,0.3181818182,0.6104578564,0.3895421436,0.001708499748,0.03226044993
Global GC STW does not stop compilation threads really but triggers CODE and takes CODE - see https://github.com/eclipse/openj9/blob/d493108cc5cc229002810c55b0ac86df1ca1fbc2/runtime/gc_base/ClassLoaderManager.cpp#L645,Investigation and Exploration,True,217,CONTRIBUTOR,False,False,False,1.0,0.1868131868,1.0,0.3216783217,0.6104578564,0.3895421436,0.001708499748,0.03226044993
In the whole stack it doesn't look like we ever call CODE.,Investigation and Exploration,True,58,CONTRIBUTOR,False,False,False,0.5,0.1318681319,0.3333333333,0.3251748252,0.6163591305,0.3836408695,0.03226044993,0.02856229515
"It's only ever called during:
CODE
CODE

I suspect then it's missing that mutex.",Investigation and Exploration,True,84,CONTRIBUTOR,False,False,False,0.7083333333,0.1868131868,0.6666666667,0.3286713287,0.6163591305,0.3836408695,0.03226044993,0.02856229515
"Added the obtaining and releaseing that mutex before and after classloading to see if that makes a difference. 

CODE
CODE
CODE",Investigation and Exploration,True,131,CONTRIBUTOR,False,False,False,1.0,0.2637362637,1.0,0.3321678322,0.6163591305,0.3836408695,0.03226044993,0.02856229515
In the whole stack it doesn't look like we ever call CODE,Investigation and Exploration,True,57,CONTRIBUTOR,False,False,False,1.0,0.1318681319,0.3333333333,0.3356643357,0.621583916,0.378416084,0.02856229515,0.002161429347
This function is called once at the beginning of Global GC.,Investigation and Exploration,False,59,CONTRIBUTOR,False,False,False,0.9166666667,0.1208791209,0.6666666667,0.3391608392,0.621583916,0.378416084,0.02856229515,0.002161429347
Why do you expect to see it in the current c-stack?!,Social Conversation,False,52,CONTRIBUTOR,False,False,False,1.0,0.1318681319,1.0,0.3426573427,0.621583916,0.378416084,0.02856229515,0.002161429347
"In the whole stack it doesn't look like we ever call CODE
 
 This function is called once at the beginning of Global GC.",Investigation and Exploration,True,122,CONTRIBUTOR,False,False,False,1.0,0.2637362637,0.2,0.3461538462,0.6219792976,0.3780207024,0.002161429347,0.8023255008
The correct check would be: because GC enters monitor in RW mode you can see owning thread is stored in monitor.,Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,0.875,0.2307692308,0.4,0.3496503497,0.6219792976,0.3780207024,0.002161429347,0.8023255008
And this thread should be mutator thread initiated GC (and became GC Master Thread for this GC).,Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.7083333333,0.1868131868,0.6,0.3531468531,0.6219792976,0.3780207024,0.002161429347,0.8023255008
This thread owns VM Exclusive access (0x20 in public flags).,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.4166666667,0.1098901099,0.8,0.3566433566,0.6219792976,0.3780207024,0.002161429347,0.8023255008
"For example:
CODE",Investigation and Exploration,True,18,CONTRIBUTOR,False,False,False,0.1666666667,0.04395604396,1.0,0.3601398601,0.6219792976,0.3780207024,0.002161429347,0.8023255008
I was looking at the code executed prior to the crash.,Investigation and Exploration,False,54,CONTRIBUTOR,False,False,False,0.3666666667,0.1208791209,0.3333333333,0.3636363636,0.7687454681,0.2312545319,0.8023255008,0.03674198804
"In some instances, such as the path that involves CODE the GC reserves the mutex much later on, and closer to calling the hook.",Investigation and Exploration,True,127,CONTRIBUTOR,False,False,False,0.8,0.2637362637,0.6666666667,0.3671328671,0.7687454681,0.2312545319,0.8023255008,0.03674198804
"I can see in your subsequent comment that the GC thread owns VM exclusive access during the event, so I suspect this was reserved much earlier on in the path.",Investigation and Exploration,False,158,CONTRIBUTOR,False,False,False,1.0,0.3296703297,1.0,0.3706293706,0.7687454681,0.2312545319,0.8023255008,0.03674198804
This issue is fairly difficult to reproduce while enabling tracing.,Bug Reproduction,False,67,CONTRIBUTOR,False,False,False,0.4,0.1098901099,0.1111111111,0.3741258741,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
"I've tried enabling either CODE, or CODE causes the issue to disappear even with aggressive iterations.",Solution Discussion,True,103,CONTRIBUTOR,False,False,False,0.68,0.1868131868,0.2222222222,0.3776223776,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
Andrew mentioned that the issue could be due the class being unloaded before the classloader.,Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,0.6,0.1648351648,0.3333333333,0.3811188811,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
We do have two such paths that unload classes without removing any owned methods from the MethodHT(CODE & CODE).,Solution Discussion,True,112,CONTRIBUTOR,False,False,False,0.72,0.1978021978,0.4444444444,0.3846153846,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
"As a related experiment, I attempted to print the classes being unloaded, and the contents of the Method HT.",Investigation and Exploration,False,108,CONTRIBUTOR,False,False,False,0.76,0.2087912088,0.5555555556,0.3881118881,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
To effectively paint a picture if any method is still in the HT that belonged to an class that was previously unloaded.,Investigation and Exploration,False,119,CONTRIBUTOR,False,False,False,0.88,0.2417582418,0.6666666667,0.3916083916,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
"I tried variations of both of JIT, and VM class signature tracing mechanisms without any luck reproducing the issue when enabled.",Investigation and Exploration,False,129,CONTRIBUTOR,False,False,False,0.84,0.2307692308,0.7777777778,0.3951048951,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
Next steps would be to implement cleanup of the MethodHT in the two Hooks above where the class is separately unloaded from it's class-loader.,Investigation and Exploration,False,142,CONTRIBUTOR,False,False,False,1.0,0.2747252747,0.8888888889,0.3986013986,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
Hope to have the results shortly.,Social Conversation,False,33,CONTRIBUTOR,False,False,False,0.24,0.06593406593,1.0,0.4020979021,0.7754665319,0.2245334681,0.03674198804,0.0009798068887
"@andrewcraik Similarly to MethodHT, the DLT Record table is also not being updated when classes are unloaded.",Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.85,0.1868131868,0.5,0.4055944056,0.775645764,0.224354236,0.0009798068887,0.1631008731
"I suspect then we need to clean up both tables since the method is tracked both in CODE(CODE), and CODE.",Investigation and Exploration,True,104,CONTRIBUTOR,False,False,False,1.0,0.2197802198,1.0,0.4090909091,0.775645764,0.224354236,0.0009798068887,0.1631008731
"A Summary of what I've picked up

As we've established, the failure occurs because we have an entry in the J9Method_HT, that carries a reference to a J9Method object that has been corrupted in some way.",Investigation and Exploration,False,204,CONTRIBUTOR,False,False,False,0.7647058824,0.4285714286,0.04761904762,0.4125874126,0.8054811495,0.1945188505,0.1631008731,0.2634355634
Below is what the J9Method reference points to at the point of the crash.,Investigation and Exploration,False,73,CONTRIBUTOR,False,False,False,0.2745098039,0.1538461538,0.09523809524,0.4160839161,0.8054811495,0.1945188505,0.1631008731,0.2634355634
The crash happens here.,Investigation and Exploration,False,23,CONTRIBUTOR,False,False,False,0.07843137255,0.04395604396,0.1428571429,0.4195804196,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/CompilationThread.cpp#L12597
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/CompilationThread.cpp#L12608

CODE

**J9Method_HT**",Investigation and Exploration,True,295,CONTRIBUTOR,False,False,False,0.137254902,0.07692307692,0.1904761905,0.4230769231,0.8054811495,0.1945188505,0.1631008731,0.2634355634
This is a part of the DLT Optimization.,Investigation and Exploration,False,39,CONTRIBUTOR,False,False,False,0.1568627451,0.08791208791,0.2380952381,0.4265734266,0.8054811495,0.1945188505,0.1631008731,0.2634355634
The Dynamic Loop Transformation attempts to identify a selection of methods to be optimized.,Investigation and Exploration,False,92,CONTRIBUTOR,False,False,False,0.2745098039,0.1538461538,0.2857142857,0.4300699301,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"Keeping in mind the structure of DLTTracking
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/CompilationRuntime.hpp#L316-L329
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/CompilationThread.cpp#L12653
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/CompilationThread.cpp#L12712

Any method added to the table has been requested a DLT.",Investigation and Exploration,False,512,CONTRIBUTOR,False,False,False,0.4901960784,0.2747252747,0.3333333333,0.4335664336,0.8054811495,0.1945188505,0.1631008731,0.2634355634
Any method that has been DLT compiled also has a DLTRecord added to the DLTRecord Table.,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.3137254902,0.1758241758,0.380952381,0.4370629371,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"As an important note, the DLTRecord clean up can also suffer from the same issue.",Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.2941176471,0.1648351648,0.4285714286,0.4405594406,0.8054811495,0.1945188505,0.1631008731,0.2634355634
It's quite odd that we didn't crash during the clean-up of the DLTRecord table since that is done first.,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.3921568627,0.2197802198,0.4761904762,0.4440559441,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"These two tables only have records removed during class unloading, and the fact that we didn't crash in the DLTRecord clean up routine means that the method most likely was not DLT compiled.
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/HookedByTheJit.cpp#L2001-L2005
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/CompilationThread.cpp#L3020

**Class/Loader Unloading**
As we know, this issue occurs during class unloading.",Investigation and Exploration,False,546,CONTRIBUTOR,False,False,False,1.0,0.5604395604,0.5238095238,0.4475524476,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"Specifically when the GC invokes the CODE, and CODE, since this is where the JIT does the cleaning up of the CODE table.",Investigation and Exploration,True,120,CONTRIBUTOR,False,False,False,0.4509803922,0.2527472527,0.5714285714,0.451048951,0.8054811495,0.1945188505,0.1631008731,0.2634355634
**GC Classloader unloading invokes the hooks.,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.1176470588,0.06593406593,0.619047619,0.4545454545,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"**
https://github.com/eclipse/openj9/blob/64ec0ba89116cf222135206decd82e66b05c6a4a/runtime/gc_glue_java/GlobalCollectorDelegate.cpp#L458",Investigation and Exploration,False,137,CONTRIBUTOR,False,False,False,0.03921568627,0.02197802198,0.6666666667,0.458041958,0.8054811495,0.1945188505,0.1631008731,0.2634355634
**Sequence of these hooks by the GC.,Investigation and Exploration,False,36,CONTRIBUTOR,False,False,False,0.137254902,0.07692307692,0.7142857143,0.4615384615,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"**

https://github.com/eclipse/openj9/blob/11f2b723867955926f2f10d545c90d708a304c63/runtime/gc_base/ClassLoaderManager.cpp#L405-L409

https://github.com/eclipse/openj9/blob/11f2b723867955926f2f10d545c90d708a304c63/runtime/gc_base/ClassLoaderManager.cpp#L343-L359

Respective Hooks handled by JIT:
https://github.com/eclipse/openj9/blob/27e93e6cae493f2a3945528330adf5faacec3e4b/runtime/compiler/control/HookedByTheJit.cpp#L6557-L6560

Given this sequence of hooks",Investigation and Exploration,False,471,CONTRIBUTOR,False,False,False,0.3529411765,0.1978021978,0.7619047619,0.465034965,0.8054811495,0.1945188505,0.1631008731,0.2634355634
", it becomes unlikely that classes are unloaded before the classloader.",Investigation and Exploration,False,71,CONTRIBUTOR,False,False,False,0.1960784314,0.1098901099,0.8095238095,0.4685314685,0.8054811495,0.1945188505,0.1631008731,0.2634355634
We've conducted a small experiment to clean up the table during class unloading.,Testing,False,80,CONTRIBUTOR,False,False,False,0.2745098039,0.1538461538,0.8571428571,0.472027972,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"That did cause the issue to disappear, however as we've expressed the lightest of changes causes this issue to disappear.",Testing,False,121,CONTRIBUTOR,False,False,False,0.4117647059,0.2307692308,0.9047619048,0.4755244755,0.8054811495,0.1945188505,0.1631008731,0.2634355634
I believe all this is doing is changing timing.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.1764705882,0.0989010989,0.9523809524,0.479020979,0.8054811495,0.1945188505,0.1631008731,0.2634355634
https://github.com/AlenBadel/openj9/commit/27e93e6cae493f2a3945528330adf5faacec3e4b,Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,0.01960784314,0.01098901099,1.0,0.4825174825,0.8054811495,0.1945188505,0.1631008731,0.2634355634
"Most likely the J9Class that the J9Method belongs to was valid at some point, and since has been freed at some point.",Investigation and Exploration,False,117,CONTRIBUTOR,False,False,False,0.5945945946,0.2417582418,0.2,0.486013986,0.8536703555,0.1463296445,0.2634355634,0.0006108387286
Meanwhile the entry was not removed from the table.,Investigation and Exploration,False,51,CONTRIBUTOR,False,False,False,0.2432432432,0.0989010989,0.4,0.4895104895,0.8536703555,0.1463296445,0.2634355634,0.0006108387286
"Unless proven, there is no guarantee that during the execution of each of these GC hooks that the the class, or it's methods will be alive until class unloading, where currently the tables are being cleaned up.",Investigation and Exploration,False,210,CONTRIBUTOR,False,False,False,1.0,0.4065934066,0.6,0.493006993,0.8536703555,0.1463296445,0.2634355634,0.0006108387286
"Hence, the proposed solution of cleaning up the table after each class unloading hook is still valid.",Solution Discussion,False,101,CONTRIBUTOR,False,False,False,0.4594594595,0.1868131868,0.8,0.4965034965,0.8536703555,0.1463296445,0.2634355634,0.0006108387286
@dmitripivkine Do you have any objections to this theory?,Social Conversation,False,57,CONTRIBUTOR,False,False,False,0.2432432432,0.0989010989,1.0,0.5,0.8536703555,0.1463296445,0.2634355634,0.0006108387286
"Sorry, I do not follow.",Social Conversation,False,23,CONTRIBUTOR,False,False,False,1.0,0.05494505495,0.5,0.5034965035,0.8537820938,0.1462179062,0.0006108387286,0.001070700924
Please explain,Social Conversation,False,14,CONTRIBUTOR,False,False,False,0.4,0.02197802198,1.0,0.506993007,0.8537820938,0.1462179062,0.0006108387286,0.001070700924
"Currently, there are four VM hooks that are used for class unloading, these hooks are invoked by the GC.",Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.6551724138,0.2087912088,0.2,0.5104895105,0.8539779528,0.1460220472,0.001070700924,0.001618376001
"(See https://github.com/eclipse/openj9/issues/8652#issuecomment-622437805).

The J9Method table, as well as the DLTRecordTable are only cleaned during the classloader unloading, and anonclasses unloading phases.",Investigation and Exploration,False,213,CONTRIBUTOR,False,False,False,0.7586206897,0.2417582418,0.4,0.513986014,0.8539779528,0.1460220472,0.001070700924,0.001618376001
"These tables are not cleaned upon class unloading, or classes unloading.",Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.3793103448,0.1208791209,0.6,0.5174825175,0.8539779528,0.1460220472,0.001070700924,0.001618376001
"The JIT should remove all entries inside DLTRecord, and J9MethodHT at the end of all four of the specified hooks rather than waiting for classloader unloading.",Investigation and Exploration,False,159,CONTRIBUTOR,False,False,False,0.8965517241,0.2857142857,0.8,0.520979021,0.8539779528,0.1460220472,0.001070700924,0.001618376001
This is done because there is not a guarantee that the unloaded class(es) and their respective methods will still be alive by the time that the classloader is unloaded.,Investigation and Exploration,False,168,CONTRIBUTOR,False,False,False,1.0,0.3186813187,1.0,0.5244755245,0.8539779528,0.1460220472,0.001070700924,0.001618376001
"I do not understand what ""not alive class"" means.",Social Conversation,False,49,CONTRIBUTOR,False,False,False,0.140625,0.0989010989,0.2,0.527972028,0.8542739958,0.1457260042,0.001618376001,0.002043575217
When GC discovered that non of classes from classloader have instances in object heap the decision of unloading this classloader is taken.,Investigation and Exploration,False,138,CONTRIBUTOR,False,False,False,0.34375,0.2417582418,0.4,0.5314685315,0.8542739958,0.1457260042,0.001618376001,0.002043575217
"GC walks all classes of this classloader and for each one
- set ""unloaded"" flag to j9class
- replace pointer to class object to -1
- remove class from active classes list (and re-assign CODE and CODE to itself)
- issue a hook ""class unloading""

When this loop is complete GC calls CODE and first thing this function triggers ""classloader unload"" hook.",Investigation and Exploration,True,357,CONTRIBUTOR,False,False,False,1.0,0.7032967033,0.6,0.534965035,0.8542739958,0.1457260042,0.001618376001,0.002043575217
All operation above done under VM Exclusive Access and CODE entered for write.,Investigation and Exploration,True,78,CONTRIBUTOR,False,False,False,0.203125,0.1428571429,0.8,0.5384615385,0.8542739958,0.1457260042,0.001618376001,0.002043575217
I understand that Compilation threads are still running while VM Exclusive Access is taken by GC as well as I would not pretend I understand how JIT maintain tables but your explanation does not convince me.,Investigation and Exploration,False,207,CONTRIBUTOR,False,False,False,0.5625,0.3956043956,1.0,0.541958042,0.8542739958,0.1457260042,0.001618376001,0.002043575217
"As the class unloading hook is called, the JIT currently doesn't clean up the table entries whose methods belong to the unloaded class.",Investigation and Exploration,False,135,CONTRIBUTOR,False,False,False,0.8518518519,0.2527472527,0.1111111111,0.5454545455,0.8546478187,0.1453521813,0.002043575217,0.001362640241
The JIT waits until the GC issues the class loader unload hook to do any clean up.,Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,0.6296296296,0.1868131868,0.2222222222,0.548951049,0.8546478187,0.1453521813,0.002043575217,0.001362640241
"Both the entries of J9Method_HT, as well as the DLTRecordTable contains references to J9Methods that are either candidates to be DLT compiled, or DLT compiled methods respectively.",Investigation and Exploration,False,180,CONTRIBUTOR,False,False,False,1.0,0.2967032967,0.3333333333,0.5524475524,0.8546478187,0.1453521813,0.002043575217,0.001362640241
"Therefore the clean up process entails, iterating through all entries in the table.",Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,0.4814814815,0.1428571429,0.4444444444,0.5559440559,0.8546478187,0.1453521813,0.002043575217,0.001362640241
"Dereferncing the j9method reference stored within the entry, and using it to obtain the J9Class.",Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.5555555556,0.1648351648,0.5555555556,0.5594405594,0.8546478187,0.1453521813,0.002043575217,0.001362640241
We compare the classloader and remove the entry if it corresponds to the classloader we're unloading.,Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,0.5925925926,0.1758241758,0.6666666667,0.5629370629,0.8546478187,0.1453521813,0.002043575217,0.001362640241
"The concern is that if there's a guarantee that the Class, or respective Methods are still accessible after the class unloading, and during classloader unloading.",Investigation and Exploration,False,162,CONTRIBUTOR,False,False,False,0.9259259259,0.2747252747,0.7777777778,0.5664335664,0.8546478187,0.1453521813,0.002043575217,0.001362640241
"Ultimately, we're trying to dereference something that has been deleted somewhere after the class unload hook is called, and when the class unloader hook is answered.",Solution Discussion,False,166,CONTRIBUTOR,False,False,False,0.962962963,0.2857142857,0.8888888889,0.5699300699,0.8546478187,0.1453521813,0.002043575217,0.001362640241
"The idea is that the clean-up should be done during class unloading, rather waiting for class unloading where the objects may not be alive by then.",Solution Discussion,False,147,CONTRIBUTOR,False,False,False,1.0,0.2967032967,1.0,0.5734265734,0.8546478187,0.1453521813,0.002043575217,0.001362640241
This sounds as fundamental problem missing respect for CODE when tables are modified.,Solution Discussion,True,85,CONTRIBUTOR,False,False,False,0.3513513514,0.1428571429,0.2,0.5769230769,0.854897081,0.145102919,0.001362640241,0.002579695967
There should not be any logical difference which hook handler serves this.,Solution Discussion,False,74,CONTRIBUTOR,False,False,False,0.3243243243,0.1318681319,0.4,0.5804195804,0.854897081,0.145102919,0.001362640241,0.002579695967
If there is a difference so there is a race between hook handler and table modification (which is wrong to fix by switching from one hook to another because of just reducing time window for race condition).,Solution Discussion,False,206,CONTRIBUTOR,False,False,False,1.0,0.4065934066,0.6,0.5839160839,0.854897081,0.145102919,0.001362640241,0.002579695967
"An alternate possibility it is collision between ""class unload"" and ""classloader unload"" hook handlers itself.",Solution Discussion,False,110,CONTRIBUTOR,False,False,False,0.4054054054,0.1648351648,0.8,0.5874125874,0.854897081,0.145102919,0.001362640241,0.002579695967
If this a case hook handlers should be fixed.,Solution Discussion,False,45,CONTRIBUTOR,False,False,False,0.2432432432,0.0989010989,1.0,0.5909090909,0.854897081,0.145102919,0.001362640241,0.002579695967
"We could have many theories why this is happening, or perhaps do we have a proper expectation to keep these objects alive after the class unloading hook is serviced.",Investigation and Exploration,False,165,CONTRIBUTOR,False,False,False,0.6444444444,0.3186813187,0.5,0.5944055944,0.8553689744,0.1446310256,0.002579695967,0.005301125006
"is wrong to fix by switching from one hook to another because of just reducing time window for race condition

The proposed solution is that unless we have an explicit expectation, the JIT needs to clean up the table entries during the respective hooks.",Solution Discussion,False,255,CONTRIBUTOR,False,False,False,1.0,0.4945054945,1.0,0.5979020979,0.8553689744,0.1446310256,0.002579695967,0.005301125006
"is wrong to fix by switching from one hook to another because of just reducing time window for race condition
 
 The proposed solution is that unless we have an explicit expectation, the JIT needs to clean up the table entries during the respective hooks.",Solution Discussion,False,257,CONTRIBUTOR,False,False,False,1.0,0.4945054945,0.5,0.6013986014,0.8563386878,0.1436613122,0.005301125006,0.003785967656
"[AlenBadel@27e93e6] URL 

I would like to see detailed explanation of mechanism how this problem occur as well of how proposed change help to fix the problem.",Social Conversation,False,160,CONTRIBUTOR,False,False,False,0.6,0.2967032967,1.0,0.6048951049,0.8563386878,0.1436613122,0.005301125006,0.003785967656
@dmitripivkine,Social Conversation,False,14,CONTRIBUTOR,False,False,False,0.01724137931,0.01098901099,0.1428571429,0.6083916084,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
maybe it's a very basic question,Investigation and Exploration,False,32,CONTRIBUTOR,False,False,False,0.1034482759,0.06593406593,0.2857142857,0.6118881119,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
"but we would like to get the following out of the way first:
Our current assumption (why the segm fault happens) is that at the time when **Class Loader**  unloading JIT hook is called, J9Method of some class (not necessarily belonging to that Class Loader) was already freed (and possibly corrupted by somebody reusing its memory).",Investigation and Exploration,False,333,CONTRIBUTOR,False,False,False,1.0,0.6373626374,0.4285714286,0.6153846154,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
"To confirm that assumption we need to know:

1) Is the following true: J9Method's memory  can be freed **iff**",Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,0.3620689655,0.2307692308,0.5714285714,0.6188811189,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
"its class is unloaded ?
2) Is the following true: class can be unloaded without its **Class Loader** being unloaded or, more precisely, before Class Loader unloading JIT hook is called for its class loader?",Investigation and Exploration,False,207,CONTRIBUTOR,False,False,False,0.6034482759,0.3846153846,0.7142857143,0.6223776224,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
Note that we currently remove all the references to J9Method on corresponding **Class Loader** unloading,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.2586206897,0.1648351648,0.8571428571,0.6258741259,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
but no on its **Class** unloading.,Investigation and Exploration,False,34,CONTRIBUTOR,False,False,False,0.1034482759,0.06593406593,1.0,0.6293706294,0.8570312397,0.1429687603,0.003785967656,0.0001609902828
"Please note that all the questions above are from GC prospective, eg. seen by GC and not by some other thread.",Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.6328671329,0.857060689,0.142939311,0.0001609902828,0.001731608401
Just wanted to put it out there that there is an assumption that compilation threads would not be running during STW.,Investigation and Exploration,False,117,CONTRIBUTOR,False,False,False,0.875,0.2307692308,0.2,0.6363636364,0.8573774451,0.1426225549,0.001731608401,0.0007841536263
"https://github.com/eclipse/openj9/blob/2a27ccf888c7f58edb5c3bd96bc0f29d0a103b31/runtime/compiler/control/CompilationThread.cpp#L12601-L12603

The failure that we're seeing could occur if the mutex is not being used properly.",Investigation and Exploration,False,226,CONTRIBUTOR,False,False,False,0.7083333333,0.1868131868,0.4,0.6398601399,0.8573774451,0.1426225549,0.001731608401,0.0007841536263
There is a possibility in this case that we could be removing an object from the HT while another thread is adding an entry.,Investigation and Exploration,False,124,CONTRIBUTOR,False,False,False,1.0,0.2637362637,0.6,0.6433566434,0.8573774451,0.1426225549,0.001731608401,0.0007841536263
Hence we could be removing a entry other than the one we were intending.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.5833333333,0.1538461538,0.8,0.6468531469,0.8573774451,0.1426225549,0.001731608401,0.0007841536263
Leaving the intended entry in the HT as it's j9method reference becomes invalid.,Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.5416666667,0.1428571429,1.0,0.6503496503,0.8573774451,0.1426225549,0.001731608401,0.0007841536263
Could we get rid of the mutex?,Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,0.25,0.07692307692,0.5,0.6538461538,0.8575208872,0.1424791128,0.0007841536263,0.009320490058
How much perf would it cost to flush the compilation queue and any active compilations on class unload (marking anything queued for immediate compilation on the next invocation)?,Investigation and Exploration,False,178,CONTRIBUTOR,False,False,False,1.0,0.3076923077,1.0,0.6573426573,0.8575208872,0.1424791128,0.0007841536263,0.009320490058
"@dmitripivkine maybe it's a very basic question but we would like to get the following out of the way first:
 Our current assumption is that at the time when **Class Loader** unloading JIT hook is called, J9Method of some class (not necessarily belonging to that Class Loader) was already freed (and possibly corrupted by somebody reusing its memory).",Investigation and Exploration,False,352,CONTRIBUTOR,False,False,False,0.6483516484,0.6483516484,0.03571428571,0.6608391608,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"We need to know:
> 
> 1. Is the following true: J9Method's memory  can be freed **iff**",Investigation and Exploration,False,89,CONTRIBUTOR,False,False,False,0.1978021978,0.1978021978,0.07142857143,0.6643356643,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"its class is unloaded ?
> 2. Is the following true: class can be unloaded without its **Class Loader** being unloaded or, more precisely, before Class Loader unloading JIT hook is called for its class loader?",Investigation and Exploration,False,209,CONTRIBUTOR,False,False,False,0.3846153846,0.3846153846,0.1071428571,0.6678321678,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
Note that we currently remove all the references to J9Method on corresponding **Class Loader**,Investigation and Exploration,False,94,CONTRIBUTOR,False,False,False,0.1538461538,0.1538461538,0.1428571429,0.6713286713,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
unloading but no on its **Class** unloading.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.07692307692,0.07692307692,0.1785714286,0.6748251748,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
@gita-omr,Social Conversation,False,9,CONTRIBUTOR,False,False,False,0.02197802198,0.02197802198,0.2142857143,0.6783216783,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"There is a number of fundamental facts about classes:
- j9class or **any it's part** must be valid if class is a member of active (not unloaded) Classloader (with exception of partially initialized classes at class loading time)
- GC unloads classes single threaded (at least at the moment) under VM Exclusive Access and mutex CODE acquired for Write (exclusively)
- GC unloading classes on Classloader basis.",Investigation and Exploration,True,412,CONTRIBUTOR,False,False,False,0.7362637363,0.7362637363,0.25,0.6818181818,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"It means that class can be unloaded if it or any other class in this Classloader have no instances (objects) in the heap
- If GC makes a decision to unload Classloader(s)",Investigation and Exploration,False,171,CONTRIBUTOR,False,False,False,0.3516483516,0.3516483516,0.2857142857,0.6853146853,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"it is done in three phases:
   1) GC walks all RAM (CODE) classes and do preparation to it's unloading for each one:
        * set ""unloaded"" flag to j9class
        * replace pointer to class object to -1
        * remove class from active classes list (and re-assign ""previous"" and ""next"" to itself)
         * issues a hook ""class unloading"" about each class about to be unloaded
       At the end of the walk issues ""classes unloaded"" summary hook **with list of classes about to be unloaded**
    2) Classloader unloading logical changes.",Investigation and Exploration,True,550,CONTRIBUTOR,False,False,False,1.0,1.0,0.3214285714,0.6888111888,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"At the very beginning of this phase ""classloader unloading"" hook is issued.",Investigation and Exploration,False,75,CONTRIBUTOR,False,False,False,0.1318681319,0.1318681319,0.3571428571,0.6923076923,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
From the point of correctness it is not safe to use any data related with this classloader after **exiting** from this hook handler.,Investigation and Exploration,False,132,CONTRIBUTOR,False,False,False,0.2527472527,0.2527472527,0.3928571429,0.6958041958,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"3) Walk through Classloader structures and release unnecessary native memory

All above is correct with an exception for Anonymous classes which:
 - always owned be special Anonymous Classloader (but class parent Classloader might be different)
 - Anonymous Classloader can not be unloaded
 - can be unloaded on individual basis
 - special hook ""anonymous classes unloaded"" is issued at phase 1 end with **attached list of anonymous classes about to be unloaded**",Investigation and Exploration,False,469,CONTRIBUTOR,False,False,False,0.7912087912,0.7912087912,0.4285714286,0.6993006993,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"So answers on your questions if I understand them correctly:

>1. Is the following true: J9Method's memory  can be freed **iff**",Social Conversation,False,130,CONTRIBUTOR,False,False,False,0.2527472527,0.2527472527,0.4642857143,0.7027972028,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
its class is unloaded ?,Investigation and Exploration,False,23,CONTRIBUTOR,False,False,False,0.04395604396,0.04395604396,0.5,0.7062937063,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"Any memory reachable from Classloader **would not** be freed until ""classloader unloaded"" hook is exited

>2. Is the following true: class can be unloaded without its **Class Loader** being unloaded or, more precisely, before Class Loader unloading JIT hook is called for its class loader?",Investigation and Exploration,False,291,CONTRIBUTOR,False,False,False,0.5054945055,0.5054945055,0.5357142857,0.7097902098,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
No. Class and Classloader always unloaded together (with exception of Anonymous Class,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,0.1318681319,0.1318681319,0.5714285714,0.7132867133,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"but it's Classloader is never unloaded, so it is out of context of your question)",Social Conversation,False,81,CONTRIBUTOR,False,False,False,0.1648351648,0.1648351648,0.6071428571,0.7167832168,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"Now, if you believe that some action is not correct for ""classloader unloaded"" hook but it is for ""classes unloaded"" your code has fundamental problem.",Investigation and Exploration,False,151,CONTRIBUTOR,False,False,False,0.2747252747,0.2747252747,0.6428571429,0.7202797203,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
Either it does not respect mutex (but must) and code with missed mutex check interfere with hook handler or handlers of different hooks interfere each other.,Investigation and Exploration,False,157,CONTRIBUTOR,False,False,False,0.2857142857,0.2857142857,0.6785714286,0.7237762238,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
I afraid that modifying code without understanding of the problem source can make situation worse.,Social Conversation,False,98,CONTRIBUTOR,False,False,False,0.1648351648,0.1648351648,0.7142857143,0.7272727273,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
For example change time window for possible race to make it much harder to reproduce.,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,0.1648351648,0.1648351648,0.75,0.7307692308,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"There are two notes @andrewcraik:
- Just friendly reminder that ""classes unloading"" and ""anonymous classes unloading"" hooks passed list of classes to be unloaded attached to the hook as parameter (""classes"" list included ""anonymous classes"" as well).",Investigation and Exploration,False,251,CONTRIBUTOR,False,False,False,0.4065934066,0.4065934066,0.7857142857,0.7342657343,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
I should admit passing of the list use to be broken but I fixed it about eight years ago.,Social Conversation,False,89,CONTRIBUTOR,False,False,False,0.2087912088,0.2087912088,0.8214285714,0.7377622378,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"I believe using of this list is more effective then iterate **all** classes in the system and look for ""unloaded"" flag.
- There is known performance issue related with handling of class unloading related hooks in JIT (particular that one walks tables for each element and create N**2 behaviour).",Investigation and Exploration,False,296,CONTRIBUTOR,False,False,False,0.5384615385,0.5384615385,0.8571428571,0.7412587413,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
"I would be very accurate with table walks in hooks handlers

>Could we get rid of the mutex?",Investigation and Exploration,False,94,CONTRIBUTOR,False,False,False,0.2087912088,0.2087912088,0.8928571429,0.7447552448,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
@gacholio I would love to!,Social Conversation,False,26,CONTRIBUTOR,False,False,False,0.05494505495,0.05494505495,0.9285714286,0.7482517483,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
I believe we have more problems with fake Exclusive then benefits from it.,Social Conversation,False,74,CONTRIBUTOR,False,False,False,0.1428571429,0.1428571429,0.9642857143,0.7517482517,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
Well it is not my call obviously,Social Conversation,False,32,CONTRIBUTOR,False,False,False,0.07692307692,0.07692307692,1.0,0.7552447552,0.8592258469,0.1407741531,0.009320490058,0.0008804396806
@dmitripivkine thanks for the excellent response!,Social Conversation,False,49,CONTRIBUTOR,False,False,False,0.375,0.06593406593,0.2,0.7587412587,0.8593869021,0.1406130979,0.0008804396806,0.03684751755
"This is exactly the reason we wanted to check with you first, before applying a fix.",Social Conversation,False,84,CONTRIBUTOR,False,False,False,1.0,0.1758241758,0.4,0.7622377622,0.8593869021,0.1406130979,0.0008804396806,0.03684751755
So let's consider our next assumption: https://github.com/eclipse/openj9/issues/8652#issuecomment-624327598,Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,0.4375,0.07692307692,0.6,0.7657342657,0.8593869021,0.1406130979,0.0008804396806,0.03684751755
"But from what I understand, compilation thread is blocked during class unloading.",Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.75,0.1318681319,0.8,0.7692307692,0.8593869021,0.1406130979,0.0008804396806,0.03684751755
Why do we think it's not?,Investigation and Exploration,False,25,CONTRIBUTOR,False,False,False,0.375,0.06593406593,1.0,0.7727272727,0.8593869021,0.1406130979,0.0008804396806,0.03684751755
That's not true; the compilation threads can still run during a STW phase; it will only block if it needs to acquire VM Access and some other thread holds exclusive VM Access.,Investigation and Exploration,False,175,CONTRIBUTOR,False,False,False,0.6153846154,0.3516483516,0.07692307692,0.7762237762,0.86612727,0.13387273,0.03684751755,0.005897328255
"It's at this point that the JIT releases the class unload mutex; if class unloading then happens, it will abort the current compilation.",Investigation and Exploration,False,136,CONTRIBUTOR,False,False,False,0.4423076923,0.2527472527,0.1538461538,0.7797202797,0.86612727,0.13387273,0.03684751755,0.005897328255
Class unloading will also cause all compilation requests of unloaded classes to be removed from the queue.,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.3269230769,0.1868131868,0.2307692308,0.7832167832,0.86612727,0.13387273,0.03684751755,0.005897328255
I'm assuming you mean the class unload mutex right?,Social Conversation,False,51,CONTRIBUTOR,False,False,False,0.1730769231,0.0989010989,0.3076923077,0.7867132867,0.86612727,0.13387273,0.03684751755,0.005897328255
I believe the history behind that mutex is that the JIT used to acquire VMAccess for the entirety of the compilation.,Investigation and Exploration,False,117,CONTRIBUTOR,False,False,False,0.4038461538,0.2307692308,0.3846153846,0.7902097902,0.86612727,0.13387273,0.03684751755,0.005897328255
However this meant that no GC could happen during a compilation.,Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.2115384615,0.1208791209,0.4615384615,0.7937062937,0.86612727,0.13387273,0.03684751755,0.005897328255
The reason the JIT acquired VMAccess is because it needs to know that the class hierarchy did not change during a compilation.,Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,0.4230769231,0.2417582418,0.5384615385,0.7972027972,0.86612727,0.13387273,0.03684751755,0.005897328255
The class unload mutex is a compromise to allow GC to occur but also prevent class unloading during a compilation.,Investigation and Exploration,False,114,CONTRIBUTOR,False,False,False,0.3846153846,0.2197802198,0.6153846154,0.8006993007,0.86612727,0.13387273,0.03684751755,0.005897328255
"How much perf would it cost to flush the compilation queue

I don't know about perf, but I don't think the JIT would be functionally correct if class unloading happened during the compilation.",Investigation and Exploration,False,194,CONTRIBUTOR,False,False,False,0.6538461538,0.3736263736,0.6923076923,0.8041958042,0.86612727,0.13387273,0.03684751755,0.005897328255
The reason is because the JIT can hold on to various J9Class & J9Method pointers in various structures.,Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,0.3269230769,0.1868131868,0.7692307692,0.8076923077,0.86612727,0.13387273,0.03684751755,0.005897328255
"Purging the queue requires setting the flag to interrupt the compilation, which is only checked by the comp thread at specific points.",Investigation and Exploration,False,134,CONTRIBUTOR,False,False,False,0.4230769231,0.2417582418,0.8461538462,0.8111888112,0.86612727,0.13387273,0.03684751755,0.005897328255
"If those J9Class/J9Method pointers were to stop being valid before we reached that check point, we could do an invalid access and seg fault.",Investigation and Exploration,False,140,CONTRIBUTOR,False,False,False,0.4807692308,0.2747252747,0.9230769231,0.8146853147,0.86612727,0.13387273,0.03684751755,0.005897328255
"We also can't just create a JNI ref for the class of the method being compiled, because when inlining or peeking or looking at statics or anything like that, the JIT would need to create JNI refs for every single class it wants to look at, which could be a massive set.",Investigation and Exploration,False,269,CONTRIBUTOR,False,False,False,1.0,0.5714285714,1.0,0.8181818182,0.86612727,0.13387273,0.03684751755,0.005897328255
"Just friendly reminder that ""classes unloading"" and ""anonymous classes unloading"" hooks passed list of classes to be unloaded attached to the hook as parameter (""classes"" list included ""anonymous classes"" as well).",Investigation and Exploration,False,214,CONTRIBUTOR,False,False,False,0.8157894737,0.3406593407,0.2,0.8216783217,0.8672060445,0.1327939555,0.005897328255,0.0001401924951
"I believe using of this list is more effective then iterate all classes in the system and look for ""unloaded"" flag.",Investigation and Exploration,False,115,CONTRIBUTOR,False,False,False,0.5526315789,0.2307692308,0.4,0.8251748252,0.8672060445,0.1327939555,0.005897328255,0.0001401924951
"It is on the list of things to look at

> There is known performance issue related with handling of class unloading related hooks in JIT (particular that one walks tables for each element and create N**2 behaviour).",Investigation and Exploration,False,217,CONTRIBUTOR,False,False,False,1.0,0.4175824176,0.6,0.8286713287,0.8672060445,0.1327939555,0.005897328255,0.0001401924951
"I would be very accurate with table walks in hooks handlers

If you are referring to the runtime assumption table this N**2 behavior has been fixed.",Investigation and Exploration,False,150,CONTRIBUTOR,False,False,False,0.7105263158,0.2967032967,0.8,0.8321678322,0.8672060445,0.1327939555,0.005897328255,0.0001401924951
The work is amortized and is now linear on average.,Task Progress,False,51,CONTRIBUTOR,False,False,False,0.2631578947,0.1098901099,1.0,0.8356643357,0.8672060445,0.1327939555,0.005897328255,0.0001401924951
"@dmitripivkine in regards to:
> An alternate possibility it is collision between ""class unload"" and ""classloader unload"" hook handlers itself.",Social Conversation,False,143,CONTRIBUTOR,False,False,False,0.350877193,0.2197802198,0.1428571429,0.8391608392,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
The issue here is not the tables being corrupted - the j9method pointer is pointing to unaccessible memory (the table is intact) - that pointer is not modified as part of clean-up so unless there is some kind of double free issue happening the issue is the pointer is stale and the clean-up was not done correctly.,Investigation and Exploration,False,314,CONTRIBUTOR,False,False,False,1.0,0.6263736264,0.2857142857,0.8426573427,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
"The fundamentally weird thing we are doing is derefing the j9method pointer to get to the classloader to see if we need to clean up the entry

I do not think this is a race between hooks - this clean up is currently in one place.",Investigation and Exploration,False,231,CONTRIBUTOR,False,False,False,0.8070175439,0.5054945055,0.4285714286,0.8461538462,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
The issue seems to be the j9method* is not valid.,Investigation and Exploration,False,49,CONTRIBUTOR,False,False,False,0.1754385965,0.1098901099,0.5714285714,0.8496503497,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
If that memory CANNOT be deallocated before the code runs to unload the unloader then quite how the j9method went stale is a mystery.,Investigation and Exploration,False,133,CONTRIBUTOR,False,False,False,0.4210526316,0.2637362637,0.7142857143,0.8531468531,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
Could someone suggest some hooks to trace j9methods so we can see what that address was allocated to and when it was freed by the VM?,Investigation and Exploration,False,133,CONTRIBUTOR,False,False,False,0.4561403509,0.2857142857,0.8571428571,0.8566433566,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
That way we can try to reconcile what the JIT is seeing with what the VM is seeing.,Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,0.3157894737,0.1978021978,1.0,0.8601398601,0.8672316894,0.1327683106,0.0001401924951,0.007180628786
"At a glance, the hooks are definitely invoked before any memory segments are freed, but the GC team will need to confirm this is always true.",Investigation and Exploration,False,141,CONTRIBUTOR,False,False,False,1.0,0.2857142857,1.0,0.8636363636,0.8685452129,0.1314547871,0.007180628786,0.001098431308
As I stated before non of memory accessible from j9class/j9classloader is released before hooks are triggered.,Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,1.0,0.1868131868,0.5,0.8671328671,0.8687461445,0.1312538555,0.001098431308,0.001217055727
"I also double check that any subscriber of ""class unloading"" and ""classes unloading"" hooks don't do this.",Investigation and Exploration,False,105,CONTRIBUTOR,False,False,False,1.0,0.1868131868,1.0,0.8706293706,0.8687461445,0.1312538555,0.001098431308,0.001217055727
The mystery deepens - @gacholio is there a way for us to get a log of the memory addresses of j9methods in a JVM run?,Investigation and Exploration,False,117,CONTRIBUTOR,False,False,False,1.0,0.2637362637,0.5,0.8741258741,0.8689687756,0.1310312244,0.001217055727,0.0001710040325
I'm trying to think if we can verify if the pointer was ever valid or not...,Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,0.6666666667,0.1758241758,1.0,0.8776223776,0.8689687756,0.1310312244,0.001217055727,0.0001710040325
"The tracepoint here may be of use:
https://github.com/eclipse/openj9/blob/fcb6d3f438eedd4c13116b4a04e13b246162070f/runtime/vm/createramclass.cpp#L2557-L2558",Investigation and Exploration,False,157,CONTRIBUTOR,False,False,False,1.0,0.0989010989,1.0,0.8811188811,0.8690000566,0.1309999434,0.0001710040325,0.0003289131615
I guess may be it is does not matter what triggered table walk (hook for class unloading) but just asynchronous nature of event?,Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,1.0,0.2527472527,0.3333333333,0.8846153846,0.8690602234,0.1309397766,0.0003289131615,0.03308234769
Is it possible table just not walkable some short periods of time (like list under modification for example).,Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.7826086957,0.1978021978,0.6666666667,0.8881118881,0.8690602234,0.1309397766,0.0003289131615,0.03308234769
In this case triggering event content might be irrelevant,Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,0.3913043478,0.0989010989,1.0,0.8916083916,0.8690602234,0.1309397766,0.0003289131615,0.03308234769
"If it helps, here's some more dumps from last night's https://ci.adoptopenjdk.net/view/Test_openjdk/job/Test_openjdk8_j9_sanity.openjdk_ppc64le_linux/194/console run
https://ibm.box.com/shared/static/ttcnd9cp0y1wvp0n8snoiydymdlgo4oh.gz",Investigation and Exploration,False,236,NONE,True,False,False,1.0,0.1538461538,1.0,0.8951048951,0.8751118439,0.1248881561,0.03308234769,0.01532565869
As an experiment I've added a post-removal verification routine which runs after onClassUnloading.,Testing,False,98,CONTRIBUTOR,False,False,False,0.652173913,0.1648351648,0.125,0.8986013986,0.8779153049,0.1220846951,0.01532565869,0.003869158807
"It is to assert if it finds an entry with the same unloaded classloader, which was to be removed during the onClassUnloading routine.",Investigation and Exploration,False,133,CONTRIBUTOR,False,False,False,1.0,0.2527472527,0.25,0.9020979021,0.8779153049,0.1220846951,0.01532565869,0.003869158807
"https://github.com/AlenBadel/openj9/commit/2ee9e7aca4aa4bb85501a3f6d59e695a98a118ad

The result was that we've hit the assert.",Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,0.4782608696,0.1208791209,0.375,0.9055944056,0.8779153049,0.1220846951,0.01532565869,0.003869158807
Which means most likely we're experiencing a race condition.,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.3913043478,0.0989010989,0.5,0.9090909091,0.8779153049,0.1220846951,0.01532565869,0.003869158807
Perhaps again this is the most likely scenario.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.347826087,0.08791208791,0.625,0.9125874126,0.8779153049,0.1220846951,0.01532565869,0.003869158807
I'm trying to get a core file which has more than one thread's context.,Task Progress,False,71,CONTRIBUTOR,False,False,False,0.6086956522,0.1538461538,0.75,0.9160839161,0.8779153049,0.1220846951,0.01532565869,0.003869158807
I suspect that the compilation threads are somewhere executing DLT related logic.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.5217391304,0.1318681319,0.875,0.9195804196,0.8779153049,0.1220846951,0.01532565869,0.003869158807
I've tried CODE but that has prevented the failure from occurring.,Solution Discussion,True,66,CONTRIBUTOR,False,False,False,0.5217391304,0.1318681319,1.0,0.9230769231,0.8779153049,0.1220846951,0.01532565869,0.003869158807
"Looking at the java core looks like the mutex is unowned. 

CODE

To Note where the mutex is reserved:

CODE
https://github.com/eclipse/openj9/blob/64ec0ba89116cf222135206decd82e66b05c6a4a/runtime/gc_glue_java/GlobalCollectorDelegate.cpp#L172-L176

This occurs right before the CODE, which calls the unloading hooks.",Solution Discussion,True,325,CONTRIBUTOR,False,False,False,1.0,0.4065934066,0.5,0.9265734266,0.8786230746,0.1213769254,0.003869158807,0.001947289162
"CODE

https://github.com/eclipse/omr/blob/7e2e1c4bbb916130d1578f8b2560220af97d1a35/gc/base/standard/ParallelGlobalGC.cpp#L454-L465

Looking through the classunload monitors on the JIT side to see where they're reserved.",Solution Discussion,True,223,CONTRIBUTOR,False,False,False,0.4864864865,0.1978021978,1.0,0.9300699301,0.8786230746,0.1213769254,0.003869158807,0.001947289162
@dmitripivkine @dsouzai @mpirvu could you confirm that the monitor above is the right one (used for class unloading by GC and compilation thread) ?,Solution Discussion,False,147,CONTRIBUTOR,False,False,False,1.0,0.2527472527,0.5,0.9335664336,0.8789792843,0.1210207157,0.001947289162,0.001105363904
Do you know where compilation threads reserves it?,Solution Discussion,False,50,CONTRIBUTOR,False,False,False,0.347826087,0.08791208791,1.0,0.9370629371,0.8789792843,0.1210207157,0.001947289162,0.001105363904
"Precisely looks this is the owner of the Monitor. 

CODE

Same as: https://github.com/eclipse/openj9/issues/8652#issuecomment-614666959

> this thread should be mutator thread initiated GC (and became GC Master Thread for this GC).",Solution Discussion,True,237,CONTRIBUTOR,False,False,False,1.0,0.3516483516,1.0,0.9405594406,0.8791814841,0.1208185159,0.001105363904,0.0006146901707
Probably.,Social Conversation,False,9,CONTRIBUTOR,False,False,False,0.3333333333,0.01098901099,0.5,0.9440559441,0.8792939269,0.1207060731,0.0006146901707,5.93e-05
Should be CODE,Solution Discussion,True,14,CONTRIBUTOR,False,False,False,1.0,0.03296703297,1.0,0.9475524476,0.8792939269,0.1207060731,0.0006146901707,5.93e-05
"Do you know where compilation threads reserves it?

https://github.com/eclipse/openj9/blob/2293207e22e09b24f1d385c5bc7f9f5a479211a1/runtime/compiler/control/CompilationThread.cpp#L8904-L8925

It is not unexpected that at a STW phase, the comp thread might not be the owner of the classunload mutext.",Solution Discussion,False,303,CONTRIBUTOR,False,False,False,1.0,0.3516483516,0.5,0.951048951,0.8793047766,0.1206952234,5.93e-05,0.2377056189
"The reason is because of this code:

https://github.com/eclipse/openj9/blob/2293207e22e09b24f1d385c5bc7f9f5a479211a1/runtime/compiler/env/VMJ9.cpp#L318-L351",Solution Discussion,False,158,CONTRIBUTOR,False,False,False,0.28125,0.0989010989,1.0,0.9545454545,0.8793047766,0.1206952234,5.93e-05,0.2377056189
Sounds like we wanted this problem to be bigger than it actually was.,Social Conversation,False,69,CONTRIBUTOR,False,False,False,1.0,0.1428571429,0.3333333333,0.958041958,0.9227873075,0.07721269245,0.2377056189,0.1633866501
Submitted a PR that resolves this.,Solution Discussion,False,34,CONTRIBUTOR,False,False,False,0.4615384615,0.06593406593,0.6666666667,0.9615384615,0.9227873075,0.07721269245,0.2377056189,0.1633866501
See: https://github.com/eclipse/openj9/pull/9515,Social Conversation,False,48,CONTRIBUTOR,False,False,False,0.1538461538,0.02197802198,1.0,0.965034965,0.9227873075,0.07721269245,0.2377056189,0.1633866501
I've confirmed internally that commit resolves the issue by running the jdk_nio test suite about 60 times on ppc64le (JDK8).,Solution Discussion,False,124,CONTRIBUTOR,False,False,False,1.0,0.2307692308,0.25,0.9685314685,0.952674969,0.04732503098,0.1633866501,0.04052333396
(Prior failure rate was 1/20).,Observed Bug Behaviour,False,30,CONTRIBUTOR,False,False,False,0.2380952381,0.05494505495,0.5,0.972027972,0.952674969,0.04732503098,0.1633866501,0.04052333396
I don't think the merged commit has made it's way to an adoptopenjdk nightly.,Social Conversation,False,77,CONTRIBUTOR,False,False,False,0.6666666667,0.1538461538,0.75,0.9755244755,0.952674969,0.04732503098,0.1633866501,0.04052333396
@M-Davies feel free to run jdk_nio when there's an available build to confirm.,Social Conversation,False,78,CONTRIBUTOR,False,False,False,0.6666666667,0.1538461538,1.0,0.979020979,0.952674969,0.04732503098,0.1633866501,0.04052333396
@AlenBadel Kicked off https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/3055/,Task Progress,False,85,NONE,True,False,False,1.0,0.04395604396,1.0,0.9825174825,0.9600877392,0.0399122608,0.04052333396,0.04251684043
"@AlenBadel Kicked off https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/3055/

I'm not sure why selecting nightly on a grinder hasn't really been pulling the latest nightly.",Task Progress,False,183,CONTRIBUTOR,False,False,False,1.0,0.2307692308,0.5,0.986013986,0.9678651735,0.03213482652,0.04251684043,0.02407305416
"The build you're using is from a week ago, I think you need to explicitly specify the link to the nightly.",Social Conversation,False,106,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.9895104895,0.9678651735,0.03213482652,0.04251684043,0.02407305416
Tried again with a customized link https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/3064/,Task Progress,False,98,NONE,True,False,False,1.0,0.07692307692,1.0,0.993006993,0.9722687603,0.02773123974,0.02407305416,0.1515981559
Looks good to me.,Social Conversation,False,17,NONE,True,False,True,0.5714285714,0.04395604396,0.5,0.9965034965,1.0,0.0,0.1515981559,0.0
Thanks for all the work on this,Social Conversation,False,31,NONE,True,False,True,1.0,0.07692307692,1.0,1.0,1.0,0.0,0.1515981559,0.0
Support for compiling Windows on VS2017,Motivation,False,39,CONTRIBUTOR,True,True,False,0.2608695652,0.05084745763,0.5,0.006060606061,0.0,1.0,0.0,1.0
"OpenJDK is modifying Windows compilation for Java 11+ to use VS2017 and OpenJ9 should support the same.

https://bugs.openjdk.java.net/browse/JDK-8201267

See also #1684",Motivation,False,173,CONTRIBUTOR,True,True,False,1.0,0.1949152542,1.0,0.01212121212,0.0,1.0,0.0,1.0
Do we have an outlook for starting this?,Solution Discussion,False,40,NONE,False,False,False,1.0,0.06779661017,1.0,0.01818181818,0.3220776432,0.6779223568,1.0,0.0918912762
I will check it out to see how to get this work.,Contribution and Commitment,False,48,CONTRIBUTOR,False,False,False,1.0,0.1016949153,1.0,0.02424242424,0.3516737689,0.6483262311,0.0918912762,0.07735508958
"After fixing the setting issues with jre-image, paths to MSVC, etc,  I am currently working on other issues in config/mk scripts captured during compilation.",Task Progress,False,157,CONTRIBUTOR,False,False,False,1.0,0.2288135593,1.0,0.0303030303,0.3765881138,0.6234118862,0.07735508958,0.0357099532
"Currently it ended up with linking failure on unresolved external symbols as follows:

CODE

It seems the failure was triggered when linking (VS2017) the .obj files (compiled by mingw) with non-existent functions in libraries in VS2017 (___iob_func was already renamed to acrt_iob_func since VS2015)",Investigation and Exploration,True,303,CONTRIBUTOR,False,False,False,1.0,0.3983050847,0.3333333333,0.03636363636,0.3880894914,0.6119105086,0.0357099532,0.0001845122672
"Here's typical explanations online of what happens to ""unresolved external symbol __imp___iob_func""
[1] https://stackoverflow.com/questions/30412951/unresolved-external-symbol-imp-fprintf-and-imp-iob-func-sdl2
[2] https://msdn.microsoft.com/en-us/library/bb531344.aspx#BK_CRT

There are a bunch of discussions on ""unresolved external symbol __imp___iob_func"" but none of them works for our case (tried with legacy_stdio_definitions.lib but didn't work.",Solution Discussion,False,456,CONTRIBUTOR,False,False,False,0.9361702128,0.3728813559,0.6666666667,0.04242424242,0.3880894914,0.6119105086,0.0357099532,0.0001845122672
"might be in the wrong way?)

I am wondering whether it is possible to get the linker (VS2017) to pick up the static libraries ( __imp___iob_func) supported in mingw.",Solution Discussion,False,167,CONTRIBUTOR,False,False,False,0.6170212766,0.2457627119,1.0,0.04848484848,0.3880894914,0.6119105086,0.0357099532,0.0001845122672
We can try compiling the BytecodeInterpreter with VS2017 instead of mingw.,Solution Discussion,False,74,CONTRIBUTOR,True,False,False,0.9166666667,0.09322033898,0.2,0.05454545455,0.3881489186,0.6118510814,0.0001845122672,7.34e-05
"Perhaps it will work, even though 2010 and 2013 do not.",Solution Discussion,False,55,CONTRIBUTOR,True,False,False,0.9166666667,0.09322033898,0.4,0.06060606061,0.3881489186,0.6118510814,0.0001845122672,7.34e-05
As I recall 2010 and 2013 can't compile BytecodeInterpreter with optimization enabled.,Investigation and Exploration,False,86,CONTRIBUTOR,True,False,False,1.0,0.1016949153,0.6,0.06666666667,0.3881489186,0.6118510814,0.0001845122672,7.34e-05
It compiles with -O0,Investigation and Exploration,False,20,CONTRIBUTOR,True,False,False,0.3333333333,0.03389830508,0.8,0.07272727273,0.3881489186,0.6118510814,0.0001845122672,7.34e-05
but then we have stack related problems at runtime.,Investigation and Exploration,False,51,CONTRIBUTOR,True,False,False,0.75,0.07627118644,1.0,0.07878787879,0.3881489186,0.6118510814,0.0001845122672,7.34e-05
"THe issue is that by default the new VS uses a bunch of inlined functions for CRT functions, but mingw doesnt pick them up.",Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,1.0,0.2118644068,0.25,0.08484848485,0.3881725553,0.6118274447,7.34e-05,0.003403174815
IIRC this can be fixed by setting the CODE flag in the buildspec.,Solution Discussion,True,65,CONTRIBUTOR,False,False,False,0.52,0.1101694915,0.5,0.09090909091,0.3881725553,0.6118274447,7.34e-05,0.003403174815
"@pshipton  it will compile with 2017, but  with optimizations disabled.",Solution Discussion,False,71,CONTRIBUTOR,False,False,False,0.48,0.1016949153,0.75,0.09696969697,0.3881725553,0.6118274447,7.34e-05,0.003403174815
(enabling still results in a hang),Investigation and Exploration,False,34,CONTRIBUTOR,False,False,False,0.24,0.05084745763,1.0,0.103030303,0.3881725553,0.6118274447,7.34e-05,0.003403174815
"To verify the suggestion above, I made the following changes:
CODE

However, it still ended up with the same linking failures as follows: 
CODE
The failures shows -O0",Investigation and Exploration,True,171,CONTRIBUTOR,False,False,False,0.7111111111,0.2711864407,0.2,0.1090909091,0.3892686419,0.6107313581,0.003403174815,0.0001502490105
and -DVS12AndHigher were already set up for x86_64-w64-mingw32-g++ and it works in some way but it didn't help to get these obj file linked correctly.,Solution Discussion,False,150,CONTRIBUTOR,False,False,False,0.6222222222,0.2372881356,0.4,0.1151515152,0.3892686419,0.6107313581,0.003403174815,0.0001502490105
The best case is that mingw guys upgrade their code to keep up with the stdio-related changes in VS2015/2017.,Solution Discussion,False,109,CONTRIBUTOR,False,False,False,1.0,0.1694915254,0.5,0.1636363636,0.3897732145,0.6102267855,0.0009771973397,0.008262538037
"file a bug report with Microsoft

I think @charliegracie was in communication at one point, not sure if we got as far as filing a bug.",Social Conversation,False,136,CONTRIBUTOR,True,False,False,1.0,0.2288135593,1.0,0.1757575758,0.3924343933,0.6075656067,0.008262538037,0.00221507324
"The situation is quite similar to compiling code with an earlier version of VS (VS2010) and linking them via VS2015/2017, which most users encountered in their projects as discussed on websites.",Solution Discussion,False,194,CONTRIBUTOR,False,False,False,0.7045454545,0.2627118644,0.5,0.1818181818,0.3931478188,0.6068521812,0.00221507324,0.007845128228
"Under such circumstance, the only solution to this issue suggested by Microsoft at https://msdn.microsoft.com/en-us/library/bb531344.aspx#BK_CRT is to compile the whole project with VS2015/2017 or modify the code involved to create a new DLL to encapsulate the usage of the library if technically possible.

CODE",Solution Discussion,True,314,CONTRIBUTOR,False,False,False,1.0,0.3728813559,1.0,0.1878787879,0.3931478188,0.6068521812,0.00221507324,0.007845128228
Currently the build is compiled on Windows 7 in which mingw still sticks with an older version of CRT.,Observed Bug Behaviour,False,102,CONTRIBUTOR,False,False,False,0.1759259259,0.1610169492,0.3333333333,0.1939393939,0.3956745592,0.6043254408,0.007845128228,0.003533051078
"The link from Microsoft at https://msdn.microsoft.com/en-us/library/abx4dbyh.aspx says:

The CRT Library has been refactored into a two different binaries, a Universal CRT (ucrtbase), which contains most of the standard functionality, and a VC Runtime Library (vcruntime140), which contains the compiler-related functionality, such as exception handling, and intrinsics. 

CODE

The website of mingw-w64 at https://mingw-w64.org/doku.php#mingw-w64
shows the latest version already provides support on Windows 10 and UCRT in stdio.h

CODE

Given that the stuff with ""stdio.h"" was categorized to UCRT since VS2015, it might be worthy to try installing Cygwin with  the latest mingw-w64 packages + VS2017 (plus Windows 10 SDK ? )",Expected Behaviour,True,737,CONTRIBUTOR,False,False,False,1.0,0.9152542373,0.6666666667,0.2,0.3956745592,0.6043254408,0.007845128228,0.003533051078
on Windows 10 to see whether mingw-w64 compile our code with UCRT.,Solution Discussion,False,66,CONTRIBUTOR,False,False,False,0.1203703704,0.1101694915,1.0,0.2060606061,0.3956745592,0.6043254408,0.007845128228,0.003533051078
It turns out the mingw64 package specified in cygwin is still an older version without UCRT support.,Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,0.5483870968,0.1440677966,0.3333333333,0.2121212121,0.396812476,0.603187524,0.003533051078,0.002619750082
"So I need to:
1) reinstall cygwin without mingw64 package
2) download the source from https://github.com/mirror/mingw-w64/ and manually configure everything in mingw64 for UCRT to see whether it works.",Solution Discussion,False,203,CONTRIBUTOR,False,False,False,1.0,0.2627118644,0.6666666667,0.2181818182,0.396812476,0.603187524,0.003533051078,0.002619750082
or 3) install from https://sourceforge.net/projects/mingw-w64/files/?source=navbar,Solution Discussion,False,82,CONTRIBUTOR,False,False,False,0.1612903226,0.04237288136,1.0,0.2242424242,0.396812476,0.603187524,0.003533051078,0.002619750082
"The new version of x86_64-w64-mingw32-g++ works good on in terms of compiling BytecodeInterpreter.cpp, DebugBytecodeInterpreter.cpp and MHInterpreter.cpp  on Win 7 after installing the latest version of mingw64 downloaded from https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe

So the root cause is that the latest cgywin didn't pick up the new version of mingw64 (which already supports UCRT).",Solution Discussion,False,490,CONTRIBUTOR,False,False,False,1.0,0.4661016949,0.3333333333,0.2303030303,0.3976562389,0.6023437611,0.002619750082,0.026079663
The way around this issue is to update our config/setting file (e.g./runtime/makelib/mkconstants.mk.ftl) to point to the new version of mingw64 (which is installed separately/outside of cygwin dir) rather than the outdated one installed in cygwin by default.,Workarounds,False,258,CONTRIBUTOR,False,False,False,0.7454545455,0.3474576271,0.6666666667,0.2363636364,0.3976562389,0.6023437611,0.002619750082,0.026079663
"(Note: the problem has nothing to do with Windows 10)

Will keep investigating as there are still other issues during compilation.",Investigation and Exploration,False,132,CONTRIBUTOR,False,False,False,0.4,0.186440678,1.0,0.2424242424,0.3976562389,0.6023437611,0.002619750082,0.026079663
"I think @charliegracie was in communication at one point, not sure if we got as far as filing a bug.",Social Conversation,False,100,CONTRIBUTOR,False,False,False,1.0,0.1694915254,0.5,0.2484848485,0.4060559153,0.5939440847,0.026079663,0.03011392996
I think he sent then the prepossessed interpreter and they just laughed and said no.,Social Conversation,False,84,CONTRIBUTOR,False,False,False,0.75,0.1271186441,1.0,0.2545454545,0.4060559153,0.5939440847,0.026079663,0.03011392996
Currently investigating the error related to ddrgen.,Task Progress,False,52,CONTRIBUTOR,False,False,False,0.1206896552,0.0593220339,0.05263157895,0.2606060606,0.4157549389,0.5842450611,0.03011392996,0.0003752752636
"The backtrace below shows it failed to locate the offset type when parsing these .pdf files as follows:
CODECODEfffde000 Unfrozen
Child-SP          RetAddr           Call Site
00000000CODE3f32442d ddrgen!PdbScanner::setMemberOffset+0x160",Investigation and Exploration,True,240,CONTRIBUTOR,False,False,False,0.5517241379,0.2711864407,0.1052631579,0.2666666667,0.4157549389,0.5842450611,0.03011392996,0.0003752752636
@keithc-ca fyi https://github.com/eclipse/openj9/issues/1697#issuecomment-398613633,Contribution and Commitment,False,83,CONTRIBUTOR,True,False,False,1.0,0.03389830508,1.0,0.3757575758,0.4158758067,0.5841241933,0.0003752752636,0.001350389027
"Here're the results from  j9gc29.pdb and j9thr29.pdb:

CODE
I didn't find any file containing ""_FNV_prime"" in the build compiled via VS2010 while there are a bunch of .pdb files containing _FNV_prime (including j9thr29.pdb, j9thr29.pdb) in the build compiled by VS2017.",Investigation and Exploration,True,272,CONTRIBUTOR,False,False,False,1.0,0.3644067797,0.5,0.3818181818,0.4163107368,0.5836892632,0.001350389027,0.006630634685
"If so,   I am wondering whether the new type name needs to be added in a certain config/setting file in ddrgen/pdbscanner or the existing code in setMemberOffset() should address the case.",Solution Discussion,False,188,CONTRIBUTOR,False,False,False,0.7906976744,0.2881355932,1.0,0.3878787879,0.4163107368,0.5836892632,0.001350389027,0.006630634685
"An offending field is
CODE",Investigation and Exploration,True,27,CONTRIBUTOR,False,False,False,0.4,0.05084745763,0.6,0.4060606061,0.418446316,0.581553684,0.006630634685,0.00192059444
Perhaps we need to check whether a field is static before worrying about its offset.,Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,1.0,0.1271186441,0.8,0.4121212121,0.418446316,0.581553684,0.006630634685,0.00192059444
"[1] https://docs.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/locationtype
[2] https://docs.microsoft.com/en-us/visualstudio/debugger/debug-interface-access/idiasymbol-get-locationtype",Investigation and Exploration,False,205,CONTRIBUTOR,False,False,False,0.3333333333,0.04237288136,1.0,0.4181818182,0.418446316,0.581553684,0.006630634685,0.00192059444
"The problem is it returns LocIsConstant  for both ""const"" and ""static const"" variables, in which case there is no easy way to tell whether the current field is static or not.",Investigation and Exploration,False,174,CONTRIBUTOR,False,False,False,1.0,0.2711864407,1.0,0.4242424242,0.4190648965,0.5809351035,0.00192059444,0.0003428640749
Can you give an example of a non-static field where that happens?,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,1.0,0.1101694915,1.0,0.4303030303,0.4191753254,0.5808246746,0.0003428640749,0.0005917357025
"1) e.g.  I_32 minAOT;
it shows in superset.dat:
F|minAOT|minAOT|I32|I32

2) e.g.  const UDATA _",Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,1.0,0.1525423729,0.5,0.4363636364,0.4193659102,0.5806340898,0.0005917357025,0.000275958121
"maxObjectCount;
it shows in superset.dat:
F|_maxObjectCount|_maxObjectCount|U64|const U64",Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,0.5,0.07627118644,1.0,0.4424242424,0.4193659102,0.5806340898,0.0005917357025,0.000275958121
"Those fields certainly have 'const' type, but they are not compile-time constants so I would not expect offset type CODE.",Investigation and Exploration,True,121,CONTRIBUTOR,False,False,False,1.0,0.1779661017,0.5,0.4484848485,0.4194547902,0.5805452098,0.000275958121,8.5e-05
Is that what you're seeing?,Social Conversation,False,27,CONTRIBUTOR,False,False,False,0.2380952381,0.04237288136,1.0,0.4545454545,0.4194547902,0.5805452098,0.000275958121,8.5e-05
"I double-checked the superset.dat generated via VS2010 and VS2017 and it turns out  
it returns LocIsStatic for ""static const"" variables on VS2010
it returns LocIsConstant for ""static const"" variables on VS2017

e.g. static const int32_t invalidByteCodeIndex =  -1;
it returns LocIsStatic on VS2010
superset.dat:  F|invalidByteCodeIndex|invalidByteCodeIndex|I32|const I32

That means ""static"" is just ignored when calling get_locationType in the case of ""const static"" variables.",Investigation and Exploration,False,487,CONTRIBUTOR,False,False,False,1.0,0.593220339,1.0,0.4606060606,0.419482155,0.580517845,8.5e-05,6.41e-05
"As for a ""const"" variable definition,   e.g. const uint32_t categoryCode;
It shows in superdat:
F|categoryCode|categoryCode|U32|const",Investigation and Exploration,False,135,CONTRIBUTOR,False,False,False,1.0,0.1525423729,0.25,0.4666666667,0.4195028092,0.5804971908,6.41e-05,0.0004100015372
"U32

It means it returns something else (e.g. LocIsThisRel, LocIsBitField, etc) for ""const"" variables instead of LocIsConstant.",Investigation and Exploration,False,129,CONTRIBUTOR,False,False,False,1.0,0.1525423729,0.5,0.4727272727,0.4195028092,0.5804971908,6.41e-05,0.0004100015372
"If so, the field must be a static if it returns LocIsConstant (Correct me if wrong).",Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,0.8888888889,0.1355932203,0.75,0.4787878788,0.4195028092,0.5804971908,6.41e-05,0.0004100015372
"Then we can safely change the code to:
CODE",Solution Discussion,True,44,CONTRIBUTOR,False,False,False,0.5555555556,0.08474576271,1.0,0.4848484848,0.4195028092,0.5804971908,6.41e-05,0.0004100015372
superset.dat is produced by ddrgen.,Investigation and Exploration,False,35,CONTRIBUTOR,False,False,False,0.2272727273,0.04237288136,0.3333333333,0.4909090909,0.4196348615,0.5803651385,0.0004100015372,0.0001321913482
"I'm asking for an example non-static field for which PdbScanner would encounter offset type CODE, thereby *preventing* the creation of superset.dat.",Investigation and Exploration,True,148,CONTRIBUTOR,False,False,False,1.0,0.186440678,0.6666666667,0.496969697,0.4196348615,0.5803651385,0.0004100015372,0.0001321913482
"FYI, static fields don't appear in superset.dat at all.",Investigation and Exploration,False,55,CONTRIBUTOR,False,False,False,0.4090909091,0.07627118644,1.0,0.503030303,0.4196348615,0.5803651385,0.0004100015372,0.0001321913482
"I didn't find a ""non-static field for which PdbScanner would encounter offset type LocIsConstant"".",Investigation and Exploration,False,98,CONTRIBUTOR,False,False,False,1.0,0.1271186441,0.3333333333,0.5090909091,0.4196774374,0.5803225626,0.0001321913482,0.0003516613975
"If it returns LocIsConstant, then it fails.",Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.4666666667,0.0593220339,0.6666666667,0.5151515152,0.4196774374,0.5803225626,0.0001321913482,0.0003516613975
"The first field captured is ""invalidByteCodeIndex"" which is a ""static const"" variable.",Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.8,0.1016949153,1.0,0.5212121212,0.4196774374,0.5803225626,0.0001321913482,0.0003516613975
"[LocIsConstant_pdb_files.txt] URL 
I double-checked these fields which returns LocIsConstant by adding printing messages in code but none of them is a non-static.",Investigation and Exploration,False,163,CONTRIBUTOR,False,False,False,1.0,0.2118644068,0.5,0.5272727273,0.4197906997,0.5802093003,0.0003516613975,0.0001150597199
"(only ""static const"" for C/C++ and ""static final"" for Java are detected)",Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.52,0.1101694915,1.0,0.5333333333,0.4197906997,0.5802093003,0.0003516613975,0.0001150597199
Good.,Social Conversation,False,5,CONTRIBUTOR,False,False,False,0.04,0.008474576271,0.5,0.5393939394,0.4198277578,0.5801722422,0.0001150597199,9.31e-05
Then all that needs to be done is to add a case in CODE that handles CODE by setting CODE and probably not much more.,Solution Discussion,True,117,CONTRIBUTOR,False,False,False,1.0,0.2118644068,1.0,0.5454545455,0.4198277578,0.5801722422,0.0001150597199,9.31e-05
"I already tried this way:
CODE
and it ended up with the same results in superset.dat as VS2010:
F|invalidByteCodeIndex|invalidByteCodeIndex|I32|const I32,  which is correct in our case  (formal code review will be submitted once all issues with VS2017 get resolved)",Solution Discussion,True,268,CONTRIBUTOR,False,False,False,1.0,0.3728813559,0.5,0.5515151515,0.4198577324,0.5801422676,9.31e-05,0.02758701478
So there is no issue with LocIsConstant  with the fix above (already confirmed after recompiling the whole build),Solution Discussion,False,113,CONTRIBUTOR,False,False,False,0.4318181818,0.1610169492,1.0,0.5575757576,0.4198577324,0.5801422676,9.31e-05,0.02758701478
"Currently the compilation fails at omrcfg.h and j9cfg.h when generating jvmtitest.res as follows:
CODE`

jvmtitest.rc:
#include <windows.h>
#include <",Investigation and Exploration,True,155,CONTRIBUTOR,False,False,False,0.4782608696,0.186440678,0.5,0.5636363636,0.4287428931,0.5712571069,0.02758701478,0.006132428413
"winver.h>
#include ""j9cfg.h""  <----------- (#include ""omrcfg.h"" in j9cfg.h)
#include ""j9version.h""

VS_VERSION_INFO VERSIONINFO
 FILEVERSION 2,9,0,0
 PRODUCTVERSION 2,9,0,0

Given that these lines literally don't exist in the generated header files,  it seems like there might be some problem with RC.",Investigation and Exploration,False,309,CONTRIBUTOR,False,False,False,1.0,0.3898305085,1.0,0.5696969697,0.4287428931,0.5712571069,0.02758701478,0.006132428413
The CODE script rewrites all header files adding a bunch of lines that begin with CODE.,Investigation and Exploration,True,87,CONTRIBUTOR,False,False,False,0.2857142857,0.1355932203,0.25,0.5757575758,0.4307180112,0.5692819888,0.006132428413,0.004460705601
The build dependencies are intended to ensure that steps like running CODE occur before CODE begins; I suspect we're missing some of those dependencies.,Investigation and Exploration,True,152,CONTRIBUTOR,False,False,False,0.4285714286,0.2033898305,0.5,0.5818181818,0.4307180112,0.5692819888,0.006132428413,0.004460705601
"BTW, I've been thinking there ought to be a way to restructure the build flow involving constant discovery that doesn't involve modifying the source header files, but one of the challenges is to work out an include path that works for producing CODE files in the presence of CODE directives using CODE instead of CODE.",Solution Discussion,True,318,CONTRIBUTOR,False,False,False,1.0,0.4745762712,0.75,0.5878787879,0.4307180112,0.5692819888,0.006132428413,0.004460705601
Until then we'll have to arrange that no compiles can occur in parallel with CODE.,Solution Discussion,True,82,CONTRIBUTOR,False,False,False,0.2678571429,0.1271186441,1.0,0.5939393939,0.4307180112,0.5692819888,0.006132428413,0.004460705601
I am away on vacation next week and will be back to clean up the remaining issues on JDK11 with VS2017.,Task Progress,False,103,CONTRIBUTOR,False,False,False,0.2592592593,0.1779661017,0.5,0.6,0.4321547048,0.5678452952,0.004460705601,0.0001798820974
"For the moment, the issues  that were already fixed cover script/code bugs in JDK11, OpenJ9 and OMR (not yet submitted for review, depending on the final result of compilation and how many issues left to be fixed):
1) JDK11:
https://github.com/ChengJin01/openj9-openjdk-jdk/commit/313973a59a5e69e0ee2e6b85bf936d7b965b80cf
Note: CoreLibraries.gmk copied with minor changes to specify the source of libjava: LIBJAVA_SRC_DIRS += $(call FindSrcDirsForLib, java.base, java

2) OpenJ9:
https://github.com/ChengJin01/openj9/commit/2d26ff4dc6bfe8f391fdba9fd7f86af0e5ccda19
CODE
3) OMR:
https://github.com/ChengJin01/omr/commit/d7b6d0c754f26fd4c147d4a626c22742a0ac9232
Note: configure generated by configure.ac",Task Progress,True,711,CONTRIBUTOR,False,False,False,1.0,0.686440678,1.0,0.6060606061,0.4321547048,0.5678452952,0.004460705601,0.0001798820974
"According to the build.log,  jvmtitest.rc was compiled twice by RC as follows:
CODE
If this is not intentional,  there might be duplicated steps in dealing with the RC compilation.",Investigation and Exploration,True,182,CONTRIBUTOR,False,False,False,1.0,0.2796610169,1.0,0.6121212121,0.4322126408,0.5677873592,0.0001798820974,0.2645202125
"1) The issue with **getmacros** has been resolved after adding one dependency entry for  jvmtitest to /runtime/ddr/module.xml as follows:
CODE

2) After deleting /closed/make/lib/LibCommon.gmk  (FindSrcDirsForLib no longer exists at make/lib/LibCommon.gmk since JDK11),  the build currently fails when compiling the ddr classes:
CODE
It looks like the jobs of both building ddr classes and creating .dll",Solution Discussion,True,408,CONTRIBUTOR,False,False,False,1.0,0.5847457627,0.5,0.6181818182,0.5174086874,0.4825913126,0.2645202125,0.01501286261
"files were executed in parallel, which might have something to do with this compilation error.",Solution Discussion,False,94,CONTRIBUTOR,False,False,False,0.2173913043,0.1271186441,1.0,0.6242424242,0.5174086874,0.4825913126,0.2645202125,0.01501286261
I discussed the interference of CODE with compilation steps with @mikezhang1234567890 who will be investigating adjustments to the makefiles to avoid this problem.,Task Progress,True,163,CONTRIBUTOR,False,False,False,1.0,0.1949152542,0.2,0.6303030303,0.5222439948,0.4777560052,0.01501286261,0.003822899709
The problem related to CODE can be avoided by adding that type to CODE.,Solution Discussion,True,71,CONTRIBUTOR,False,False,False,0.6086956522,0.1186440678,0.4,0.6363636364,0.5222439948,0.4777560052,0.01501286261,0.003822899709
I have a branch,Social Conversation,False,15,CONTRIBUTOR,False,False,False,0.1739130435,0.03389830508,0.6,0.6424242424,0.5222439948,0.4777560052,0.01501286261,0.003822899709
[1] which expands bitfield support so blacklisting that type should be temporary.,Workarounds,False,81,CONTRIBUTOR,False,False,False,0.5217391304,0.1016949153,0.8,0.6484848485,0.5222439948,0.4777560052,0.01501286261,0.003822899709
"The suggestion above works to bypass the undefined type PSLIST_HEADER and the compilation stops at creating verify.dll:
CODE

Looking at how verify.dll is created at make/lib/CoreLibraries.gmk:
CODE

Given that jvm.lib was already created atCODE,
It is likely that the compilation fails to locate the path to CODE.",Solution Discussion,True,321,CONTRIBUTOR,False,False,False,1.0,0.4576271186,0.5,0.6606060606,0.5234752654,0.4765247346,0.003822899709,0.07975398056
Will check against the compilation on JDK10/OpenJ9 to see how it deals with the issue (e.g. the setting of LDFLAGS_JDKLIB and JAVA_BASE_LDFLAGS).,Testing,False,145,CONTRIBUTOR,False,False,False,0.4259259259,0.1949152542,1.0,0.6666666667,0.5234752654,0.4765247346,0.003822899709,0.07975398056
"With my changes on the latest openj9-openjdk-jdk11,  it also shows the same issue with JVM_AreNestMates:
CODE",Bug Reproduction,True,110,CONTRIBUTOR,False,False,False,1.0,0.1694915254,1.0,0.6787878788,0.5511429498,0.4488570502,0.00614979155,0.0005236722062
"Both of those symbols are there in runtime/j9vm/java11vmi.c and runtime/redirector/forwarders.m4

Are you linking to the wrong version of jvm.dll somehow?",Investigation and Exploration,False,156,CONTRIBUTOR,True,False,False,1.0,0.2118644068,1.0,0.6848484848,0.5513116129,0.4486883871,0.0005236722062,5.32e-05
i.e. runtime/j9vm_jdk11/module.xml creates j9vm_jdk11/jvm.dll and runtime/redirector/module.xml creates jvm_jdk11.dll. Both of these are copied (and jvm_jdk11.dll renamed to jvm.dll) into the correct places when building jdk11.,Investigation and Exploration,False,227,CONTRIBUTOR,True,False,False,1.0,0.2542372881,1.0,0.6909090909,0.5513287626,0.4486712374,5.32e-05,0.0008889926047
it looks like the setting in make/lib/CoreLibraries.gmk sticks to jvm.lib.,Solution Discussion,False,74,CONTRIBUTOR,False,False,False,0.375,0.1016949153,0.3333333333,0.696969697,0.5516150872,0.4483849128,0.0008889926047,0.00606228134
"It failed to resolve JVM_AreNestMates & JVM_BeforeHalt because they were missing in jvm.lib.
CODE

I am wondering whether jvm.lib must be renamed from vm/j9vm_jdk11/jdk11_jvm.lib and copied to ./vm/lib.",Solution Discussion,True,205,CONTRIBUTOR,False,False,False,1.0,0.2711864407,0.6666666667,0.703030303,0.5516150872,0.4483849128,0.0008889926047,0.00606228134
"If so, then there must be something wrong with the copy operation.",Solution Discussion,False,66,CONTRIBUTOR,False,False,False,0.375,0.1016949153,1.0,0.7090909091,0.5516150872,0.4483849128,0.0008889926047,0.00606228134
"Seems we aren't copying the jvm.lib file (but should be), only the jvm.dll files.",Solution Discussion,False,81,CONTRIBUTOR,True,False,False,1.0,0.1186440678,0.5,0.7151515152,0.5535676125,0.4464323875,0.00606228134,0.0004840842543
"i.e. in OpenJ9.gmk 
CODE",Solution Discussion,True,25,CONTRIBUTOR,True,False,False,0.3571428571,0.04237288136,1.0,0.7212121212,0.5535676125,0.4464323875,0.00606228134,0.0004840842543
"Because jdk10 builds fine with VS2013, I wouldn't expect changes to how jvm.lib is handled in jdk11 with VS2017.",Expected Behaviour,False,112,CONTRIBUTOR,False,False,False,1.0,0.1610169492,1.0,0.7272727273,0.5537235252,0.4462764748,0.0004840842543,0.0002629936456
"These natives were introduced recently since JDK11:
JVM_BeforeHalt
JVM_GetNestHost
JVM_GetNestMembers
JVM_AreNestMates

That means we need to copy the corresponding static library to vm/lib in such case.",Solution Discussion,False,209,CONTRIBUTOR,False,False,False,1.0,0.2711864407,1.0,0.7333333333,0.5538082296,0.4461917704,0.0002629936456,0.0004921870515
"Because jdk10 builds fine

I don't think there were any new APIs added between Java 8 and Java 10, only parameter changes to existing APIs.",Solution Discussion,False,141,CONTRIBUTOR,True,False,False,1.0,0.2203389831,1.0,0.7393939394,0.553966752,0.446033248,0.0004921870515,0.001135549147
I think the time has come to collapse all source versions of the redirectors to one that yields the right content for the version of Java being built.,Solution Discussion,False,150,CONTRIBUTOR,False,False,False,1.0,0.2372881356,0.5,0.7454545455,0.554332487,0.445667513,0.001135549147,0.0236395635
Then there will only be one jvm.dll in a given build.,Solution Discussion,False,53,CONTRIBUTOR,False,False,False,0.3928571429,0.09322033898,1.0,0.7515151515,0.554332487,0.445667513,0.001135549147,0.0236395635
"I tried to modify the script at closed/OpenJ9.gmk by adding the following code to renaming/copying redirector_jvm_jdk11.lib & .exp to vm/lib
CODE
The issue with resolving JVM_AreNestMates & JVM_BeforeHalt got fixed but it ended up with the another loading failure as follows:
CODE

Running ""jdk/bin/java  version"" also ended up with the same failure:
CODE

If the copying steps for jvm.lib are correct, then it is likely the failure has something to do with the generated .dll files (e.g. jvm.dll or others)",Solution Discussion,True,515,CONTRIBUTOR,False,False,False,1.0,0.7627118644,1.0,0.7575757576,0.5619462619,0.4380537381,0.0236395635,0.001487673562
Seems before trying to get VS2017 working we should ensure a build with VS2013 works.,Solution Discussion,False,85,CONTRIBUTOR,True,False,False,1.0,0.1271186441,1.0,0.7636363636,0.5624254083,0.4375745917,0.001487673562,0.0004072234353
"Also tried copying j9vm_jdk11/jdk11_jvm.lib & .exp to vm/lib/jvm.lib & .exp and an exception occurred when running ""java -version"":
CODE
CODE
From the result,  it suggests that copying j9vm_jdk11/jdk11_jvm.lib & .exp is correct to some extent.",Solution Discussion,True,246,CONTRIBUTOR,False,False,False,1.0,0.3389830508,1.0,0.7696969697,0.5625565659,0.4374434341,0.0004072234353,0.0002067370823
"I used to comment out the code of JVM_BeforeHalt in Shutdown.c on an older version of openj9-openjdk-jdk (jdk11 without any code of NestMates) and It passed in compilation and works in running java -version
CODE",Solution Discussion,True,212,CONTRIBUTOR,False,False,False,1.0,0.3220338983,0.5,0.7757575758,0.5626231513,0.4373768487,0.0002067370823,0.07175559371
So the problem should have nothing to do with VS2017.,Solution Discussion,False,53,CONTRIBUTOR,False,False,False,0.2631578947,0.08474576271,1.0,0.7818181818,0.5626231513,0.4373768487,0.0002067370823,0.07175559371
The IncompatibleClassChangeError should be resolved by https://github.com/ibmruntimes/openj9-openjdk-jdk11/pull/3 and https://github.com/eclipse/openj9/pull/2374.,Solution Discussion,False,162,CONTRIBUTOR,False,False,False,1.0,0.07627118644,1.0,0.7878787879,0.5857340238,0.4142659762,0.07175559371,0.01151175971
"With the latest changes above (ibmruntimes/openj9-openjdk-jdk11#3 and #2374), the compilation ended up with a module related exception after copying/rename j9vm_jdk11/jdk11_jvm.lib & .exp to vm/lib:
CODE

CODE
If the merged fixes are correct, then the problem might be related to the module setting at java.base (e.g. src/java.base/share/classes/module-info.java)",Solution Discussion,True,367,CONTRIBUTOR,False,False,False,1.0,0.5,1.0,0.7939393939,0.5894417042,0.4105582958,0.01151175971,0.02070056321
"The detailed backtrace in java is as follows:
CODE

Looking at the code of ModuleInfo.doRead() in src/java.base/share/classes/jdk/internal/module/ModuleInfo.java
CODE

Looking at src/java.base/share/classes/module-info.java (packages exist in there)
CODE",Investigation and Exploration,True,261,CONTRIBUTOR,False,False,False,1.0,0.3644067797,0.3333333333,0.8,0.5961088928,0.4038911072,0.02070056321,0.01958885944
So it seems the failure to parse package names from java.base/module-info.class triggered the exception.,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.3255813953,0.1186440678,0.6666666667,0.8060606061,0.5961088928,0.4038911072,0.02070056321,0.01958885944
"Given that the exposed packages exist in java.base,  I need to figure out whether 
**attribute_name**  in ModuleInfo.doRead()  is set to  MODULE_PACKAGES  or there is any issue with constant pool or something else.",Investigation and Exploration,False,215,CONTRIBUTOR,False,False,False,0.8837209302,0.3220338983,1.0,0.8121212121,0.5961088928,0.4038911072,0.02070056321,0.01958885944
1) I didn't spot anything abnormal with the generated module-info.class at java.base in terms of binary format as well as the original java file.,Investigation and Exploration,False,145,CONTRIBUTOR,False,False,False,0.4,0.2033898305,0.5,0.8181818182,0.6024180265,0.3975819735,0.01958885944,0.02154742127
"2) The exceptions above (FindException, etc) seem to be a red herring because the compiled build failed to initialize the library jclse11_29.dll at stage 14 (JCL_INITIALIZED) with JIT off as follows:

CODE
If so, it is likely jclse11_29.dll was not generated correctly during compilation or there are still problems with the corresponding config/setting for the library generation.",Investigation and Exploration,True,384,CONTRIBUTOR,False,False,False,1.0,0.5084745763,1.0,0.8242424242,0.6024180265,0.3975819735,0.01958885944,0.02154742127
"Investigation shows the problem with jclse11_29 came from the code in J9SigQuitStartup as follows:
CODE
The problem with Initialization disappear if disabling SigQuit with -Xrs (JIT off)
CODE
How, the issue with module-info.class still exist with JIT on:
CODE",Investigation and Exploration,True,264,CONTRIBUTOR,False,False,False,1.0,0.3728813559,0.5,0.8303030303,0.6093579692,0.3906420308,0.02154742127,0.01905847349
So it is hard to determine whether they came from the same root cause or they are totally different issues.,Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,0.4545454545,0.1694915254,1.0,0.8363636364,0.6093579692,0.3906420308,0.02154742127,0.01905847349
I think the root cause for unresolved external symbol  to JVM_BeforeHalt/JVM_AreNestMates is that these natives not exported via **j9vm/module.xml**.,Investigation and Exploration,False,149,CONTRIBUTOR,False,False,False,0.8148148148,0.186440678,0.2,0.8424242424,0.6154962774,0.3845037226,0.01905847349,0.0312575819
"So I made some changes as follows:
CODE
The compilation ended up with the same result as copying/renaming j9vm_jdk11/jdk11_jvm.lib & .exp",Investigation and Exploration,True,139,CONTRIBUTOR,False,False,False,0.8888888889,0.2033898305,0.4,0.8484848485,0.6154962774,0.3845037226,0.01905847349,0.0312575819
"to vm/lib, which means copying/renaming j9vm_jdk11/jdk11_jvm.lib  was incorrect or at least unnecessary.",Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.5925925926,0.1355932203,0.6,0.8545454545,0.6154962774,0.3845037226,0.01905847349,0.0312575819
"If so, I need to double-check the generation of jclse11_29.dll as well as all related module.xml to see whether there is anything else should be fixed.",Investigation and Exploration,False,151,CONTRIBUTOR,False,False,False,1.0,0.2288135593,1.0,0.8666666667,0.6154962774,0.3845037226,0.01905847349,0.0312575819
"I tried two steps  to narrow down the scope:
1) compiled an older version openJDK11  (only support JVM_BeforeHalt) and openJ9 (including the setting and empty interfaces of JVM_BeforeHalt, JVM_AreNestMates, etc) and it finished without any error:
CODE
2) compiled the same version of openJDK11(only support JVM_BeforeHalt) and the latest version of openJ9 (support all JDK11 natives, including  JVM_BeforeHalt, JVM_AreNestMates, etc) and it ended up with same failure as the latest version of openJDK11:
CODE

So the investigation above indicates:
(1) the problem has nothing to with the latest version of openJDK11
(2) the problem came from the recent changes for JDK11 in openJ9, especially the changes with nestMates.",Investigation and Exploration,True,728,CONTRIBUTOR,False,False,False,1.0,1.0,1.0,0.8727272727,0.6255636457,0.3744363543,0.0312575819,0.02864940725
"1)  With the same old version JDK11 (only support JVM_BeforeHalt) , I manually merged the changes at https://github.com/eclipse/openj9/pull/2270 (turn on the changes for nestMates on OpenJ9 ) to the older version of OpenJ9 ( (including the setting and empty interfaces of JVM_BeforeHalt, JVM_AreNestMates, etc) and it ended up with pretty much the same compilation failures as the result above at 2).
CODE

2) After removing J9VM_OPT_VALHALLA_NESTMATES in j9cfg.h.in and j9cfg.h.ftl,  all problems above  disappeared and the compilation finished without any error.
CODE 

Given that turning on  J9VM_OPT_VALHALLA_NESTMATES enables all code changes of nestMates, I suspect there might be code issues in the existing implementation of nestMates.",Solution Discussion,True,749,CONTRIBUTOR,False,False,False,1.0,0.9406779661,0.25,0.8787878788,0.6347909793,0.3652090207,0.02864940725,0.006974193286
"If so, there is no way to fix them in our script/setting from the compilation perspective  (This is the only issue left here).",Solution Discussion,False,126,CONTRIBUTOR,False,False,False,0.2252252252,0.2118644068,0.5,0.8848484848,0.6347909793,0.3652090207,0.02864940725,0.006974193286
I will double-check all my changes so far in jdk11/OpeJ9/omr and submit them for review soon.,Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,0.1711711712,0.1610169492,0.75,0.8909090909,0.6347909793,0.3652090207,0.02864940725,0.006974193286
FYI:  @tajila.,Contribution and Commitment,False,14,CONTRIBUTOR,False,False,False,0.02702702703,0.02542372881,1.0,0.896969697,0.6347909793,0.3652090207,0.02864940725,0.006974193286
The issues with nestmates should go away once https://github.com/eclipse/openj9/pull/2459 is merged.,Solution Discussion,False,100,CONTRIBUTOR,False,False,False,1.0,0.09322033898,1.0,0.903030303,0.637037211,0.362962789,0.006974193286,0.008000933442
"A test failure with UnsatisfiedLinkError is detected during the sanity test as follows:

CODE
Look at the test code:
CODE
Currently I am running tests with .../build/windows-x86_64-normal-server-release/images/jdk/bin

Comparison with the compiled build with openjdk8/open9 shows the j9ben.dll exists in .../build/windows-x86_64-normal-server-release/**jdk/bin/compressedrefs** but missing in openj9-openjdk-jdk11/build/windows-x86_64-normal-server-release/**images/jdk/bin/compressedrefs**
CODE
Looking at the dll files at jdk/bin/compressedrefs  and images/jdk/bin/compressedrefs:
CODE
It seems a lot of test related dll files are missing in images/jdk/bin/compressedrefs except j9ben.dll.",Testing,True,702,CONTRIBUTOR,False,False,False,1.0,0.9745762712,0.3333333333,0.9151515152,0.6453809646,0.3546190354,0.01790509819,0.0003116104286
"@keithc-ca,  I suspect the current script in openjdk11 didn't or failed to copy these dll files from /vm to the right place after improving these setting (e.g. OpenJ9.gmk).",Investigation and Exploration,False,172,CONTRIBUTOR,False,False,False,0.2608695652,0.2542372881,0.6666666667,0.9212121212,0.6453809646,0.3546190354,0.01790509819,0.0003116104286
"If so, the issue should be fixed to enable the test execution.",Solution Discussion,False,62,CONTRIBUTOR,False,False,False,0.1043478261,0.1016949153,1.0,0.9272727273,0.6453809646,0.3546190354,0.01790509819,0.0003116104286
The JDK should have *none* of those tests DLLs: tests should bring their own DLLs rather than expect the JDK to have them.,Solution Discussion,False,122,CONTRIBUTOR,False,False,False,1.0,0.1949152542,1.0,0.9333333333,0.6454813274,0.3545186726,0.0003116104286,0.0003611532457
We'll have to put the test libraries into images/test I expect.,Solution Discussion,False,63,CONTRIBUTOR,True,False,False,1.0,0.1016949153,0.5,0.9393939394,0.6455976468,0.3544023532,0.0003611532457,9.63e-05
Then PR builds and pipeline builds will have to find them there.,Solution Discussion,False,64,CONTRIBUTOR,True,False,False,1.0,0.1016949153,1.0,0.9454545455,0.6455976468,0.3544023532,0.0003611532457,9.63e-05
"I already finished the sanity test with build/windows-x86_64-normal-server-release/jdk/bin and it shows the compiled build functionally works:
CODE",Solution Discussion,True,148,CONTRIBUTOR,False,False,False,1.0,0.2118644068,1.0,0.9515151515,0.6456286653,0.3543713347,9.63e-05,0.0001289502294
I will prepare all changes I made in compilation for review before addressing the test failure in another issue.,Task Progress,False,112,CONTRIBUTOR,False,False,False,1.0,0.1610169492,1.0,0.9575757576,0.6456701973,0.3543298027,0.0001289502294,0.001672417338
"All script/setting changes have been submitted for review:
OpenJDK11: https://github.com/ibmruntimes/openj9-openjdk-jdk11/pull/7
OpenJ9: https://github.com/eclipse/openj9/pull/2483
OMR: https://github.com/eclipse/omr/pull/2798",Task Progress,False,229,CONTRIBUTOR,False,False,False,1.0,0.1525423729,1.0,0.9636363636,0.6462088455,0.3537911545,0.001672417338,0.8162361998
"I don't think this is going to be ready for the 0.10.0 release, deferring.",Action on Issue,False,74,CONTRIBUTOR,True,False,False,1.0,0.1186440678,1.0,0.9696969697,0.909100277,0.090899723,0.8162361998,0.0003067487503
@pshipton We should be trying to contain this in the 0.10.0 release to match the compiler levels used by OpenJDK.,Action on Issue,False,113,MEMBER,False,False,False,1.0,0.1694915254,0.3333333333,0.9757575758,0.9091990739,0.09080092608,0.0003067487503,0.000301424055
Is there a critical blocker preventing this from making the 0.10.0 release?,Social Conversation,False,75,MEMBER,False,False,False,0.6,0.1016949153,0.6666666667,0.9818181818,0.9091990739,0.09080092608,0.0003067487503,0.000301424055
"If so, let's identify it and try to solve it.",Social Conversation,False,45,MEMBER,False,False,False,0.5,0.08474576271,1.0,0.9878787879,0.9091990739,0.09080092608,0.0003067487503,0.000301424055
I have been working on https://github.com/eclipse/omr/issues/2885 which would be a prerequisite of DDR support with that compiler.,Task Progress,False,130,CONTRIBUTOR,False,False,False,1.0,0.1440677966,1.0,0.9939393939,0.9092961559,0.09070384413,0.000301424055,0.2816210502
"Closing, since Java 11 Windows is now compiling with MSVC 2017.",Action on Issue,False,63,CONTRIBUTOR,True,False,True,1.0,0.09322033898,1.0,1.0,1.0,0.0,0.2816210502,0.0
Performance difference between 0.24.0 and 0.26.0 in containers running AcmeAirMS benchmark on Open Liberty.,Observed Bug Behaviour,False,108,NONE,True,True,False,0.1842105263,0.175,0.2,0.004901960784,0.0,1.0,0.0,0.0188118453
"I am seeing a throughput regression of around 5% when running the AcmeAir MS benchmark, which has 5 different services, in a docker environment with OpenLiberty built on top of adoptopenjdk:8-jre-openj9 (0.26.0)  compared to the same version of Open Liberty running on adoptopenjdk/openjdk8-openj9:jre8u282-b08_openj9-0.24.0.

This has been tricky to debug - if I take this out of the docker env, the regression goes away or is a lot less.",Investigation and Exploration,False,441,NONE,True,True,False,1.0,0.95,0.4,0.009803921569,0.0,1.0,0.0,0.0188118453
"I hacked in healthcenter and have some hcd files, but they haven't been very enlightening.",Investigation and Exploration,False,90,NONE,True,True,False,0.1973684211,0.1875,0.6,0.01470588235,0.0,1.0,0.0,0.0188118453
Any advice on how to debug?,Investigation and Exploration,False,27,NONE,True,True,False,0.07894736842,0.075,0.8,0.01960784314,0.0,1.0,0.0,0.0188118453
Is there a newer image to try?,Investigation and Exploration,False,30,NONE,True,True,False,0.09210526316,0.0875,1.0,0.02450980392,0.0,1.0,0.0,0.0188118453
"@mpirvu @vijaysun-omr fyi

0.27 is released, for now you can get docker images as described in https://github.com/eclipse-openj9/openj9/issues/13534#issuecomment-924085997",Contribution and Commitment,False,173,CONTRIBUTOR,False,False,False,1.0,0.2375,1.0,0.02941176471,0.002977512039,0.997022488,0.0188118453,0.01246148827
"I don't remember when exactly these changes took place (they happened gradually), but I can check if I know exactly which images you are using.",Investigation and Exploration,False,143,CONTRIBUTOR,False,False,False,1.0,0.3125,1.0,0.04411764706,0.004949898627,0.9950501014,0.01246148827,0.08811482837
"Both builds are using layers on top of the SCC provided by java, but the last layer (the application layer) is bigger in the 0.24.0 which is interesting.

CODE",Investigation and Exploration,True,161,NONE,True,False,False,1.0,0.375,1.0,0.05392156863,0.01889658797,0.981103412,0.08811482837,0.1088941245
Is there a difference between these configs if you run with -Xshareclasses:none ?,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,1.0,0.1625,1.0,0.05882352941,0.03613219465,0.9638678053,0.1088941245,0.03316104244
"Interesting, without using a SCC, the regression almost goes away.",Solution Discussion,False,66,NONE,True,False,False,1.0,0.125,0.1666666667,0.0637254902,0.04138087714,0.9586191229,0.03316104244,0.3318641488
"SCC | Tput |  
-- | -- | --
0.24.0 | 6413.33",Testing,False,46,NONE,True,False,False,0.9,0.1125,0.3333333333,0.06862745098,0.04138087714,0.9586191229,0.03316104244,0.3318641488
"|  
0.26.0 | 5849.67 | 91.2%
  |   |",Testing,False,38,NONE,True,False,False,0.6,0.075,0.5,0.07352941176,0.04138087714,0.9586191229,0.03316104244,0.3318641488
No SCC | Tput,Testing,False,13,NONE,True,False,False,0.3,0.0375,0.6666666667,0.07843137255,0.04138087714,0.9586191229,0.03316104244,0.3318641488
"|  
0.24.0 | 6655.00",Testing,False,21,NONE,True,False,False,0.3,0.0375,0.8333333333,0.08333333333,0.04138087714,0.9586191229,0.03316104244,0.3318641488
"|  
0.26.0 | 6597.67 | 99.1%



</body>

</html>",Testing,False,55,NONE,True,False,False,0.8,0.1,1.0,0.08823529412,0.04138087714,0.9586191229,0.03316104244,0.3318641488
The regression could be related to the portable AOT feature.,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.3571428571,0.125,0.2,0.0931372549,0.09390786121,0.9060921388,0.3318641488,0.01961071442
In docker we started to generate more generic AOT code (but also less optimized) so that the image can be used on more CPUs and more heap configurations.,Investigation and Exploration,False,153,CONTRIBUTOR,False,False,False,1.0,0.35,0.4,0.09803921569,0.09390786121,0.9060921388,0.3318641488,0.01961071442
"@jdmcclur maybe you do an experiment outside docker, with 0.26, comparing one run with CODE to another run with CODE.",Investigation and Exploration,True,117,CONTRIBUTOR,False,False,False,0.7142857143,0.25,0.6,0.1029411765,0.09390786121,0.9060921388,0.3318641488,0.01961071442
I don't have a reliable AcmeAir MS installation around.,Social Conversation,False,55,CONTRIBUTOR,False,False,False,0.3214285714,0.1125,0.8,0.1078431373,0.09390786121,0.9060921388,0.3318641488,0.01961071442
Do you know if the regression is seen with AcmeAir mono as well?,Investigation and Exploration,False,64,CONTRIBUTOR,False,False,False,0.4642857143,0.1625,1.0,0.112745098,0.09390786121,0.9060921388,0.3318641488,0.01961071442
@mpirvu - There is a bit a difference outside of docker with the different options.,Investigation and Exploration,False,83,NONE,True,False,False,0.5185185185,0.175,0.1666666667,0.1176470588,0.09701181711,0.9029881829,0.01961071442,0.02610750661
"(3 runs each, all about the same).",Investigation and Exploration,False,34,NONE,True,False,False,0.2592592593,0.0875,0.3333333333,0.1225490196,0.09701181711,0.9029881829,0.01961071442,0.02610750661
"I will note that outside of docker I am not using the java scc layers, it is just one SCC generated the first time the server starts.",Investigation and Exploration,False,133,NONE,True,False,False,1.0,0.3375,0.5,0.1274509804,0.09701181711,0.9029881829,0.01961071442,0.02610750661
-XX:+PortableSharedCache,Testing,False,24,NONE,True,False,False,0.03703703704,0.0125,0.6666666667,0.1323529412,0.09701181711,0.9029881829,0.01961071442,0.02610750661
| 7729.33,Testing,False,9,NONE,True,False,False,0.03703703704,0.0125,0.8333333333,0.137254902,0.09701181711,0.9029881829,0.01961071442,0.02610750661
"|  
-- | -- | --
-XX:-PortableSharedCache | 7854.33 | 101.6%

I'll look into what acmeair monolithic looks like later today.",Testing,False,128,NONE,True,False,False,0.7037037037,0.2375,1.0,0.1421568627,0.09701181711,0.9029881829,0.01961071442,0.02610750661
I don't see any regression with Acmeair Monolithic.,Investigation and Exploration,False,51,NONE,True,False,False,1.0,0.1,1.0,0.1470588235,0.101144076,0.898855924,0.02610750661,0.07376273152
Maybe it is worth doing a run inside container with CODE with the SCC still enabled with both builds to see how that affects the delta that is observed.,Investigation and Exploration,True,152,CONTRIBUTOR,False,False,False,1.0,0.3625,1.0,0.1519607843,0.1128191359,0.8871808641,0.07376273152,0.02076334771
"No delta with  -Xnoaot

No AOT |   |  
-- | -- | --
0.24.0 | 6700.33 |  
0.26.0 | 6694.00 | 99.9%",Testing,False,102,NONE,True,False,False,1.0,0.25,1.0,0.1568627451,0.116105529,0.883894471,0.02076334771,0.001196128892
"Okay, I wonder if it makes sense to dig into the difference that you had mentioned at the application layer for the SCC.",Investigation and Exploration,False,120,CONTRIBUTOR,False,False,False,0.5897435897,0.2875,0.3333333333,0.1617647059,0.1162948506,0.8837051494,0.001196128892,0.02677733879
i.e. what are the contents of the SCC and/or get a -Xjit:verbose log to see how many compilations (JIT or AOT) we get with either build to see if the difference in that regard is an unexpected one.,Investigation and Exploration,False,197,CONTRIBUTOR,False,False,False,1.0,0.4875,0.6666666667,0.1666666667,0.1162948506,0.8837051494,0.001196128892,0.02677733879
@mpirvu any other ideas ?,Contribution and Commitment,False,25,CONTRIBUTOR,False,False,False,0.1025641026,0.05,1.0,0.1715686275,0.1162948506,0.8837051494,0.001196128892,0.02677733879
"jitlogs attached

[jitlogs.zip] URL ",Social Conversation,False,38,NONE,True,False,False,1.0,0.0625,1.0,0.1764705882,0.1205331296,0.8794668704,0.02677733879,0.02297002429
The verbose logs above were collected with with just CODE (as opposed to CODE) so they are missing some information.,Investigation and Exploration,True,116,CONTRIBUTOR,False,False,False,0.4255319149,0.25,0.125,0.181372549,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
"However, I was able to determine a possible culprit:
in 0.26.0 vlogs for Booking and for Customer I see many failures like this:
CODE
The JIT compiles CODE at warm and then at hot (I cannot tell why based on the provided information).",Investigation and Exploration,True,237,CONTRIBUTOR,False,False,False,1.0,0.5875,0.25,0.1862745098,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
The compilation at hot fails due to insufficient memory.,Investigation and Exploration,False,56,CONTRIBUTOR,False,False,False,0.1914893617,0.1125,0.375,0.1911764706,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
The JIT retries the compilation again at warm.,Investigation and Exploration,False,46,CONTRIBUTOR,False,False,False,0.170212766,0.1,0.5,0.1960784314,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
"Looking at the code, we retry a re-compilation that failed if the method body used pre-existence.",Solution Discussion,False,97,CONTRIBUTOR,False,False,False,0.3829787234,0.225,0.625,0.2009803922,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
That recompilation at warm succeeds.,Solution Discussion,False,36,CONTRIBUTOR,False,False,False,0.1063829787,0.0625,0.75,0.2058823529,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
What I don't understand is why the JIT attempts to recompile the method again at hot.,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,0.3404255319,0.2,0.875,0.2107843137,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
"The code disables sampling, so it's not the sampling mechanism that tries to upgrade the method.",Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.3404255319,0.2,1.0,0.2156862745,0.1241687922,0.8758312078,0.02297002429,0.0007858204357
"If my theory is correct, then CODE should fix the issue.",Solution Discussion,True,56,CONTRIBUTOR,False,False,False,0.55,0.1375,0.3333333333,0.2205882353,0.1242931708,0.8757068292,0.0007858204357,0.07018304397
I don't understand the connection to AOT though.,Social Conversation,False,48,CONTRIBUTOR,False,False,False,0.4,0.1,0.6666666667,0.2254901961,0.1242931708,0.8757068292,0.0007858204357,0.07018304397
"In 0.24.0 this method is successfully compiled at hot, so we don't have this nasty compile-fail-compile-fail behavior.",Investigation and Exploration,False,118,CONTRIBUTOR,False,False,False,1.0,0.25,1.0,0.2303921569,0.1242931708,0.8757068292,0.0007858204357,0.07018304397
"@mpirvu Yes, looks like adding -Xjit:{com/ibm/ws/jaxrs20/security/LibertyAuthFilter.filter*}(disableInvariantArgumentPreexistence) fixed the regression.",Solution Discussion,False,152,NONE,True,False,False,1.0,0.175,0.5,0.2352941176,0.1354016429,0.8645983571,0.07018304397,0.0007191271884
Would running with -Xjit:verbose={compilePerformance} be helpful?,Solution Discussion,False,65,NONE,True,False,False,0.5,0.0875,1.0,0.2401960784,0.1354016429,0.8645983571,0.07018304397,0.0007191271884
"Would running with -Xjit:verbose={compilePerformance} be helpful?

Possibly, in that it may tell us why the hot recompilations are happening.",Solution Discussion,False,143,CONTRIBUTOR,False,False,False,1.0,0.2625,0.5,0.2450980392,0.1355154653,0.8644845347,0.0007191271884,0.01574975534
"However, if the recompilation is triggered by the native code itself, we'll have to dig deeper.",Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.7619047619,0.2,1.0,0.25,0.1355154653,0.8644845347,0.0007191271884,0.01574975534
Here is the data from the booking service.,Social Conversation,False,42,NONE,True,False,False,0.6153846154,0.1,0.5,0.2549019608,0.1380083141,0.8619916859,0.01574975534,0.1612106274
"oddly, throughput went up a couple % when I added CODE
[booking.vlog.log] URL ",Testing,True,79,NONE,True,False,False,1.0,0.1625,1.0,0.2598039216,0.1380083141,0.8619916859,0.01574975534,0.1612106274
"Unfortunately, I cannot determine why that method gets compiled again at hot (after the first failure).",Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,0.5483870968,0.2125,0.5,0.2647058824,0.1635245022,0.8364754978,0.1612106274,0.05981079416
"I ran AcmeAir mono to see if that method even shows in the vlog, but it doesn't (The intent was to artificially recompile it at hot and then fail on purpose).",Investigation and Exploration,False,158,CONTRIBUTOR,False,False,False,1.0,0.3875,1.0,0.2696078431,0.1635245022,0.8364754978,0.1612106274,0.05981079416
@mpirvu - yeah that method wont be invoked with acmeair mono as there is no authentication done.,Investigation and Exploration,False,96,NONE,True,False,False,1.0,0.2125,0.5,0.2745098039,0.1729912694,0.8270087306,0.05981079416,0.003212874696
You could try to enable the mpJwt-1.2 feature and see if is invoked (I'll try it out).,Solution Discussion,False,86,NONE,True,False,False,1.0,0.2125,1.0,0.2794117647,0.1729912694,0.8270087306,0.05981079416,0.003212874696
@mpirvu - looks like adding CODE at least loads the class.,Solution Discussion,True,58,NONE,True,False,False,1.0,0.125,0.5,0.2843137255,0.1734997986,0.8265002014,0.003212874696,0.3694370945
Can you try that?,Social Conversation,False,17,NONE,True,False,False,0.4,0.05,1.0,0.2892156863,0.1734997986,0.8265002014,0.003212874696,0.3694370945
My build of Liberty_21.0.0.3/AcmeAir does no run with CODE.,Investigation and Exploration,True,59,CONTRIBUTOR,False,False,False,0.5263157895,0.125,0.3333333333,0.2941176471,0.2319737749,0.7680262251,0.3694370945,0.004429301533
"It tried it with CODE and that works, but I didn't see that CODE method being recompiled at hot.",Investigation and Exploration,True,96,CONTRIBUTOR,False,False,False,1.0,0.2375,0.6666666667,0.2990196078,0.2319737749,0.7680262251,0.3694370945,0.004429301533
I am going to push it artificially to hot.,Task Progress,False,42,CONTRIBUTOR,False,False,False,0.4736842105,0.1125,1.0,0.3039215686,0.2319737749,0.7680262251,0.3694370945,0.004429301533
"I managed to recompile that method at hot, but it didn't reach the scratch memory limit, so I reduced the limit with an option for that method only.",Task Progress,False,148,CONTRIBUTOR,False,False,False,1.0,0.35,0.25,0.3088235294,0.2326748385,0.7673251615,0.004429301533,0.02640472652
Now I have a hot recompilation that fails and is followed by a warm recompilation.,Task Progress,False,82,CONTRIBUTOR,False,False,False,0.5357142857,0.1875,0.5,0.3137254902,0.2326748385,0.7673251615,0.004429301533,0.02640472652
This is exactly the behavior I was expecting.,Expected Behaviour,False,45,CONTRIBUTOR,False,False,False,0.2857142857,0.1,0.75,0.318627451,0.2326748385,0.7673251615,0.004429301533,0.02640472652
"All in all, I cannot reproduce the behavior from this issue, and I may have to provide some instrumented builds.",Bug Reproduction,False,112,CONTRIBUTOR,False,False,False,0.75,0.2625,1.0,0.3235294118,0.2326748385,0.7673251615,0.004429301533,0.02640472652
"Looking at reasons of why a method could trigger a recompilation from itself I see a few possibilities
1. Guarded counting recompilation.",Investigation and Exploration,False,138,CONTRIBUTOR,False,False,False,0.7666666667,0.2875,0.25,0.3284313725,0.2368541409,0.7631458591,0.02640472652,0.01413316902
"Disable with -Xjit:disableGuardedCountingRecompilation
2. OSR and inlined method redefinition.",Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.3666666667,0.1375,0.5,0.3333333333,0.2368541409,0.7631458591,0.02640472652,0.01413316902
"Disable with -Xjit:disableRecompDueToInlinedMethodRedefinition
3. JProfiling.",Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.2333333333,0.0875,0.75,0.3382352941,0.2368541409,0.7631458591,0.02640472652,0.01413316902
"Disable with -Xjit:disableJProfiling

None of these is likely to happen for various reasons, but let's disable them all with 
CODE and see if the regression still persists.",Investigation and Exploration,True,175,CONTRIBUTOR,False,False,False,1.0,0.375,1.0,0.3431372549,0.2368541409,0.7631458591,0.02640472652,0.01413316902
"With these options, the regression is still there, actually a bit worse.
CODE",Investigation and Exploration,True,78,NONE,True,False,False,1.0,0.175,1.0,0.3480392157,0.2390911188,0.7609088812,0.01413316902,0.3746116206
"@mpirvu - Liberty is moving to using semeru images as the base image soon, which are at 0.27.0 now.",Social Conversation,False,99,NONE,True,False,False,0.75,0.225,0.25,0.3529411765,0.2983841117,0.7016158883,0.3746116206,0.0007771213165
"So, I did some runs with this as the base, and it looks like the regression is gone.",Solution Discussion,False,84,NONE,True,False,False,0.75,0.225,0.5,0.3578431373,0.2983841117,0.7016158883,0.3746116206,0.0007771213165
Throughput levels are back to normal and I only see this once or twice in the jitlogs.,Solution Discussion,False,86,NONE,True,False,False,0.7083333333,0.2125,0.75,0.362745098,0.2983841117,0.7016158883,0.3746116206,0.0007771213165
"booking
CODE

customer
CODE

I have done a handful of runs and they all look good, so will close this.",Action on Issue,True,108,NONE,True,False,False,1.0,0.3,1.0,0.3676470588,0.2983841117,0.7016158883,0.3746116206,0.0007771213165
I am glad that the problem disappeared.,Social Conversation,False,39,CONTRIBUTOR,False,False,False,0.2916666667,0.0875,0.2,0.3725490196,0.2985071133,0.7014928867,0.0007771213165,0.005374605821
Somehow we take less memory for the hot compilation which now succeeds.,Solution Discussion,False,71,CONTRIBUTOR,False,False,False,0.5,0.15,0.4,0.3774509804,0.2985071133,0.7014928867,0.0007771213165,0.005374605821
"However, I wonder what would happen if the application needed to run in smaller containers, so small that the hot compilation would fail again.",Solution Discussion,False,143,CONTRIBUTOR,False,False,False,1.0,0.3,0.6,0.3823529412,0.2985071133,0.7014928867,0.0007771213165,0.005374605821
Could you please run with 0.27 with CODE to see whether that continuous warm-->hot-->warm-->hot pattern is still present?,Investigation and Exploration,True,121,CONTRIBUTOR,False,False,False,0.75,0.225,0.8,0.387254902,0.2985071133,0.7014928867,0.0007771213165,0.005374605821
Thanks,Social Conversation,False,6,CONTRIBUTOR,False,False,False,0.04166666667,0.0125,1.0,0.3921568627,0.2985071133,0.7014928867,0.0007771213165,0.005374605821
"Yes, with that option, I see the issue with the customer services (but not the booking).

CODE",Investigation and Exploration,True,96,NONE,True,False,False,1.0,0.225,1.0,0.3970588235,0.2993577983,0.7006422017,0.005374605821,0.667871978
I took the time and installed AcmeAir MS to reproduce the problem.,Bug Reproduction,False,66,CONTRIBUTOR,False,False,False,0.2448979592,0.15,0.3333333333,0.4019607843,0.4050676222,0.5949323778,0.667871978,0.07448040886
"From the logs I captured I think that the recompilation warm-->hot is triggered by the EDO (exception directed optimizations): the JIT profiles the execution to determine whether exceptions are frequently thrown, and if they do, it recompiles the body attempting to transform the throw-catch into a goto.",Investigation and Exploration,False,304,CONTRIBUTOR,False,False,False,1.0,0.6125,0.6666666667,0.4068627451,0.4050676222,0.5949323778,0.667871978,0.07448040886
"@jdmcclur could you please try with CODE
If the problem disappears I will deliver a fix soon.",Solution Discussion,True,94,CONTRIBUTOR,False,False,False,0.3673469388,0.225,1.0,0.4117647059,0.4050676222,0.5949323778,0.667871978,0.07448040886
"@mpirvu - it looks like the problem does go away with 
CODE",Solution Discussion,True,60,NONE,True,False,False,1.0,0.15,1.0,0.4166666667,0.4168562751,0.5831437249,0.07448040886,0.0004668527312
I'll work on a solution,Task Progress,False,23,CONTRIBUTOR,False,False,False,1.0,0.0625,1.0,0.4264705882,0.4169301679,0.5830698321,0.0004668527312,0.5109021712
"I don't know if the fact that exception directed optimization (EDO) in used in the method in question could be a sign that something is not quite working right, since it would suggest a fair number of exceptions are happening in code that was either present in or inlined into that compiled method.",Investigation and Exploration,False,298,CONTRIBUTOR,False,False,False,1.0,0.6625,0.25,0.431372549,0.4977950347,0.5022049653,0.5109021712,0.08681141034
"I mention this not to affect the plan for delivery for the fix for the issue on the OpenJ9 side, but more as a question for @jdmcclur to consider assuming the exception is due to something that happened in the Liberty auth logic based on the above signature.",Investigation and Exploration,False,258,CONTRIBUTOR,False,False,False,0.9056603774,0.6,0.5,0.4362745098,0.4977950347,0.5022049653,0.5109021712,0.08681141034
"Of course it could also be related to some JCL code that was inlined into that Liberty code, which would bring that question back into the JDK realm.",Investigation and Exploration,False,149,CONTRIBUTOR,False,False,False,0.5283018868,0.35,0.75,0.4411764706,0.4977950347,0.5022049653,0.5109021712,0.08681141034
"@mpirvu if you agree, I think we should look at the JIT trace log for the method in question and see if we can understand what the EDO related exception is, and then reason about whether that can be justified or not.",Investigation and Exploration,False,216,CONTRIBUTOR,False,False,False,0.7924528302,0.525,1.0,0.4460784314,0.4977950347,0.5022049653,0.5109021712,0.08681141034
"Hmm, actually, looks like there were a small amount of Liberty errors in this code path when the problem originally happened, but this has been fixed in 21.0.0.11  URL , and I still see this issue there with scratchSpaceLimit=125000, although it seems to be better without that option.",Investigation and Exploration,False,285,NONE,True,False,False,1.0,0.6,0.5,0.4509803922,0.5115354209,0.4884645791,0.08681141034,0.007489941643
"(Also, I do not see the problem with openj9 0.24.0 even with the small amount of Liberty errors).",Investigation and Exploration,False,97,NONE,True,False,False,0.375,0.225,1.0,0.4558823529,0.5115354209,0.4884645791,0.08681141034,0.007489941643
"I think we should still check if EDO triggers a hot compilation with 0.26 and with 21.0.0.11 and if it does, try to understand what the exceptions are that are being thrown and reassure ourselves that all is working as designed.",Investigation and Exploration,False,228,CONTRIBUTOR,False,False,False,1.0,0.5125,1.0,0.4607843137,0.5127209182,0.4872790818,0.007489941643,0.0002740222552
I'll generate compilation logs with 0.24,Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,1.0,0.075,1.0,0.4656862745,0.51276429,0.48723571,0.0002740222552,0.488236616
I reproduced the same issue even with 0.24 (though for some reason it happens much more infrequently).,Bug Reproduction,False,102,CONTRIBUTOR,False,False,False,0.425,0.2125,0.2,0.4705882353,0.5900416852,0.4099583148,0.488236616,0.0006727318859
"From the compilation logs I see the following 3 catch blocks:
CODE
CODE
CODE
I cannot tell which of 3 catch block is most responsible for triggering the recompilation (they all decrement the same counter).",Investigation and Exploration,True,209,CONTRIBUTOR,False,False,False,1.0,0.5,0.4,0.4754901961,0.5900416852,0.4099583148,0.488236616,0.0006727318859
Those profiling counters are not always added to the native body.,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,0.275,0.1375,0.6,0.4803921569,0.5900416852,0.4099583148,0.488236616,0.0006727318859
"The logic reads:
CODE
CODE is 1100 and the number of nodes is 435, so this cannot be it why most of the time we bail out.",Investigation and Exploration,True,123,CONTRIBUTOR,False,False,False,0.75,0.375,0.8,0.4852941176,0.5900416852,0.4099583148,0.488236616,0.0006727318859
I cannot tell about this CODE test.,Investigation and Exploration,True,35,CONTRIBUTOR,False,False,False,0.2,0.1,1.0,0.4901960784,0.5900416852,0.4099583148,0.488236616,0.0006727318859
"An idea based on this:
CODE
I think that every time we generate a new node we bump the node count and this reflected by CODE.",Investigation and Exploration,True,127,CONTRIBUTOR,False,False,False,1.0,0.35,0.2,0.4950980392,0.5901481642,0.4098518358,0.0006727318859,0.002367610279
"However, nodes can also be deleted, so the true number of nodes is reflected by CODE.",Investigation and Exploration,True,85,CONTRIBUTOR,False,False,False,0.5714285714,0.2,0.4,0.5,0.5901481642,0.4098518358,0.0006727318859,0.002367610279
"In the compilation log I think we print the accurate number of nodes which is 435, but the total number of nodes ever created can be over 1100.",Investigation and Exploration,False,143,CONTRIBUTOR,False,False,False,1.0,0.35,0.6,0.5049019608,0.5901481642,0.4098518358,0.0006727318859,0.002367610279
The logic based on node count introduces some non-determinism.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.3571428571,0.125,0.8,0.5098039216,0.5901481642,0.4098518358,0.0006727318859,0.002367610279
Depending on how many nodes the optimizer creates we may or may not generate profiling instructions.,Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,0.5714285714,0.2,1.0,0.5147058824,0.5901481642,0.4098518358,0.0006727318859,0.002367610279
I don't believe the CODE condition is doing anything unexpected.,Investigation and Exploration,True,64,CONTRIBUTOR,False,False,False,0.3125,0.125,0.5,0.5196078431,0.5905229062,0.4094770938,0.002367610279,8.99e-05
An OSR catch block is not really a catch block that can catch Java exceptions and so we should not be adding in profiling instrumentation related to EDO to such a block.,Investigation and Exploration,False,169,CONTRIBUTOR,False,False,False,1.0,0.4,1.0,0.5245098039,0.5905229062,0.4094770938,0.002367610279,8.99e-05
Problem happens even with openliberty-daily which I assume contains the fix for https://github.com/OpenLiberty/open-liberty/pull/18465 which was merged on Sep 08.,Investigation and Exploration,False,162,CONTRIBUTOR,False,False,False,1.0,0.25,0.5,0.5294117647,0.590537134,0.409462866,8.99e-05,1.59e-05
"Actually, that fix is in CODE according to git",Investigation and Exploration,True,46,CONTRIBUTOR,False,False,False,0.45,0.1125,1.0,0.5343137255,0.590537134,0.409462866,8.99e-05,1.59e-05
Maybe running with verbose stack walk will show which of the exceptions gets thrown.,Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,1.0,0.175,0.5,0.5392156863,0.5905396583,0.4094603417,1.59e-05,0.00531516184
This could be one way to try and correlate back to the application logic.,Investigation and Exploration,False,73,CONTRIBUTOR,False,False,False,1.0,0.175,1.0,0.5441176471,0.5905396583,0.4094603417,1.59e-05,0.00531516184
"I used
CODE
to generate a stack trace every time an exception of type CODE is caught.",Investigation and Exploration,True,87,CONTRIBUTOR,False,False,False,1.0,0.2375,0.25,0.5490196078,0.5913809345,0.4086190655,0.00531516184,0.0004306064011
There are many trace files being generated because there are many exceptions being caught.,Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,0.7368421053,0.175,0.5,0.5539215686,0.5913809345,0.4086190655,0.00531516184,0.0004306064011
"I picked 3 at random and they look very similar:
CODE",Investigation and Exploration,True,54,CONTRIBUTOR,False,False,False,0.6315789474,0.15,0.75,0.5588235294,0.5913809345,0.4086190655,0.00531516184,0.0004306064011
Sometimes I see CODE frame change into CODE,Investigation and Exploration,True,43,CONTRIBUTOR,False,False,False,0.4210526316,0.1,1.0,0.5637254902,0.5913809345,0.4086190655,0.00531516184,0.0004306064011
I don't see any exceptions of type CODE being caught,Investigation and Exploration,True,52,CONTRIBUTOR,False,False,False,1.0,0.125,1.0,0.568627451,0.5914490903,0.4085509097,0.0004306064011,0.0001232375222
@jdmcclur your thoughts on the above stack trace ?,Contribution and Commitment,False,50,CONTRIBUTOR,False,False,False,1.0,0.1,1.0,0.5735294118,0.5914685961,0.4085314039,0.0001232375222,0.3672811628
@mpirvu - Do you see errors (NPEs) coming from the auth service?,Investigation and Exploration,False,64,NONE,True,False,False,0.5789473684,0.1375,0.2,0.5784313725,0.6496013347,0.3503986653,0.3672811628,1.0
"(This is what I was seeing, which caused the JWT to fail to create.",Investigation and Exploration,False,67,NONE,True,False,False,0.7368421053,0.175,0.4,0.5833333333,0.6496013347,0.3503986653,0.3672811628,1.0
"Then JMeter would try to access the booking/customer services without a JWT, which would fail/trigger an exception).",Investigation and Exploration,False,116,NONE,True,False,False,1.0,0.2375,0.6,0.5882352941,0.6496013347,0.3503986653,0.3672811628,1.0
I modified the Jmeter script to not do the login without a JWT (if the auth service failed).,Solution Discussion,False,92,NONE,True,False,False,0.9473684211,0.225,0.8,0.5931372549,0.6496013347,0.3503986653,0.3672811628,1.0
I could give you that version to see if there is any difference.,Investigation and Exploration,False,64,NONE,True,False,False,0.6842105263,0.1625,1.0,0.5980392157,0.6496013347,0.3503986653,0.3672811628,1.0
Any update on this ?,Task Progress,False,20,CONTRIBUTOR,False,False,False,1.0,0.05,1.0,0.6029411765,0.8078799082,0.1921200918,1.0,0.1280321867
"I have no updates - @mpirvu, let me know if you want something from me.",Task Progress,False,71,NONE,True,False,False,1.0,0.175,1.0,0.6078431373,0.82814466,0.17185534,0.1280321867,0.0014034579
I didn't have time to work on this.,Task Progress,False,35,CONTRIBUTOR,False,False,False,0.8888888889,0.1,0.5,0.612745098,0.8283667974,0.1716332026,0.0014034579,0.2743165754
I could try your last version of JMeter though.,Solution Discussion,False,47,CONTRIBUTOR,False,False,False,1.0,0.1125,1.0,0.6176470588,0.8283667974,0.1716332026,0.0014034579,0.2743165754
I will be using the new JMeter script/build shortly.,Task Progress,False,52,CONTRIBUTOR,False,False,False,0.4761904762,0.125,0.3333333333,0.6225490196,0.8717852336,0.1282147664,0.2743165754,0.001670230889
Before doing that I had one more run with the old JMeter and looked at the output from the auth service.,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,1.0,0.2625,0.6666666667,0.6274509804,0.8717852336,0.1282147664,0.2743165754,0.001670230889
"There is this exception being thrown:
CODE",Investigation and Exploration,True,43,CONTRIBUTOR,False,False,False,0.380952381,0.1,1.0,0.6323529412,0.8717852336,0.1282147664,0.2743165754,0.001670230889
"@mpirvu - tldr: This warning is expected, all the services will have it.",Investigation and Exploration,False,72,NONE,True,False,False,0.5,0.15,0.1428571429,0.637254902,0.8720495954,0.1279504046,0.001670230889,0.034636993
You can ignore it.,Social Conversation,False,18,NONE,True,False,False,0.1666666667,0.05,0.2857142857,0.6421568627,0.8720495954,0.1279504046,0.001670230889,0.034636993
This is coming out of the open-tracing implementation (Jaeger).,Investigation and Exploration,False,63,NONE,True,False,False,0.4166666667,0.125,0.4285714286,0.6470588235,0.8720495954,0.1279504046,0.001670230889,0.034636993
"It's warning you that it can't connect to a Jaeger Service, so the open-tracing traces are not being sent anywhere (which is fine).",Investigation and Exploration,False,131,NONE,True,False,False,1.0,0.3,0.5714285714,0.6519607843,0.8720495954,0.1279504046,0.001670230889,0.034636993
It is an ugly warning though.,Social Conversation,False,29,NONE,True,False,False,0.25,0.075,0.7142857143,0.6568627451,0.8720495954,0.1279504046,0.001670230889,0.034636993
"You can go the server.env in src/main/liberty/config and set this, if you want it to go away.",Solution Discussion,False,93,NONE,True,False,False,0.8333333333,0.25,0.8571428571,0.6617647059,0.8720495954,0.1279504046,0.001670230889,0.034636993
"This will affect performance.
CODE",Solution Discussion,True,35,NONE,True,False,False,0.25,0.075,1.0,0.6666666667,0.8720495954,0.1279504046,0.001670230889,0.034636993
I no longer see those exceptions with the new JMeter.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.2941176471,0.125,0.3333333333,0.6715686275,0.8775318892,0.1224681108,0.034636993,0.003956649389
"All the executor threads seem to be stuck in this stack trace:
CODE
This is happening for both OpenJ9 releases 0.29.0 and 0.24.0, so it's not a new problem introduced by 0.29.0",Investigation and Exploration,True,178,CONTRIBUTOR,False,False,False,1.0,0.425,1.0,0.681372549,0.8775318892,0.1224681108,0.034636993,0.003956649389
"Looking at methods that are compiled very late (since the problem happens after 20-25 minutes of load) I found this HashMap method:
CODE",Investigation and Exploration,True,137,CONTRIBUTOR,False,False,False,1.0,0.3125,1.0,0.6862745098,0.878158142,0.121841858,0.003956649389,0.006483743521
"Disabling scorching or even hot compilations, does not make the problem go away.",Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.8125,0.1625,0.5,0.6911764706,0.8791843797,0.1208156203,0.006483743521,0.05954547102
"These are the methods compiled when the JVM starting to consume all the CPU:
CODE",Investigation and Exploration,True,82,CONTRIBUTOR,False,False,False,1.0,0.2,1.0,0.6960784314,0.8791843797,0.1208156203,0.006483743521,0.05954547102
I run the flight service with just cold compilations.,Task Progress,False,53,CONTRIBUTOR,False,False,False,0.3333333333,0.1125,0.125,0.7009803922,0.8886091519,0.1113908481,0.05954547102,0.2271166044
"Just before my third batch of JMeter load finished, it started to show errors.",Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.5185185185,0.175,0.25,0.7058823529,0.8886091519,0.1113908481,0.05954547102,0.2271166044
"The flight service was active another 20-30 seconds after JMeter finished, consuming 150-200% CPU.",Investigation and Exploration,False,98,CONTRIBUTOR,False,False,False,0.5925925926,0.2,0.375,0.7107843137,0.8886091519,0.1113908481,0.05954547102,0.2271166044
After that everything went back to normal and I started the 4-th JMeter batch.,Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,0.5555555556,0.1875,0.5,0.7156862745,0.8886091519,0.1113908481,0.05954547102,0.2271166044
"Midway through the 10 minutes run, the booking service started to misbehave, being the only that consumed ~200% CPU.",Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,0.7037037037,0.2375,0.625,0.7205882353,0.8886091519,0.1113908481,0.05954547102,0.2271166044
"As usual, JMeter started to show errors.",Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,0.2592592593,0.0875,0.75,0.7254901961,0.8886091519,0.1113908481,0.05954547102,0.2271166044
"In another run, where both the flight service and the booking service were using only cold compilations, the flight service was again ""hung"" consuming 800% of CPU.",Investigation and Exploration,False,163,CONTRIBUTOR,False,False,False,1.0,0.3375,0.875,0.7303921569,0.8886091519,0.1113908481,0.05954547102,0.2271166044
"The methods compiled during that period when the problem appeared are:
CODE
I don't think it's one these at fault though.",Investigation and Exploration,True,123,CONTRIBUTOR,False,False,False,0.8518518519,0.2875,1.0,0.7352941176,0.8886091519,0.1113908481,0.05954547102,0.2271166044
I profiled the flight service when it consumes the CPU on the entire machine.,Investigation and Exploration,False,77,CONTRIBUTOR,False,False,False,0.6363636364,0.175,0.3333333333,0.7401960784,0.9245568441,0.07544315591,0.2271166044,0.02415455435
"The only methods that are executed are these two:
CODE
CODE calls CODE.",Investigation and Exploration,True,73,CONTRIBUTOR,False,False,False,0.6818181818,0.1875,0.6666666667,0.7450980392,0.9245568441,0.07544315591,0.2271166044,0.02415455435
"The problem could be in CODE, but it's also possible that the tree is malformed such that it creates an infinite loop.",Investigation and Exploration,True,118,CONTRIBUTOR,False,False,False,1.0,0.275,1.0,0.75,0.9245568441,0.07544315591,0.2271166044,0.02415455435
"Here is where the Liberty code does the put in the stack above.
https://github.com/OpenLiberty/open-liberty/blob/5c946ad0ee55c8adfbf54cb56bfa1558e6c28a96/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java#L245",Investigation and Exploration,False,268,NONE,True,False,False,0.6818181818,0.1875,1.0,0.7598039216,0.9283799925,0.0716200075,0.02415455435,0.06820979376
"The most conservative setup that still reproduces this livelock scenario is:
- CODE for booking and customer services
- CODE for flight service

If I use noOpt level for the flight service, then I cannot reproduce the livelock, but JMeter still throws errors after a while (the system is mostly idle and the throughput drops to 0.1).",Bug Reproduction,True,337,CONTRIBUTOR,False,False,False,1.0,0.7375,0.125,0.7647058824,0.9391761414,0.06082385865,0.06820979376,0.04955018304
The same behavior can be obtained by using cold optLevel but disabling the compilation of CODE.,Bug Reproduction,True,95,CONTRIBUTOR,False,False,False,0.2711864407,0.2,0.25,0.7696078431,0.9391761414,0.06082385865,0.06820979376,0.04955018304
"For what is worth, I am attaching the compilation log for CODE when compiled at cold with disable inlining: [log.txt.4.1.87859.20211108.161059.1.zip] URL ",Investigation and Exploration,True,154,CONTRIBUTOR,False,False,False,0.3559322034,0.2625,0.375,0.7745098039,0.9391761414,0.06082385865,0.06820979376,0.04955018304
"I have also tried switching to HotSpot for booking, customer, flight and auth services.",Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,0.2372881356,0.175,0.5,0.7794117647,0.9391761414,0.06082385865,0.06820979376,0.04955018304
"Livelock is not observed with hotspot, but performance is not stable in the sense that, after 5-10 minutes the performance drops from ~3400 to about 800 and stays there for a long time, after which it may go up to 1700 and then go down again.",Investigation and Exploration,False,242,CONTRIBUTOR,False,False,False,0.7966101695,0.5875,0.625,0.7843137255,0.9391761414,0.06082385865,0.06820979376,0.04955018304
"If I interrupt JMeter for a while and start it again, the system starts at good level of throughput, but drops again after a while.",Investigation and Exploration,False,131,CONTRIBUTOR,False,False,False,0.4237288136,0.3125,0.75,0.7892156863,0.9391761414,0.06082385865,0.06820979376,0.04955018304
"Yet, in another experiment I used HotSpot for booking, customer and auth services, and OpenJ9 for the flight service.",Investigation and Exploration,False,117,CONTRIBUTOR,False,False,False,0.3220338983,0.2375,0.875,0.7941176471,0.9391761414,0.06082385865,0.06820979376,0.04955018304
"The livelock condition did not manifest, so it's unclear whether the compilation of CODE on the flight service is the one that is faulty.",Investigation and Exploration,True,137,CONTRIBUTOR,False,False,False,0.406779661,0.3,1.0,0.7990196078,0.9391761414,0.06082385865,0.06820979376,0.04955018304
I looked at the attached log and the only non-trivial optimization done seems to be from local CSE.,Investigation and Exploration,False,99,CONTRIBUTOR,False,False,False,0.7916666667,0.2375,0.5,0.8039215686,0.9470188736,0.05298112636,0.04955018304,0.0226844032
Can you please try adding CODE to the (most conservative) options for the flight service and see if the livelock is avoided at least ?,Investigation and Exploration,True,134,CONTRIBUTOR,False,False,False,1.0,0.3,1.0,0.8088235294,0.9470188736,0.05298112636,0.04955018304,0.0226844032
I reproduced the issue with OpenJ9 for the flight service and HotSpot for auth/booking/customer services.,Bug Reproduction,False,105,CONTRIBUTOR,False,False,False,1.0,0.2125,0.2,0.8137254902,0.9506093286,0.04939067138,0.0226844032,0.006464895429
"The flight service had the following options:
CODE
Here's the compilation log:",Investigation and Exploration,True,80,CONTRIBUTOR,False,False,False,0.8235294118,0.175,0.4,0.818627451,0.9506093286,0.04939067138,0.0226844032,0.006464895429
"[log.txt.6.1.71914.20211109.153154.1.zip] URL 

I had to wait for 1.5 hours of load to reproduce.",Bug Reproduction,False,99,CONTRIBUTOR,False,False,False,0.8235294118,0.175,0.6,0.8235294118,0.9506093286,0.04939067138,0.0226844032,0.006464895429
The culprit method was compiled about 20 minutes into the run.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.6470588235,0.1375,0.8,0.8284313725,0.9506093286,0.04939067138,0.0226844032,0.006464895429
It's strange that the error shows such a long time after the compilation of the method.,Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,0.9411764706,0.2,1.0,0.8333333333,0.9506093286,0.04939067138,0.0226844032,0.006464895429
"How about CODE for that method in question while still keeping the opt level at cold, i.e. the rest of your command line unchanged ?",Investigation and Exploration,True,132,CONTRIBUTOR,False,False,False,1.0,0.3,1.0,0.8382352941,0.951632583,0.04836741695,0.006464895429,0.005950197542
I managed to reproduce the problem even at noOpt.,Bug Reproduction,False,49,CONTRIBUTOR,False,False,False,0.9,0.1125,0.5,0.8431372549,0.9525743718,0.04742562817,0.005950197542,0.005270216391
"Options used:
CODE
Compilation log:
[log.txt.3.1.82666.20211109.183106.1.zip] URL ",Investigation and Exploration,True,85,CONTRIBUTOR,False,False,False,1.0,0.125,1.0,0.8480392157,0.9525743718,0.04742562817,0.005950197542,0.005270216391
And you are 100% sure that not compiling CODE will not have this issue ?,Investigation and Exploration,True,72,CONTRIBUTOR,False,False,False,1.0,0.175,1.0,0.8529411765,0.9534085342,0.04659146584,0.005270216391,0.01437384465
"Ran again, excluding CODE and the problem still reproduces.",Bug Reproduction,True,59,CONTRIBUTOR,False,False,False,0.4090909091,0.1125,0.5,0.8578431373,0.9556836058,0.04431639422,0.01437384465,0.001152633296
"Methods compiled around the time the CPU jumps to 800%:
CODE
I am going to exclude all TreeNode methods next",Investigation and Exploration,True,110,CONTRIBUTOR,False,False,False,1.0,0.275,1.0,0.862745098,0.9556836058,0.04431639422,0.01437384465,0.001152633296
"CODE is the sort of method that could lead to a livelock in theory I believe, since the method will keep attempting to do the update as long as it takes (inside a loop presumably) until it successfully updates the value atomically.",Investigation and Exploration,True,231,CONTRIBUTOR,False,False,False,1.0,0.525,0.25,0.8676470588,0.9558660429,0.04413395706,0.001152633296,0.002453151618
i.e. if there is either a bug or some sort of race condition where the CODE keeps failing then it has no option but to keep trying in a tight loop that could burn CPU without advancing throughput.,Investigation and Exploration,True,196,CONTRIBUTOR,False,False,False,0.9047619048,0.475,0.5,0.8725490196,0.9558660429,0.04413395706,0.001152633296,0.002453151618
Could you please try a run without compiling that method ?,Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.2380952381,0.125,0.75,0.8774509804,0.9558660429,0.04413395706,0.001152633296,0.002453151618
We may even be interested in disabling the inlining of that method to be even more paranoid.,Investigation and Exploration,False,92,CONTRIBUTOR,False,False,False,0.4047619048,0.2125,1.0,0.8823529412,0.9558660429,0.04413395706,0.001152633296,0.002453151618
The experiment above was done with initialOptLevel=noOpt (disableInlining also remained on the command line).,Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,1.0,0.1875,0.5,0.887254902,0.9562543243,0.04374567572,0.002453151618,0.01999637537
I'll run without compiling that method.,Task Progress,False,39,CONTRIBUTOR,False,False,False,0.4,0.075,1.0,0.8921568627,0.9562543243,0.04374567572,0.002453151618,0.01999637537
The livelock happened even after excluding all CODE methods.,Investigation and Exploration,True,60,CONTRIBUTOR,False,False,False,0.375,0.1125,0.5,0.8970588235,0.959419322,0.04058067795,0.01999637537,0.04562398057
"The real kicker is that after excluding CODE I still see a livelock, but on the customer service which is running a HotSpot JVM.",Investigation and Exploration,True,128,CONTRIBUTOR,False,False,False,1.0,0.3,1.0,0.9019607843,0.959419322,0.04058067795,0.01999637537,0.04562398057
Sorry are you saying that after excluding CODE the flight service no longer showed a livelock ?,Social Conversation,True,95,CONTRIBUTOR,False,False,False,0.2,0.2,0.1666666667,0.9068627451,0.9666406206,0.03335937939,0.04562398057,0.02395737432
Are you planning to specifically try excluding CODE as well since that was the method seen before the livelock happened ?,Investigation and Exploration,True,121,CONTRIBUTOR,False,False,False,0.25,0.25,0.3333333333,0.9117647059,0.9666406206,0.03335937939,0.04562398057,0.02395737432
"If this method is at issue, it would also be good to check which atomic long we are updating in the program (perhaps via inspecting the stack using CODE), e.g. maybe we get into some state where exceptions are being thrown on all threads and there is a lot of contention for updating a particular atomic long that keeps track of number of failed transactions, i.e. perhaps it is a manifestation still of the original problem being some exceptions occurring.",Investigation and Exploration,True,457,CONTRIBUTOR,False,False,False,1.0,1.0,0.5,0.9166666667,0.9666406206,0.03335937939,0.04562398057,0.02395737432
"Given past results, I should also ask if the behavior that you observed in this regard was consistent or not.",Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.25,0.25,0.6666666667,0.9215686275,0.9666406206,0.03335937939,0.04562398057,0.02395737432
"Maybe we should get a javacore when the livelock happens on all the services and check how many threads are active (since the Liberty thread pool can change the number of threads, it may be good to check on whether the thread count is unexpectedly high for example).",Investigation and Exploration,False,266,CONTRIBUTOR,False,False,False,0.6,0.6,0.8333333333,0.9264705882,0.9666406206,0.03335937939,0.04562398057,0.02395737432
How many CPUs are in use in these runs for the different services respectively ?,Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.175,0.175,1.0,0.931372549,0.9666406206,0.03335937939,0.04562398057,0.02395737432
I excluded just CODE,Bug Reproduction,True,20,CONTRIBUTOR,False,False,False,0.07843137255,0.05,0.25,0.9362745098,0.9704325596,0.02956744036,0.02395737432,0.001040994599
"and I can still reproduce the issue:
CODE
There are 16 Executor Threads and all are burning CPU with the same stack trace:
CODE
I use my entire machine (4 cores/ 8 HW threads) for these experiments and there are no CPU limits set for docker containers.",Investigation and Exploration,True,256,CONTRIBUTOR,False,False,False,1.0,0.6375,0.5,0.9411764706,0.9704325596,0.02956744036,0.02395737432,0.001040994599
Given that I saw a livelock scenario for HotSpot as well (on the customer service),Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,0.2941176471,0.1875,0.75,0.9460784314,0.9704325596,0.02956744036,0.02395737432,0.001040994599
I doubt this is an issue stemming from OpenJ9 JIT compilation.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.2156862745,0.1375,1.0,0.9509803922,0.9704325596,0.02956744036,0.02395737432,0.001040994599
I agree with you that this is unlikely to be an OpenJ9 issue but I am wondering if there is still an indication of a Liberty issue.,Investigation and Exploration,False,131,CONTRIBUTOR,False,False,False,0.75,0.3375,0.25,0.9558823529,0.9705973268,0.02940267322,0.001040994599,0.001009097829
The thread/CPU counts you mentioned do not seem all that extreme.,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,0.3333333333,0.15,0.5,0.9607843137,0.9705973268,0.02940267322,0.001040994599,0.001009097829
"The stack trace that you showed also does not seem exceptional in any way, so I am wondering why this code path consumes so much CPU after N minutes whereas that was not the case previously.",Contribution and Commitment,False,190,CONTRIBUTOR,False,False,False,1.0,0.45,0.75,0.9656862745,0.9705973268,0.02940267322,0.001040994599,0.001009097829
@jdmcclur any thoughts on that code path and maybe we can instrument it in some way ?,Contribution and Commitment,False,85,CONTRIBUTOR,False,False,False,0.4444444444,0.2,1.0,0.9705882353,0.9705973268,0.02940267322,0.001040994599,0.001009097829
"From what I can tell, it is populating a Hashmap with CreationalContexts on every request that get released/removed later.",Investigation and Exploration,False,122,NONE,True,False,False,1.0,0.25,0.5,0.9754901961,0.9707570453,0.02924295466,0.001009097829,0.008707818333
"Maybe the Hashmap is getting too big? 

CODE

CODE
    
  CODE",Investigation and Exploration,True,68,NONE,True,False,False,0.65,0.1625,1.0,0.9803921569,0.9707570453,0.02924295466,0.001009097829,0.008707818333
It's possible that the hashtable gets big because the issue happens after some time.,Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,0.6363636364,0.175,0.3333333333,0.9852941176,0.9721353064,0.02786469359,0.008707818333,0.1760484251
With the latest configuration I have to wait for more than an hour to reproduce it.,Bug Reproduction,False,83,CONTRIBUTOR,False,False,False,0.7272727273,0.2,0.6666666667,0.9901960784,0.9721353064,0.02786469359,0.008707818333,0.1760484251
"However, based on the memory used by the container (193 MiB), I wouldn't say it's something we shouldn't be able to manage.",Solution Discussion,False,123,CONTRIBUTOR,False,False,False,1.0,0.275,1.0,0.9950980392,0.9721353064,0.02786469359,0.008707818333,0.1760484251
I don't see the livelock problem anymore with the new CODE provided by @jdmcclur,Solution Discussion,True,80,CONTRIBUTOR,False,False,True,1.0,0.175,1.0,1.0,1.0,0.0,0.1760484251,0.0
Crash or OutOfMemoryError when using AsyncGetCallTrace(),Observed Bug Behaviour,False,56,NONE,True,True,False,0.1176470588,0.05769230769,0.08333333333,0.005524861878,0.0,1.0,0.0,0.01118041169
"Java -version output
--------------------
openjdk version ""1.8.0_312""
IBM Semeru Runtime Open Edition (build 1.8.0_312-b07)",Observed Bug Behaviour,False,126,NONE,True,True,False,0.3529411765,0.1730769231,0.1666666667,0.01104972376,0.0,1.0,0.0,0.01118041169
"Eclipse OpenJ9 VM (build openj9-0.29.0, JRE 1.8.0 Linux amd64-64-Bit Compressed References 20211022_234 (JIT enabled, AOT enabled)
OpenJ9   - e1e72c497
OMR      - 299b6a2d2
JCL      - 8860d39588 based on jdk8u312-b07)

Summary of problem",Observed Bug Behaviour,False,242,NONE,True,True,False,0.7647058824,0.375,0.25,0.01657458564,0.0,1.0,0.0,0.01118041169
"------------------
We use a proprietary native agent which takes stack samples using AsyncGetCallTrace() API, from the context of a signal handler.",Investigation and Exploration,False,148,NONE,True,True,False,0.431372549,0.2115384615,0.3333333333,0.02209944751,0.0,1.0,0.0,0.01118041169
"This works reliably in HotSpot VM (in the sense that the JVM is stable, AsyncGetCallTrace has its known sampling problems).",Investigation and Exploration,False,123,NONE,True,True,False,0.3921568627,0.1923076923,0.4166666667,0.02762430939,0.0,1.0,0.0,0.01118041169
"When used with a recent-enough OpenJ9 VM, which supports AGCT, the VM either hangs or crashes, typically with an OutOfMemoryError message.",Bug Reproduction,False,138,NONE,True,True,False,0.431372549,0.2115384615,0.5,0.03314917127,0.0,1.0,0.0,0.01118041169
"The crash doesn't happen with our agent in the stack trace, but it happens only if the AGCT functionality is being used.",Investigation and Exploration,False,120,NONE,True,True,False,0.431372549,0.2115384615,0.5833333333,0.03867403315,0.0,1.0,0.0,0.01118041169
Hopefully something can be learned from the crash dumps.,Social Conversation,False,56,NONE,True,True,False,0.1764705882,0.08653846154,0.6666666667,0.04419889503,0.0,1.0,0.0,0.01118041169
"Perhaps it's useful to mention that we use per-thread timers to invoke the signal, that is each thread is receiving a signal when its CPU time has crossed a threshold, and that means we can be executing AGCT in more than one thread by more than one core in parallel.",Investigation and Exploration,False,266,NONE,True,True,False,1.0,0.4903846154,0.75,0.04972375691,0.0,1.0,0.0,0.01118041169
"Diagnostic files
----------------

https://drive.google.com/file/d/1emXVh3avEdckSXXMOMOoI6Gwhff4YGQC/view?usp=sharing

The tarball contains two core files because two were generated (maybe by different threads).",Investigation and Exploration,False,216,NONE,True,True,False,0.4117647059,0.2019230769,0.8333333333,0.05524861878,0.0,1.0,0.0,0.01118041169
core1 is the earlier one.,Investigation and Exploration,False,25,NONE,True,True,False,0.09803921569,0.04807692308,0.9166666667,0.06077348066,0.0,1.0,0.0,0.01118041169
"The standard output/error is:

CODE",Investigation and Exploration,True,37,NONE,True,True,False,0.137254902,0.06730769231,1.0,0.06629834254,0.0,1.0,0.0,0.01118041169
@urisimchoni can you pls run CODE on the first core file and make the result available as well.,Investigation and Exploration,True,95,CONTRIBUTOR,False,False,False,0.5294117647,0.1730769231,0.5,0.07182320442,0.007061211921,0.9929387881,0.01118041169,8.41e-06
"It collects the OS libraries into a zip file so we can look at the core on other machines and we don't need to use the same OS where the crash occurred.

https://www.eclipse.org/openj9/docs/tool_jextract/",Investigation and Exploration,False,206,CONTRIBUTOR,False,False,False,1.0,0.3269230769,1.0,0.0773480663,0.007061211921,0.9929387881,0.01118041169,8.41e-06
@tajila @gacholio,Contribution and Commitment,False,17,CONTRIBUTOR,False,False,False,1.0,0.01923076923,1.0,0.08287292818,0.007066522146,0.9929334779,8.41e-06,0.001461775901
"Here's a link for core1 with jpackcore -x:
https://drive.google.com/file/d/1g5oDs5zuxeqV7LFYu9nGnixPc0WjswkF/view?usp=sharing",Investigation and Exploration,False,126,NONE,True,False,False,1.0,0.09615384615,1.0,0.08839779006,0.007989735861,0.9920102641,0.001461775901,0.0002905675384
"Core1

Native stack
CODE

Java Stack
CODE",Investigation and Exploration,True,47,CONTRIBUTOR,False,False,False,1.0,0.1057692308,1.0,0.09392265193,0.008173249584,0.9918267504,0.0002905675384,3.16e-05
"Core 2

Native stack
CODE",Investigation and Exploration,True,28,CONTRIBUTOR,False,False,False,1.0,0.06730769231,1.0,0.09944751381,0.008193198807,0.9918068012,3.16e-05,0.0001986857803
The first javacore shows CODE,Investigation and Exploration,True,29,CONTRIBUTOR,False,False,False,1.0,0.04807692308,1.0,0.1049723757,0.008318682773,0.9916813172,0.0001986857803,0.0001490711459
"There was an attempt to allocate a ridiculous amount of memory, the trace history shows
CODE",Investigation and Exploration,True,93,CONTRIBUTOR,False,False,False,1.0,0.1634615385,1.0,0.1104972376,0.008412831628,0.9915871684,0.0001490711459,0.004865870055
"One scenario that might cause this is if the thread is interrupted during a malloc/free, and the ASGCT call uses malloc/free, resulting in corruption of the malloc heap.",Investigation and Exploration,False,169,CONTRIBUTOR,False,False,False,1.0,0.2884615385,0.5,0.1160220994,0.01148596888,0.9885140311,0.004865870055,0.007118677448
"ASGCT is careful not to allocate anything, but I will take another pass over the code to be sure.",Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,0.6333333333,0.1826923077,1.0,0.1215469613,0.01148596888,0.9885140311,0.004865870055,0.007118677448
The huge memory allocation attempt is the stack walker cache used by CODE.,Investigation and Exploration,True,74,CONTRIBUTOR,False,False,False,0.5,0.125,0.125,0.1270718232,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
"Generally, huge cache sizes indicate a corrupt stack. CODE results in a huge positive value.",Investigation and Exploration,True,92,CONTRIBUTOR,False,False,False,0.5769230769,0.1442307692,0.25,0.1325966851,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
"In the core, the stack is completely walkable, which makes it look like the CODE value was incorrect at the time the cache computation took place.",Investigation and Exploration,True,146,CONTRIBUTOR,False,False,False,1.0,0.25,0.375,0.138121547,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
"ASGCT does modify the CODE temporarily in the case where a JIT frame is on stack, but it's restored before exit.",Investigation and Exploration,True,112,CONTRIBUTOR,False,False,False,0.8076923077,0.2019230769,0.5,0.1436464088,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
"This makes it appear as if the thread is running java while the ASGCT stack modification is in place, which is clearly impossible.",Investigation and Exploration,False,130,CONTRIBUTOR,False,False,False,0.8846153846,0.2211538462,0.625,0.1491712707,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
I'll need to think more on the fact that multiple ASGCT are running.,Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,0.5,0.125,0.75,0.1546961326,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
@urisimchoni Is it possible that an ASGCT is interrupted and another ASGCT takes place on the same thread?,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.6923076923,0.1730769231,0.875,0.1602209945,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
I'm not sure this is even a problem if it is the case.,Social Conversation,False,54,CONTRIBUTOR,False,False,False,0.5,0.125,1.0,0.1657458564,0.01598191156,0.9840180884,0.007118677448,0.0002824625523
"ASGCT is invoked from a signal handler, and the signal is blocked while the signal handler is executing (default POSIX behavior),",Investigation and Exploration,False,129,NONE,True,False,False,1.0,0.2019230769,0.5,0.1712707182,0.01616030641,0.9838396936,0.0002824625523,0.01268066734
so no - an ASGCT cannot be interrupted by agent code that calls ASGCT.,Investigation and Exploration,False,70,NONE,True,False,False,0.6666666667,0.1346153846,1.0,0.1767955801,0.01616030641,0.9838396936,0.0002824625523,0.01268066734
I've taken a look at the code and I don't see any allocations.,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.7777777778,0.1346153846,0.25,0.182320442,0.0241690347,0.9758309653,0.01268066734,9.99e-05
"The signal handler code does some stuff which might not stack well, but I can't blame it yet.",Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,1.0,0.1730769231,0.5,0.1878453039,0.0241690347,0.9758309653,0.01268066734,9.99e-05
@urisimchoni Can you provide something I can run to reproduce the problem?,Bug Reproduction,False,74,CONTRIBUTOR,False,False,False,0.6666666667,0.1153846154,0.75,0.1933701657,0.0241690347,0.9758309653,0.01268066734,9.99e-05
I need to be able to strip pieces out of ASGCT to see what's causing the issue.,Investigation and Exploration,False,79,CONTRIBUTOR,False,False,False,0.9444444444,0.1634615385,1.0,0.1988950276,0.0241690347,0.9758309653,0.01268066734,9.99e-05
"Sure, I'll make a stripped-down version of the agent.",Social Conversation,False,53,NONE,True,False,False,1.0,0.09615384615,0.5,0.2044198895,0.02423213548,0.9757678645,9.99e-05,0.03981237336
Thanks for looking into this!,Social Conversation,False,29,NONE,True,False,False,0.5,0.04807692308,1.0,0.2099447514,0.02423213548,0.9757678645,9.99e-05,0.03981237336
Similar corrupt stack failure without AsyncGetCallTrace() https://github.com/eclipse-openj9/openj9/issues/13910,Bug Reproduction,False,111,CONTRIBUTOR,False,False,False,1.0,0.06730769231,1.0,0.2154696133,0.04937643367,0.9506235663,0.03981237336,0.0528229212
@urisimchoni,Social Conversation,False,12,CONTRIBUTOR,False,False,False,0.04,0.009615384615,0.3333333333,0.2209944751,0.08273780276,0.9172621972,0.0528229212,0.002473459958
Any update?,Task Progress,False,11,CONTRIBUTOR,False,False,False,0.08,0.01923076923,0.6666666667,0.226519337,0.08273780276,0.9172621972,0.0528229212,0.002473459958
"The similar issue mentioned above is not repeatable, so this is still my best chance to find the underlying problem (I'm hoping there's only one!).",Investigation and Exploration,False,147,CONTRIBUTOR,False,False,False,1.0,0.2403846154,1.0,0.2320441989,0.08273780276,0.9172621972,0.0528229212,0.002473459958
Sorry of not sending a timely update.,Task Progress,False,37,NONE,True,False,False,0.3181818182,0.06730769231,0.2,0.2375690608,0.08429996571,0.9157000343,0.002473459958,0.0181710758
I've tried creating a stripped-down version of the agent along with a sample application and that hasn't reproduced the issue.,Task Progress,False,126,NONE,True,False,False,1.0,0.2115384615,0.4,0.2430939227,0.08429996571,0.9157000343,0.002473459958,0.0181710758
I then got myself busy with other pressing issues.,Task Progress,False,50,NONE,True,False,False,0.4090909091,0.08653846154,0.6,0.2486187845,0.08429996571,0.9157000343,0.002473459958,0.0181710758
Hopefully I'll be able to get back to this within a week or so.,Task Progress,False,63,NONE,True,False,False,0.6363636364,0.1346153846,0.8,0.2541436464,0.08429996571,0.9157000343,0.002473459958,0.0181710758
Sorry for dropping the ball on this.,Social Conversation,False,36,NONE,True,False,False,0.3181818182,0.06730769231,1.0,0.2596685083,0.08429996571,0.9157000343,0.002473459958,0.0181710758
I strongly suspect this will fix the memory corruption issues: https://github.com/eclipse-openj9/openj9/pull/13972,Solution Discussion,False,114,CONTRIBUTOR,False,False,False,1.0,0.1057692308,1.0,0.2651933702,0.09577627094,0.9042237291,0.0181710758,0.002998466112
"This doesn't seem to fix the issue, I applied the PR patch to master, built a jdk from clean, and it still happens (it's not the same stack I reported but is similar to other stacks I've seen with this issue all related to memory allocation going haywire)

CODE",Solution Discussion,True,263,NONE,True,False,False,1.0,0.4903846154,1.0,0.270718232,0.097670012,0.902329988,0.002998466112,0.001759615203
That's unfortunate - I guess I'll have to wait for the test case.,Social Conversation,False,65,CONTRIBUTOR,False,False,False,1.0,0.1153846154,1.0,0.2762430939,0.09878133206,0.9012186679,0.001759615203,0.0008767019524
This PR is related to ASGCT but doesn't immediately appear to have anything to do with memory corruption: https://github.com/eclipse-openj9/openj9/pull/13979,Solution Discussion,False,157,CONTRIBUTOR,False,False,False,1.0,0.1826923077,1.0,0.2817679558,0.09933503066,0.9006649693,0.0008767019524,0.001297479501
"Working with Andrei from async-profiler, we've identified some hidden malloc calls in the JIT metadata processing which I'm looking into.",Investigation and Exploration,False,137,CONTRIBUTOR,False,False,False,1.0,0.2115384615,1.0,0.2872928177,0.1001544797,0.8998455203,0.001297479501,0.006003143523
https://github.com/eclipse-openj9/openj9/pull/14007 might address the remaining malloc issues.,Solution Discussion,False,94,CONTRIBUTOR,False,False,False,1.0,0.06730769231,1.0,0.2928176796,0.1039458847,0.8960541153,0.006003143523,0.007726096919
https://github.com/eclipse-openj9/openj9/pull/14007 is reverted temporarily until the build breaks can be fixed.,Workarounds,False,112,CONTRIBUTOR,False,False,False,1.0,0.1057692308,1.0,0.2983425414,0.1088254552,0.8911745448,0.007726096919,0.00345613271
https://github.com/eclipse-openj9/openj9/pull/14023 is the new fix (no change to 64-bit platforms).,Solution Discussion,False,99,CONTRIBUTOR,False,False,False,1.0,0.1057692308,1.0,0.3038674033,0.1110082448,0.8889917552,0.00345613271,0.0326248414
AFAICT the issue still happens with the fix.,Solution Discussion,False,44,NONE,True,False,False,0.1568627451,0.07692307692,0.5,0.3093922652,0.1316131138,0.8683868862,0.0326248414,0.0007086181756
"I've created a reproducer here (my difficulty has been in providing a sample Java program that is small enough yet reproduces the issue when running with agent loaded, eventually I supplied the Java program in binary form but the source code for the native agent is there):

https://gitlab.com/urisimchoni/agct-crash-demo",Bug Reproduction,False,323,NONE,True,False,False,1.0,0.4903846154,1.0,0.3149171271,0.1316131138,0.8683868862,0.0326248414,0.0007086181756
The agent as built requires a glibc version higher than I have in my docker image (I have glibc 2.12).,Solution Discussion,False,102,CONTRIBUTOR,False,False,False,1.0,0.1923076923,0.5,0.320441989,0.1320606558,0.8679393442,0.0007086181756,9.57e-05
"I rebuilt it, but it doesn't work:
CODE",Solution Discussion,True,40,CONTRIBUTOR,False,False,False,0.45,0.08653846154,1.0,0.3259668508,0.1320606558,0.8679393442,0.0007086181756,9.57e-05
"I tried it on Ubuntu 18 and it didn't load, but it does load on RedHat 8. You could create a fyre machine.",Solution Discussion,False,106,CONTRIBUTOR,False,False,False,1.0,0.2211538462,1.0,0.3314917127,0.1321211254,0.8678788746,9.57e-05,3.79e-05
"Ah, user error, it does work on Ubuntu 18 as well.",Solution Discussion,False,50,CONTRIBUTOR,False,False,False,1.0,0.1057692308,1.0,0.3370165746,0.1321450931,0.8678549069,3.79e-05,0.000275039294
"Fwiw, I think you need a kernel 2.6 or later, not a later glibc.",Solution Discussion,False,64,CONTRIBUTOR,False,False,False,1.0,0.1346153846,1.0,0.3425414365,0.1323187997,0.8676812003,0.000275039294,2.2e-05
"Ok, it's one of those days.",Social Conversation,False,27,CONTRIBUTOR,False,False,False,0.2857142857,0.05769230769,0.3333333333,0.3480662983,0.1323326733,0.8676673267,2.2e-05,3.48e-05
On both Ubuntu 18 and RHEL 8 I got the same CODE error as you did.,Bug Reproduction,True,66,CONTRIBUTOR,False,False,False,0.7619047619,0.1538461538,0.6666666667,0.3535911602,0.1323326733,0.8676673267,2.2e-05,3.48e-05
"I wonder if there is some prereq that needs to be installed, to use timer_create you need to link with CODE.",Solution Discussion,True,108,CONTRIBUTOR,False,False,False,1.0,0.2019230769,1.0,0.3591160221,0.1323326733,0.8676673267,2.2e-05,3.48e-05
Seems the agent isn't hard linked to librt.,Solution Discussion,False,43,CONTRIBUTOR,False,False,False,0.3333333333,0.07692307692,0.5,0.364640884,0.1323546318,0.8676453682,3.48e-05,4.06e-05
"Not sure the best way to fix it, but I did the following on Ub18 and it seemed to fix the problem
CODE",Solution Discussion,True,103,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.3701657459,0.1323546318,0.8676453682,3.48e-05,4.06e-05
"Sorry for this, for some reason it worked on my system.",Social Conversation,False,55,NONE,True,False,False,0.5789473684,0.1057692308,0.5,0.3756906077,0.1323802739,0.8676197261,4.06e-05,6.21e-05
"Please add the following to link librt (which obviously needs to be linked to get timer_create):

CODE",Solution Discussion,True,104,NONE,True,False,False,1.0,0.1826923077,1.0,0.3812154696,0.1323802739,0.8676197261,4.06e-05,6.21e-05
"Yep, that fixes it, thanks.",Social Conversation,False,27,CONTRIBUTOR,False,False,False,0.3571428571,0.04807692308,0.5,0.3867403315,0.1324195026,0.8675804974,6.21e-05,0.0001049103339
Now I just have to figure out how to get CODE in my image.,Investigation and Exploration,True,58,CONTRIBUTOR,False,False,False,1.0,0.1346153846,1.0,0.3922651934,0.1324195026,0.8675804974,6.21e-05,0.0001049103339
"Hmm, looks like it may not be available on this version of the OS.",Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,1.0,0.1346153846,1.0,0.3977900552,0.1324857608,0.8675142392,0.0001049103339,2.73e-05
"I have installed version 1.6 manually, and I get a lot of this during the run:
CODE
I take it that's not expected?",Investigation and Exploration,True,116,CONTRIBUTOR,False,False,False,1.0,0.2403846154,1.0,0.4033149171,0.132503031,0.867496969,2.73e-05,6.47e-05
"For the record, here's the complete output of a run:
CODECODE | \ \ \ \
 \\/  ___)",Investigation and Exploration,True,84,CONTRIBUTOR,False,False,False,0.1442307692,0.1442307692,0.02631578947,0.408839779,0.1325438863,0.8674561137,6.47e-05,3.39e-05
"Starting Application on 736bb006f300 with PID 70202 (/team/gac/async/agct-crash-demo/binaries/oms-sb-mybatis-0.0.1-SNAPSHOT.jar started by j9build in /team/gac/async/agct-crash-demo)
2021-12-01 15:45:01.427  INFO 70202 --- [           main] com.omsee.",Investigation and Exploration,False,252,CONTRIBUTOR,False,False,False,0.3846153846,0.3846153846,0.1578947368,0.4364640884,0.1325438863,0.8674561137,6.47e-05,3.39e-05
"No active profile set, falling back to default profiles: default

***** errexit on line 22 ./use-apis.sh

***** errexit on line 22 ./use-apis.sh

***** errexit on line 22 ./use-apis.sh

***** errexit on line 22 ./use-apis.sh

***** errexit on line 22 ./use-apis.sh

***** errexit on line 22 ./use-apis.sh
2021-12-01 15:45:03.672  WARN 70202 --- [           main] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.omsee]' package.",Investigation and Exploration,False,472,CONTRIBUTOR,False,False,False,0.7115384615,0.7115384615,0.1842105263,0.4419889503,0.1325438863,0.8674561137,6.47e-05,3.39e-05
"OK it seems like the JVM is taking more time to load than on my setup - please increase the ""sleep 5"" to ""sleep 15"" in reproduce.sh. The spring-boot messages should complete before enabling AGCT and running traffic.",Investigation and Exploration,False,215,NONE,True,False,False,1.0,0.3653846154,1.0,0.6187845304,0.1325653185,0.8674346815,3.39e-05,3.67e-05
Not surprising - I'm running a docker on my macbook.,Social Conversation,False,52,CONTRIBUTOR,False,False,False,0.36,0.08653846154,0.5,0.6243093923,0.1325885209,0.8674114791,3.67e-05,1.76e-05
"I still see some of the messages after the output, but I just got a crash, so this should be good enough to work with.",Bug Reproduction,False,118,CONTRIBUTOR,False,False,False,1.0,0.2403846154,1.0,0.6298342541,0.1325885209,0.8674114791,3.67e-05,1.76e-05
"Yes, the messages start after the crash because the application is not serving HTTP requests",Investigation and Exploration,False,92,NONE,True,False,False,1.0,0.1442307692,1.0,0.635359116,0.1325996675,0.8674003325,1.76e-05,0.004967523245
Ran many many times with -Xint with no failure.,Testing,False,47,CONTRIBUTOR,False,False,False,1.0,0.08653846154,1.0,0.6408839779,0.1357370059,0.8642629941,0.004967523245,0.007465904141
Running with the JIT but removing the ASGCT stack walk entirely crashes.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,0.6315789474,0.1153846154,0.5,0.6464088398,0.1404522465,0.8595477535,0.007465904141,2.46e-05
"In the instance I'm looking at, the vmThread list is corrupted and the JIT sampler crashes as a result.",Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,1.0,0.1826923077,1.0,0.6519337017,0.1404522465,0.8595477535,0.007465904141,2.46e-05
"Actually, it looks like the list is OK, but one of the threads has been trashed (the bad thread is reachable by walkling the linked list forwards or backwards from the main thread).",Investigation and Exploration,False,181,CONTRIBUTOR,False,False,False,1.0,0.3173076923,1.0,0.6574585635,0.1404677945,0.8595322055,2.46e-05,0.0002200465847
Removing the JIT resolve frame build and stack walk still results in a crash due to vmThread corruption.,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,1.0,0.1730769231,1.0,0.6629834254,0.1406067693,0.8593932307,0.0002200465847,0.215915693
"If I comment out the entire ASGCT function, the VM still crashes, so I'm a little lost.",Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,1.0,0.1634615385,1.0,0.6685082873,0.2769726302,0.7230273698,0.215915693,0.0001452837692
It appears the C stack is being randomly corrupted.,Investigation and Exploration,False,51,CONTRIBUTOR,False,False,False,1.0,0.08653846154,1.0,0.6740331492,0.2770643871,0.7229356129,0.0001452837692,0.01909072661
@gacholio Can you clarify what is it exactly that you comment out?,Investigation and Exploration,False,66,NONE,True,False,False,0.48,0.1153846154,0.3333333333,0.679558011,0.2891215161,0.7108784839,0.01909072661,0.01291495446
Is it something in OpenJ9 or in the sample agent?,Investigation and Exploration,False,49,NONE,True,False,False,0.4,0.09615384615,0.6666666667,0.6850828729,0.2891215161,0.7108784839,0.01909072661,0.01291495446
"(maybe by commenting-out AGCT in openj9 you return something the agent didn't expect, or even violate the contract, and that causes stack corruption....)",Investigation and Exploration,False,153,NONE,True,False,False,1.0,0.2403846154,1.0,0.6906077348,0.2891215161,0.7108784839,0.01909072661,0.01291495446
"Basically, I made AGCT do nothing but return a negative value.",Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.3666666667,0.1057692308,0.5,0.6961325967,0.2972782131,0.7027217869,0.01291495446,0.0003838884996
Next step is to hack the agent to not even make the call (and I'll have a look through the agent code to see if I can spot anything obvious).,Investigation and Exploration,False,141,CONTRIBUTOR,False,False,False,1.0,0.2884615385,1.0,0.7016574586,0.2972782131,0.7027217869,0.01291495446,0.0003838884996
"Well if AGCT just returns, then the only suspicious part there is CODE which is (from a signal handler context):

CODE",Investigation and Exploration,True,120,NONE,True,False,False,1.0,0.2211538462,1.0,0.7071823204,0.2975206655,0.7024793345,0.0003838884996,9.84e-05
That may be it (and it's unnecessary as AGCT tells you the JNI context if there is one).,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,1.0,0.1730769231,0.5,0.7127071823,0.2975828095,0.7024171905,9.84e-05,8.01e-05
I would suggest removing it.,Investigation and Exploration,False,28,CONTRIBUTOR,False,False,False,0.2777777778,0.04807692308,1.0,0.7182320442,0.2975828095,0.7024171905,9.84e-05,8.01e-05
Interesting.,Social Conversation,False,12,NONE,True,False,False,0.03225806452,0.009615384615,0.25,0.7237569061,0.2976333762,0.7023666238,8.01e-05,0.0002211070502
This determination of current thread JNI appeared in Honest Profiler (which AFAIK was the first open-source profiler to use AGCT) and still appears to be present in Async Profiler (https://github.com/jvm-profiling-tools/async-profiler/blob/master/src/profiler.cpp#L304).,Investigation and Exploration,False,270,NONE,True,False,False,1.0,0.2980769231,0.5,0.729281768,0.2976333762,0.7023666238,8.01e-05,0.0002211070502
"I'll have a look in HotSpot source code to see if it's required there, but of course we can identify the VM type and tweak things accordingly.",Investigation and Exploration,False,142,NONE,True,False,False,0.8709677419,0.2596153846,0.75,0.7348066298,0.2976333762,0.7023666238,8.01e-05,0.0002211070502
"I'll try this,
Thanks!",Social Conversation,False,23,NONE,True,False,False,0.1612903226,0.04807692308,1.0,0.7403314917,0.2976333762,0.7023666238,8.01e-05,0.0002211070502
"I don't see any obvious reason why this would cause corruption, but in general it's not safe to use these APIs from signal handlers.",Investigation and Exploration,False,132,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.7458563536,0.2977730208,0.7022269792,0.0002211070502,0.01204726646
"Actually, GetEnv can result in records being put in the trace buffer, so calling it definitely has the potential for corruption.",Investigation and Exploration,False,128,CONTRIBUTOR,False,False,False,1.0,0.2019230769,0.5,0.7513812155,0.3053817121,0.6946182879,0.01204726646,0.01340473801
AGCT already performs the attached thread check and returns the current JNIEnv in the output buffer.,Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,0.7619047619,0.1538461538,1.0,0.7569060773,0.3053817121,0.6946182879,0.01204726646,0.01340473801
"@urisimchoni As the documentation for this feature came from the back of a napkin somewhere, it's not clear to me if the call requires that the env_id be filled in, or whether it's returned by the call.",Investigation and Exploration,False,202,CONTRIBUTOR,False,False,False,1.0,0.3557692308,0.25,0.7624309392,0.3138477417,0.6861522583,0.01340473801,0.0004107031265
"The OpenJ9 implementation is assuming it's an out parameter, which means we are unable to get the trace for anything but the current thread (which makes sense to me in the context of a signal handler).",Investigation and Exploration,False,201,CONTRIBUTOR,False,False,False,0.972972973,0.3461538462,0.5,0.7679558011,0.3138477417,0.6861522583,0.01340473801,0.0004107031265
"The various ""not java"" return codes also make me think this should be the implemenation.",Solution Discussion,False,88,CONTRIBUTOR,False,False,False,0.4054054054,0.1442307692,0.75,0.773480663,0.3138477417,0.6861522583,0.01340473801,0.0004107031265
"If it turns out to be the opposite, GetEnv would need to be modified to be async safe.",Solution Discussion,False,86,CONTRIBUTOR,False,False,False,0.4864864865,0.1730769231,1.0,0.7790055249,0.3138477417,0.6861522583,0.01340473801,0.0004107031265
CODE appears to follow the same pattern as the provided example.,Investigation and Exploration,True,64,CONTRIBUTOR,False,False,False,1.0,0.1057692308,1.0,0.7845303867,0.3141071294,0.6858928706,0.0004107031265,0.0006521105157
"Re-GetEnv, I think it's possible to make the agent behavior dependent on JVM type.",Solution Discussion,False,82,NONE,True,False,False,0.3260869565,0.1442307692,0.1111111111,0.7900552486,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
"For example we use the presence of ""com.ibm.GetOSThreadID"" extension to determine the JVM is J9.",Solution Discussion,False,96,NONE,True,False,False,0.347826087,0.1538461538,0.2222222222,0.7955801105,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
I don't know what other profilers would think of it,Social Conversation,False,51,NONE,True,False,False,0.2173913043,0.09615384615,0.3333333333,0.8011049724,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
but for me it's not an issue.,Social Conversation,False,29,NONE,True,False,False,0.152173913,0.06730769231,0.4444444444,0.8066298343,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
"However, commenting-out GetEnv doesn't solve the issue for me.",Solution Discussion,False,62,NONE,True,False,False,0.2173913043,0.09615384615,0.5555555556,0.8121546961,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
"The If I plant a ""return"" statement at the beginning of the signal handler, the crash still happens, and If I comment-out the entire signal handler, the crash disappears.",Solution Discussion,False,170,NONE,True,False,False,0.652173913,0.2884615385,0.6666666667,0.817679558,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
This lead me to think that the issue is with allocating lots of memory on the native stack - the signal handler allocates the AGCT buffer on the stack - and indeed if I use a smaller buffer size (max 2 frames instead of 640) the crash disappears.,Solution Discussion,False,246,NONE,True,False,False,1.0,0.4423076923,0.7777777778,0.8232044199,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
"@gacholio Can you confirm that there might be a problem with allocating a large amount on native stack (640 frames * 16 bytes per frame, 10K I believe)?",Solution Discussion,False,152,NONE,True,False,False,0.6086956522,0.2692307692,0.8888888889,0.8287292818,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
"I think it should be easy to use a thread-local var that points to the buffer, allocate it on thread init and deallocate on thread termination.",Solution Discussion,False,143,NONE,True,False,False,0.5869565217,0.2596153846,1.0,0.8342541436,0.3145189828,0.6854810172,0.0006521105157,0.006311966217
"10K doesn't sound like very much, but your investigation would suggest it's the issue (even though calling ASGCT will use a bunch of stack as well).",Investigation and Exploration,False,148,CONTRIBUTOR,False,False,False,0.5869565217,0.2596153846,0.1,0.8397790055,0.3185054309,0.6814945691,0.006311966217,1.18e-05
The TLS solution sounds safe regardless of which VM you're targetting.,Solution Discussion,False,70,CONTRIBUTOR,False,False,False,0.2391304348,0.1057692308,0.2,0.8453038674,0.3185054309,0.6814945691,0.006311966217,1.18e-05
Looks like the VM defaults to a native stack size of 256k.,Solution Discussion,False,58,CONTRIBUTOR,False,False,False,0.2608695652,0.1153846154,0.3,0.8508287293,0.3185054309,0.6814945691,0.006311966217,1.18e-05
"If the native stack is the issue, then adding CODE to the command line should also fix it.",Solution Discussion,True,90,CONTRIBUTOR,False,False,False,0.3913043478,0.1730769231,0.4,0.8563535912,0.3185054309,0.6814945691,0.006311966217,1.18e-05
I'm not sure how signal handlers work on the various platforms.,Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.2391304348,0.1057692308,0.5,0.861878453,0.3185054309,0.6814945691,0.006311966217,1.18e-05
I was under the impression that they might run on their own stack sometimes.,Solution Discussion,False,76,CONTRIBUTOR,False,False,False,0.3043478261,0.1346153846,0.6,0.8674033149,0.3185054309,0.6814945691,0.006311966217,1.18e-05
"On x86 platforms, when running JIT compiled code, the CODE register points into the java stack rather than the native stack.",Solution Discussion,True,124,CONTRIBUTOR,False,False,False,0.4565217391,0.2019230769,0.7,0.8729281768,0.3185054309,0.6814945691,0.006311966217,1.18e-05
"If the signal handler simply runs on top of wherever CODE points, then we might need to increase the ""slush"" area of the java stack (a 32K area beyond the point of java stack overflow used to handle the overflow or possible signal handler execution).",Solution Discussion,True,250,CONTRIBUTOR,False,False,False,1.0,0.4423076923,0.8,0.8784530387,0.3185054309,0.6814945691,0.006311966217,1.18e-05
OpenJ9 allocates small java stacks initially and grows them as need be (the slush area is the same regardless of the java stack size).,Solution Discussion,False,134,CONTRIBUTOR,False,False,False,0.5217391304,0.2307692308,0.9,0.8839779006,0.3185054309,0.6814945691,0.006311966217,1.18e-05
The growing behaviour can be disabled by setting the intial stack size to the maximum (CODE assuming you're using the default sizes).,Solution Discussion,True,133,CONTRIBUTOR,False,False,False,0.4782608696,0.2115384615,1.0,0.8895027624,0.3185054309,0.6814945691,0.006311966217,1.18e-05
Any chance you can confirm whether the CODE is an input or output parameter?,Solution Discussion,True,76,CONTRIBUTOR,False,False,False,0.5185185185,0.1346153846,0.5,0.8950276243,0.318512894,0.681487106,1.18e-05,0.005051300017
"If it is needed as input, it would also be simple to stash this in TLS during thread startup to avoid the CODE call in the handler.",Solution Discussion,True,131,CONTRIBUTOR,False,False,False,1.0,0.2596153846,1.0,0.9005524862,0.318512894,0.681487106,1.18e-05,0.005051300017
"@gacholio it's pretty clear from the HotSpot sources (https://github.com/openjdk/jdk/blob/master/src/hotspot/share/prims/forte.cpp#L564) that this is an input parameter, at least for HotSpot.",Solution Discussion,False,191,NONE,True,False,False,0.7916666667,0.1826923077,0.1666666667,0.9060773481,0.3217031432,0.6782968568,0.005051300017,0.0136228909
"By default a signal runs on the stack of the thread that receives it, and probably the stack in X86 is identified by RSP.",Solution Discussion,False,121,NONE,True,False,False,1.0,0.2307692308,0.3333333333,0.9116022099,0.3217031432,0.6782968568,0.005051300017,0.0136228909
"In any case it's not difficult to move the AGCT buffer to a dynamically-allocated buffer, pointed-to by a thread-local variable.",Solution Discussion,False,128,NONE,True,False,False,0.9583333333,0.2211538462,0.5,0.9171270718,0.3217031432,0.6782968568,0.005051300017,0.0136228909
"As far as I'm concerned we can close this issue, I just like to know whether obtaining the JNIEnv will be async-safe.",Action on Issue,False,117,NONE,True,False,False,0.9583333333,0.2211538462,0.6666666667,0.9226519337,0.3217031432,0.6782968568,0.005051300017,0.0136228909
Uri,Social Conversation,False,3,NONE,True,False,False,0.04166666667,0.009615384615,1.0,0.9337016575,0.3217031432,0.6782968568,0.005051300017,0.0136228909
"I will update GetEnv to avoid using tracepoints, which should make it async-safe for fetching the JNIEnv.",Solution Discussion,False,105,CONTRIBUTOR,False,False,False,0.4864864865,0.1730769231,0.3333333333,0.9392265193,0.3303069516,0.6696930484,0.0136228909,0.0001988372754
"I will also update ASGCT to accept the JNIEnv as an incoming parameter, though I may restrict actual use of the call to the current thread while I consider what extra effects inspecting other threads might have.",Solution Discussion,False,211,CONTRIBUTOR,False,False,False,1.0,0.3557692308,0.6666666667,0.9447513812,0.3303069516,0.6696930484,0.0136228909,0.0001988372754
"For additional safety, if you're caching the buffers in TLS during the JVMTI thread start event, you could also cache the JNIEnv and avoid the call entirely in the signal handler (this would work on all VMs).",Solution Discussion,False,208,CONTRIBUTOR,False,False,False,1.0,0.3557692308,1.0,0.9502762431,0.3303069516,0.6696930484,0.0136228909,0.0001988372754
From the hotspot code (see my previous link) it appears that hotspot too requires that the JNIEnv is that of the interrupted thread.,Solution Discussion,False,132,NONE,True,False,False,1.0,0.2211538462,1.0,0.955801105,0.3304325312,0.6695674688,0.0001988372754,0.0001858086996
"Which makes the parameter rather pointless, but I am updating the call to check it and return failure.",Solution Discussion,False,102,CONTRIBUTOR,False,False,False,1.0,0.1730769231,0.5,0.9613259669,0.3305498824,0.6694501176,0.0001858086996,5.71e-05
All changes should be committed later today.,Task Progress,False,44,CONTRIBUTOR,False,False,False,0.3888888889,0.06730769231,1.0,0.9668508287,0.3305498824,0.6694501176,0.0001858086996,5.71e-05
https://github.com/eclipse-openj9/openj9/pull/14308,Solution Discussion,False,51,CONTRIBUTOR,False,False,False,1.0,0.009615384615,1.0,0.9723756906,0.3305859537,0.6694140463,5.71e-05,0.05952597194
"All of the OpenJ9 issues have been resolved, so closing.",Action on Issue,False,56,CONTRIBUTOR,False,False,False,1.0,0.09615384615,1.0,0.9779005525,0.3681807681,0.6318192319,0.05952597194,1.0
@urisimchoni Where did you make the TLS buffer change?,Solution Discussion,False,54,CONTRIBUTOR,False,False,False,0.375,0.08653846154,0.5,0.9834254144,0.9997507065,0.0002492935368,1.0,0.0003947203969
"We're seeing a similar issue with what looks to be async profiler, so I'm wondering if the fix made it into the main repo.",Solution Discussion,False,122,CONTRIBUTOR,False,False,False,1.0,0.2307692308,1.0,0.9889502762,0.9997507065,0.0002492935368,1.0,0.0003947203969
"No, we kind of dropped the ball on this one, we're avoiding AGCT when using OpenJ9.",Solution Discussion,False,83,NONE,True,False,True,1.0,0.1538461538,0.5,0.9944751381,1.0,0.0,0.0003947203969,0.0
It's really a small change that we should implement!,Solution Discussion,False,52,NONE,True,False,True,0.5625,0.08653846154,1.0,1.0,1.0,0.0,0.0003947203969,0.0
Shared cache hints for GC heap size,Motivation,False,35,CONTRIBUTOR,True,True,False,0.1891891892,0.04794520548,0.1428571429,0.005586592179,0.0,1.0,0.0,5.94e-06
"Remembering the previous heap size settings (-Xmn, -Xmo) after startup can provide a significant startup benefit in subsequent runs, and can improve footprint as well.",Motivation,False,167,CONTRIBUTOR,True,True,False,0.6756756757,0.1712328767,0.2857142857,0.01117318436,0.0,1.0,0.0,5.94e-06
The GC data can be stored in the shared cache as a hint.,Motivation,False,56,CONTRIBUTOR,True,True,False,0.3513513514,0.08904109589,0.4285714286,0.01675977654,0.0,1.0,0.0,5.94e-06
"https://unbscholar.lib.unb.ca/islandora/object/unbscholar%3A8100/datastream/PDF/view
https://ieeexplore.ieee.org/document/8121911

Since a shared cache can be used to run more than one application, which may have different heap requirements, the hint should be associated with an application, or at least a main class.",Motivation,False,321,CONTRIBUTOR,True,True,False,1.0,0.2534246575,0.5714285714,0.02234636872,0.0,1.0,0.0,5.94e-06
"As by design the GC is initialized before the shared cache, new GC APIs will be needed to adjust the GC heap parameters after initialization.",Motivation,False,141,CONTRIBUTOR,True,True,False,0.6756756757,0.1712328767,0.7142857143,0.02793296089,0.0,1.0,0.0,5.94e-06
"Since the heap parameters can be adjusted before any objects are created, it can happen with very low cost.",Motivation,False,107,CONTRIBUTOR,True,True,False,0.5135135135,0.1301369863,0.8571428571,0.03351955307,0.0,1.0,0.0,5.94e-06
@vijaysun-omr @mpirvu @amicic @hangshao0 fyi,Contribution and Commitment,False,44,CONTRIBUTOR,True,False,False,1.0,0.04109589041,1.0,0.04469273743,1.97e-06,0.9999980348,5.94e-06,0.02810021129
I guess we are doing this only on gencon ?,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,1.0,0.06164383562,1.0,0.05027932961,0.009306587797,0.9906934122,0.02810021129,0.0003297943533
Maybe balanced GC too ?,Solution Discussion,False,23,CONTRIBUTOR,False,False,False,0.09523809524,0.02739726027,0.5,0.05586592179,0.00941579025,0.9905842098,0.0003297943533,0.00113422951
We have'nt done any experimenting with balanced GC to say if/how much it helps but I'd like to think that we need to stop treating balanced as a second class citizen if it's not a huge amount of extra work.,Solution Discussion,False,206,CONTRIBUTOR,False,False,False,1.0,0.2876712329,1.0,0.06145251397,0.00941579025,0.9905842098,0.0003297943533,0.00113422951
"Do we have -Xmn, -Xmo on balanced GC ?",Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,1.0,0.05479452055,0.5,0.06703910615,0.009791359579,0.9902086404,0.00113422951,0.0003485618336
"@amicic 
https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/openj9/xmn/index.html
https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/openj9/xmo/index.html",Social Conversation,False,168,CONTRIBUTOR,False,False,False,0.625,0.03424657534,1.0,0.07262569832,0.009791359579,0.9902086404,0.00113422951,0.0003485618336
"CODE
CODE",Observed Bug Behaviour,True,10,CONTRIBUTOR,True,False,False,1.0,0.02054794521,1.0,0.0782122905,0.009906776373,0.9900932236,0.0003485618336,0.0002712462313
-Xmn is relevant in Balanced as much as in Gencon (although they have a bit differen meaning: total Nursery for Gencon which is both Allocate and Survivor vs only Allocate (actually called Eden) in Balanced).,Solution Discussion,False,208,CONTRIBUTOR,False,False,False,0.2397260274,0.2397260274,0.1666666667,0.08379888268,0.009996592204,0.9900034078,0.0002712462313,0.0008466218856
"Bottom line, we should treat them same (we should set Xmns based on recommendation stored in SC)",Solution Discussion,False,96,CONTRIBUTOR,False,False,False,0.1164383562,0.1164383562,0.3333333333,0.08938547486,0.009996592204,0.9900034078,0.0002712462313,0.0008466218856
"I thought that -Xmo had no semantical meaning in Balanced, but we do seem to obey the command and do something about it.",Solution Discussion,False,120,CONTRIBUTOR,False,False,False,0.1575342466,0.1575342466,0.5,0.09497206704,0.009996592204,0.9900034078,0.0002712462313,0.0008466218856
I just did a quick test and what I can tell is that effectively ends up affecting the total heap sizing (pretty much acting as Xmx/Xms commands).,Solution Discussion,False,145,CONTRIBUTOR,False,False,False,0.1917808219,0.1917808219,0.6666666667,0.1005586592,0.009996592204,0.9900034078,0.0002712462313,0.0008466218856
"See for example this:

./java -verbose:gc,sizes -Xmx64M  -Xmos32M  -Xgcpolicy:gencon

  -Xmns10880K     initial new space size
  -Xmnx16M        maximum new space size
  -Xms43648K      initial memory size
  -Xmos32M        initial old space size
  -Xmox54656K     maximum old space size       
  -Xmx64M         memory maximum

vs 

./java -verbose:gc,sizes -Xmx64M  -Xmos32M  -Xgcpolicy:balanced

  -Xmns16M        initial new space size
  -Xmnx16M        maximum new space size
  -Xms32M         initial memory size
  -Xmos32M        initial old space size
  -Xmox64M        maximum old space size
  -Xmx64M         memory maximum

While, having different meaning for Gencon and Balanced (old space vs all space), I think it would still be ok to use it.",Solution Discussion,False,778,CONTRIBUTOR,False,False,False,1.0,1.0,0.8333333333,0.1061452514,0.009996592204,0.9900034078,0.0002712462313,0.0008466218856
"In short, -Xmns and Xmos could be used for both GC policies to uniquely determine initial total heap  and division between Nursery/Eden vs the rest of the heap.",Solution Discussion,False,160,CONTRIBUTOR,False,False,False,0.2054794521,0.2054794521,1.0,0.1117318436,0.009996592204,0.9900034078,0.0002712462313,0.0008466218856
However options should be applied wisely because it might depend on GC policy they were taken.,Solution Discussion,False,94,CONTRIBUTOR,False,False,False,1.0,0.1095890411,0.5,0.1173184358,0.01027692807,0.9897230719,0.0008466218856,0.0001215876069
Should stored values be accompanied by GC policy or we can make them invariant?,Solution Discussion,False,79,CONTRIBUTOR,False,False,False,0.875,0.09589041096,1.0,0.1229050279,0.01027692807,0.9897230719,0.0008466218856,0.0001215876069
"Yes, we'll have to work out all the relevant environment options that need to match.",Solution Discussion,False,84,CONTRIBUTOR,True,False,False,1.0,0.102739726,0.3333333333,0.1284916201,0.01031718851,0.9896828115,0.0001215876069,0.003457386912
Or we could store the entire command line.,Solution Discussion,False,42,CONTRIBUTOR,True,False,False,0.5333333333,0.05479452055,0.6666666667,0.1340782123,0.01031718851,0.9896828115,0.0001215876069,0.003457386912
"- application (main class name)
- gc policy
- Xmx",Solution Discussion,False,51,CONTRIBUTOR,True,False,False,0.6,0.06164383562,1.0,0.1396648045,0.01031718851,0.9896828115,0.0001215876069,0.003457386912
I think there are other values that would be interesting to store from run to run.,Solution Discussion,False,82,MEMBER,False,False,False,1.0,0.1095890411,1.0,0.1508379888,0.01146200838,0.9885379916,0.003457386912,0.006230161811
"Another point to consider: Most of the information stored in SCC is read only, one notable exception being the JIT hints.",Solution Discussion,False,121,CONTRIBUTOR,False,False,False,1.0,0.1438356164,0.5,0.156424581,0.01352495743,0.9864750426,0.006230161811,0.0005232437649
For most flexibility it would be best to allow RW access to these GC hints.,Solution Discussion,False,75,CONTRIBUTOR,False,False,False,0.7142857143,0.102739726,1.0,0.1620111732,0.01352495743,0.9864750426,0.006230161811,0.0005232437649
We can store the main class name and GC policy.,Solution Discussion,False,47,CONTRIBUTOR,False,False,False,0.7142857143,0.06849315068,0.3333333333,0.1675977654,0.01369821541,0.9863017846,0.0005232437649,0.0003613942987
"If we want to store Xmx, we might want to store Xms as well.",Solution Discussion,False,60,CONTRIBUTOR,False,False,False,1.0,0.09589041096,0.6666666667,0.1731843575,0.01369821541,0.9863017846,0.0005232437649,0.0003613942987
There could be so many combinations of Xmx and Xms.,Solution Discussion,False,51,CONTRIBUTOR,False,False,False,0.7142857143,0.06849315068,1.0,0.1787709497,0.01369821541,0.9863017846,0.0005232437649,0.0003613942987
Probably we should turn this feature off if user specified any of -Xmns/-Xmnx/-Xmn/-Xmos/-Xmox/-Xmo/-Xms/-Xmx.,Solution Discussion,False,110,CONTRIBUTOR,False,False,False,1.0,0.08904109589,0.5,0.1843575419,0.01381788133,0.9861821187,0.0003613942987,0.001770078156
"I guess -Xmoi, -Xmine, -Xmaxe also matter here ?",Solution Discussion,False,48,CONTRIBUTOR,False,False,False,0.6153846154,0.05479452055,1.0,0.1899441341,0.01381788133,0.9861821187,0.0003613942987,0.001770078156
The suggestion to store -Xmx was for the purpose of validating the hint.,Solution Discussion,False,72,CONTRIBUTOR,True,False,False,0.5,0.08904109589,0.1818181818,0.2011173184,0.01440399469,0.9855960053,0.001770078156,0.04266521959
i.e. a different -Xmx invalidates the hint.,Solution Discussion,False,43,CONTRIBUTOR,True,False,False,0.2692307692,0.04794520548,0.2727272727,0.2067039106,0.01440399469,0.9855960053,0.001770078156,0.04266521959
"However, I'm leaning towards storing the entire command line.",Solution Discussion,False,61,CONTRIBUTOR,True,False,False,0.3461538462,0.06164383562,0.3636363636,0.2122905028,0.01440399469,0.9855960053,0.001770078156,0.04266521959
"As long as the command line remains the same, the gc sizing hints for that command line remain valid.",Solution Discussion,False,101,CONTRIBUTOR,True,False,False,0.7307692308,0.1301369863,0.4545454545,0.217877095,0.01440399469,0.9855960053,0.001770078156,0.04266521959
There can be different hints stored for different command lines.,Solution Discussion,False,64,CONTRIBUTOR,True,False,False,0.3846153846,0.06849315068,0.5454545455,0.2234636872,0.01440399469,0.9855960053,0.001770078156,0.04266521959
I think storing the entire command line should be the first approach.,Solution Discussion,False,69,CONTRIBUTOR,True,False,False,0.4615384615,0.08219178082,0.6363636364,0.2290502793,0.01440399469,0.9855960053,0.001770078156,0.04266521959
"Afterwards we could consider filtering out specific command line options as not being relevant to the GC hints, but not sure this is a necessary feature.",Solution Discussion,False,153,CONTRIBUTOR,True,False,False,1.0,0.1780821918,0.7272727273,0.2346368715,0.01440399469,0.9855960053,0.001770078156,0.04266521959
During production I expect the command lines don't change.,Solution Discussion,False,58,CONTRIBUTOR,True,False,False,0.3461538462,0.06164383562,0.8181818182,0.2402234637,0.01440399469,0.9855960053,0.001770078156,0.04266521959
"Probably we should turn this feature off if user specified any of -Xmns/-Xmnx/-Xmn/-Xmos/-Xmox/-Xmo

Agreed.",Solution Discussion,False,110,CONTRIBUTOR,True,False,False,0.5769230769,0.102739726,0.9090909091,0.2458100559,0.01440399469,0.9855960053,0.001770078156,0.04266521959
If the values are set explicitly then they shouldn't be overridden.,Solution Discussion,False,67,CONTRIBUTOR,True,False,False,0.4230769231,0.07534246575,1.0,0.251396648,0.01440399469,0.9855960053,0.001770078156,0.04266521959
"Here is an example of the entire command line options if I run a simple app: 
CODE

There are so many default options prepended/appended, which are not related to this feature at all.",Solution Discussion,True,186,CONTRIBUTOR,False,False,False,1.0,0.2465753425,0.25,0.2569832402,0.0285314246,0.9714685754,0.04266521959,0.0006509267927
"The old space and new space sizes are only two numbers, but the entire CML is such a long string.",Solution Discussion,False,97,CONTRIBUTOR,False,False,False,0.5555555556,0.1369863014,0.5,0.2625698324,0.0285314246,0.9714685754,0.04266521959,0.0006509267927
"I guess it is not worth storing the whole CML,  Also there is an option -Dsun.java.launcher.pid, which will be different from run to run.",Solution Discussion,False,137,CONTRIBUTOR,False,False,False,0.6944444444,0.1712328767,0.75,0.2681564246,0.0285314246,0.9714685754,0.04266521959,0.0006509267927
"If GC is going to check for the presence of -Xmns/-Xmnx/-Xmn/-Xmos/-Xmox/-Xmo/-Xmx/-Xms/... and gc policy to decide whether to turn off this feature, storing the main class probably should be sufficient.",Solution Discussion,False,203,CONTRIBUTOR,False,False,False,0.8333333333,0.2054794521,1.0,0.2737430168,0.0285314246,0.9714685754,0.04266521959,0.0006509267927
"Just the main class isn't sufficient, other parameters such as -Xmx, -Xms and gcpolicy need to be stored as well.",Solution Discussion,False,113,CONTRIBUTOR,True,False,False,0.487804878,0.1369863014,0.25,0.2793296089,0.02874696135,0.9712530387,0.0006509267927,0.009905059007
If they change then the hint is invalidated.,Solution Discussion,False,44,CONTRIBUTOR,True,False,False,0.1951219512,0.05479452055,0.5,0.2849162011,0.02874696135,0.9712530387,0.0006509267927,0.009905059007
We can try to find a balance between parameters that matter and parameters that don't.,Solution Discussion,False,86,CONTRIBUTOR,True,False,False,0.3658536585,0.102739726,0.75,0.2905027933,0.02874696135,0.9712530387,0.0006509267927,0.009905059007
"We can filter all the default options out of the parameter list and maybe some other specific parameters as well, but in general I think if options are modified then the behavior of the app can change and invalidate the hint.",Solution Discussion,False,225,CONTRIBUTOR,True,False,False,1.0,0.2808219178,1.0,0.2960893855,0.02874696135,0.9712530387,0.0006509267927,0.009905059007
"I will save the new/old space sizes as well as the following info:
main module/main class  (sun.java.command)
-Xgc and -Xgcpolicy
-Xmx
-Xms
-Xsoftmx
-Xmoi
java.class.path
jdk.module.path

Do you see any GC options that are missing here ?",Solution Discussion,False,247,CONTRIBUTOR,False,False,False,1.0,0.3287671233,0.5,0.3016759777,0.0320267529,0.9679732471,0.009905059007,0.0001774088301
@amicic @dmitripivkine,Contribution and Commitment,False,22,CONTRIBUTOR,False,False,False,0.04166666667,0.01369863014,1.0,0.3072625698,0.0320267529,0.9679732471,0.009905059007,0.0001774088301
"As @pshipton suggested, I would not even try to recognize various -Xm? options (or any other option).",Solution Discussion,False,101,CONTRIBUTOR,False,False,False,0.3777777778,0.1164383562,0.125,0.312849162,0.03208549702,0.967914503,0.0001774088301,4.2e-05
"If anything in options changed, the hints would be invalidated.",Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.2222222222,0.06849315068,0.25,0.3184357542,0.03208549702,0.967914503,0.0001774088301,4.2e-05
"It would be, in general, complicated to try to interpret -Xm?",Solution Discussion,False,61,CONTRIBUTOR,False,False,False,0.2444444444,0.07534246575,0.375,0.3240223464,0.03208549702,0.967914503,0.0001774088301,4.2e-05
"options to validate that they effectively mean the same initial/total heap sizing, even though the option themselves are different.",Solution Discussion,False,131,CONTRIBUTOR,False,False,False,0.4444444444,0.1369863014,0.5,0.3296089385,0.03208549702,0.967914503,0.0001774088301,4.2e-05
"For example, these two things are effectively same:
1) -Xmx4G -Xms4G
2) -Xmx4G -Xms4G -Xmn1G
but I would still invalidate the hints.",Solution Discussion,False,135,CONTRIBUTOR,False,False,False,0.6666666667,0.2054794521,0.625,0.3351955307,0.03208549702,0.967914503,0.0001774088301,4.2e-05
The hints for initial heap sizing would come from internal API and have no relationship with the options.,Solution Discussion,False,105,CONTRIBUTOR,False,False,False,0.4,0.1232876712,0.75,0.3407821229,0.03208549702,0.967914503,0.0001774088301,4.2e-05
"We are yet to agree what API is to be used, but effectively we need two:
- get/set total initial heap size (what normally is controlled by -Xms option)
- get/set Nursery/Eden initial heap size (what normally is controlled by -Xmns option).",Solution Discussion,False,241,CONTRIBUTOR,False,False,False,1.0,0.3082191781,0.875,0.3463687151,0.03208549702,0.967914503,0.0001774088301,4.2e-05
"On the first run those would be default ones (8M/2M respectively for total/Nursery), but on subsequent, they would be higher values, as suggested by SC hints.",Solution Discussion,False,158,CONTRIBUTOR,False,False,False,0.6222222222,0.1917808219,1.0,0.3519553073,0.03208549702,0.967914503,0.0001774088301,4.2e-05
I believe we need keep GC policy as well,Solution Discussion,False,40,CONTRIBUTOR,False,False,False,1.0,0.06164383562,1.0,0.3575418994,0.0320994129,0.9679005871,4.2e-05,3.75e-05
+1 this to approach.,Social Conversation,False,20,MEMBER,False,False,False,0.3076923077,0.02739726027,0.5,0.3631284916,0.03211184158,0.9678881584,3.75e-05,1.07e-05
"For the initial implementation, we should just validate the commandline is the same.",Solution Discussion,False,84,MEMBER,False,False,False,1.0,0.08904109589,1.0,0.3687150838,0.03211184158,0.9678881584,3.75e-05,1.07e-05
"Yes, I should say -Xgc and -Xgcpolicy",Solution Discussion,False,37,CONTRIBUTOR,False,False,False,1.0,0.04794520548,1.0,0.374301676,0.03211540022,0.9678845998,1.07e-05,2.02e-05
OK.,Social Conversation,False,3,CONTRIBUTOR,False,False,False,0.1,0.006849315068,0.5,0.3798882682,0.03212209259,0.9678779074,2.02e-05,0.2238931518
Then I am going the save the entire command line.,Solution Discussion,False,49,CONTRIBUTOR,False,False,False,1.0,0.06849315068,1.0,0.3854748603,0.03212209259,0.9678779074,2.02e-05,0.2238931518
@hangshao0 Any update on this?,Task Progress,False,30,MEMBER,False,False,False,0.4166666667,0.03424657534,0.5,0.3910614525,0.1062582353,0.8937417647,0.2238931518,0.0001989032092
We're getting close to the reality check date for the CODE milestone,Social Conversation,True,68,MEMBER,False,False,False,1.0,0.08219178082,1.0,0.3966480447,0.1062582353,0.8937417647,0.2238931518,0.0001989032092
"Any update on this?

Still writing the code.",Task Progress,False,46,CONTRIBUTOR,False,False,False,0.5,0.06164383562,0.25,0.4022346369,0.1063240967,0.8936759033,0.0001989032092,7.84e-05
I guess it might take me 1 - 2 more days for the first set of VM code change.,Task Progress,False,77,CONTRIBUTOR,False,False,False,1.0,0.1232876712,0.5,0.4078212291,0.1063240967,0.8936759033,0.0001989032092,7.84e-05
"Once it is reviewed and merged, GC needs to change their code.",Solution Discussion,False,62,CONTRIBUTOR,False,False,False,0.6666666667,0.08219178082,0.75,0.4134078212,0.1063240967,0.8936759033,0.0001989032092,7.84e-05
Then VM can start storing the GC hints and enable this feature.,Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.6666666667,0.08219178082,1.0,0.4189944134,0.1063240967,0.8936759033,0.0001989032092,7.84e-05
I think we need some new tests as well.,Solution Discussion,False,39,CONTRIBUTOR,False,False,False,1.0,0.06164383562,1.0,0.4245810056,0.1063500695,0.8936499305,7.84e-05,0.08347165661
Note the shared cache part of this #3908 is merged,Action on Issue,False,50,CONTRIBUTOR,True,False,False,1.0,0.06849315068,1.0,0.4301675978,0.1339894439,0.8660105561,0.08347165661,0.2112765929
GC changes are in #4168,Solution Discussion,False,23,MEMBER,False,False,False,1.0,0.03424657534,1.0,0.4357541899,0.2039479555,0.7960520445,0.2112765929,0.1022989682
The feature isn't enabled by default,Social Conversation,False,36,CONTRIBUTOR,True,False,False,0.2,0.04109589041,0.5,0.4413407821,0.2378214833,0.7621785167,0.1022989682,0.0004722347161
"so I think we should keep this issue open, however the work is completed for the 0.12 release, in particular since the shared cache is no longer enabled by default.",Action on Issue,False,164,CONTRIBUTOR,True,False,False,1.0,0.2054794521,1.0,0.4469273743,0.2378214833,0.7621785167,0.1022989682,0.0004722347161
What is the option to enable this feature with a v0.12 OpenJ9 build ?,Social Conversation,False,69,CONTRIBUTOR,False,False,False,1.0,0.08904109589,0.5,0.4525139665,0.237977851,0.762022149,0.0004722347161,0.0001666616406
We would like to try it on some tests to see the behaviour.,Testing,False,59,CONTRIBUTOR,False,False,False,1.0,0.08904109589,1.0,0.4581005587,0.237977851,0.762022149,0.0004722347161,0.0001666616406
"@vijaysun-omr see #4168 for details
CODE
CODE
You also need to enable shared classes, either normally or via CODE",Solution Discussion,True,116,CONTRIBUTOR,True,False,False,1.0,0.1575342466,1.0,0.4636871508,0.2380330365,0.7619669635,0.0001666616406,0.0005830751334
"@vijaysun-omr In short, just add -XXgc:heapSizeStatupHintWeightNewValue=80.",Solution Discussion,False,75,CONTRIBUTOR,False,False,False,0.1052631579,0.05479452055,0.1111111111,0.469273743,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"Longer story: 
1) the option is to be renamed soon  URL 
2) we'll likely introduce another option that will be documented just to enable/disable the feature
3) Balanced GC is not covered yet
4) we need to check/test if there is a race at startup between expand-due-to-hints vs first GC, and  potentially take some remedies
5) we continuously update the hints on every restart.",Solution Discussion,False,381,CONTRIBUTOR,False,False,False,1.0,0.5205479452,0.2222222222,0.4748603352,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"Hint values typically continue growing, and it may take a few updates to converge to a stable value (this is what we need feedback for)
6) updates acquire a global SC lock and there might be contention in case of high number of VMs being started at about the same time.",Solution Discussion,False,270,CONTRIBUTOR,False,False,False,0.6842105263,0.3561643836,0.3333333333,0.4804469274,0.238226106,0.761773894,0.0005830751334,0.0001494982185
If there are real life problems we may limit the number of updates or remove them altogether (just create the hint on first start and never update).,Solution Discussion,False,148,CONTRIBUTOR,False,False,False,0.3552631579,0.1849315068,0.4444444444,0.4860335196,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"7) in generational configuration, Tenure and Nursery hints are independently maintained.",Solution Discussion,False,88,CONTRIBUTOR,False,False,False,0.1447368421,0.07534246575,0.5555555556,0.4916201117,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"There is sort of an anomaly that Nursery hint is aggressively growing (on restarts), while Tenure hint grows on first restart buy may continue to decline on subsequent ones.",Solution Discussion,False,173,CONTRIBUTOR,False,False,False,0.3815789474,0.198630137,0.6666666667,0.4972067039,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"This is because with large Nursery all early created object end up staying for long time there, making first few Scavenges expensive and wanting to expand even more.",Solution Discussion,False,165,CONTRIBUTOR,False,False,False,0.3684210526,0.1917808219,0.7777777778,0.5027932961,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"On the other side, it takes longer time before we start Tenuring and there is less need to expand Tenure.",Solution Discussion,False,105,CONTRIBUTOR,False,False,False,0.2631578947,0.1369863014,0.8888888889,0.5083798883,0.238226106,0.761773894,0.0005830751334,0.0001494982185
"Perhaps this could be compensated with decreasing Tenure age threshold with larger Nursery (initial threshold is always 10, no matter what heap size is), but is sort of a independent issue to investigate.",Solution Discussion,False,204,CONTRIBUTOR,False,False,False,0.4342105263,0.2260273973,1.0,0.5139664804,0.238226106,0.761773894,0.0005830751334,0.0001494982185
Note also that command line option must fully match for hints to be taken into account.,Solution Discussion,False,87,CONTRIBUTOR,False,False,False,0.5,0.1095890411,0.1428571429,0.5195530726,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
It also includes implicit options induced by JCL.,Solution Discussion,False,49,CONTRIBUTOR,False,False,False,0.25,0.05479452055,0.2857142857,0.5251396648,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
"It's been observed that order of these options may change (probably due to some startup race), which would silently ignore the existing hint and would update them with completely fresh values.",Solution Discussion,False,192,CONTRIBUTOR,False,False,False,0.96875,0.2123287671,0.4285714286,0.530726257,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
Then it will take again a few more restarts for them to converge (assuming the order of options stay same).,Solution Discussion,False,107,CONTRIBUTOR,False,False,False,0.625,0.1369863014,0.5714285714,0.5363128492,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
"With multiple VM starting at the same time, values will not converge.",Solution Discussion,False,69,CONTRIBUTOR,False,False,False,0.375,0.08219178082,0.7142857143,0.5418994413,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
It must be a VM run that will read values (and expand on them) after the previous run updated the values for the process of converging to make progress.,Solution Discussion,False,152,CONTRIBUTOR,False,False,False,0.90625,0.198630137,0.8571428571,0.5474860335,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
"For simultaneous VM starts, all of them read the same value, and all of them will update with their new value, but effectively only the slowest/last one that updated will 'win'.",Solution Discussion,False,177,CONTRIBUTOR,False,False,False,1.0,0.2191780822,1.0,0.5530726257,0.2382756083,0.7617243917,0.0001494982185,0.04295972467
"If we are having -XX options, presumably this requires documentation?",Solution Discussion,False,69,CONTRIBUTOR,False,False,False,1.0,0.06849315068,0.5,0.5586592179,0.2525005556,0.7474994444,0.04295972467,0.002218893623
"If so, please add the doc:externals label.",Action on Issue,False,42,CONTRIBUTOR,False,False,False,0.8,0.05479452055,1.0,0.5642458101,0.2525005556,0.7474994444,0.04295972467,0.002218893623
Take a simple scenario of master and slave JVM.,Solution Discussion,False,47,CONTRIBUTOR,False,False,False,0.1384615385,0.06164383562,0.3333333333,0.5754189944,0.253235282,0.746764718,0.002218893623,0.000737706338
"They will certainly have different command line options, and even though there might be single anonymous shared cache, then while starting slave (after starting master)  the hints will not be used.",Solution Discussion,False,197,CONTRIBUTOR,False,False,False,0.4923076923,0.2191780822,0.5,0.5810055866,0.253235282,0.746764718,0.002218893623,0.000737706338
"If both master and slave are restated at some point later (and brought up in same order - master first and slave second), again, no hints will be used at any of the restarts.",Solution Discussion,False,174,CONTRIBUTOR,False,False,False,0.5076923077,0.2260273973,0.6666666667,0.5865921788,0.253235282,0.746764718,0.002218893623,0.000737706338
"If only one of them is being restarted (more likely slave), hints will be used, but this is not very realistic scenario.",Solution Discussion,False,120,CONTRIBUTOR,False,False,False,0.3384615385,0.1506849315,0.8333333333,0.5921787709,0.253235282,0.746764718,0.002218893623,0.000737706338
"Simple solutions are:
- to create separate caches for master and slave (which may make sense for some other reasons, too)
- to disable the hints updating on JVMs that would not benefit very much from them (this would be the same public option mentioned a few comments before), so that only one of them (more likely slave in this scenario) is updating/consuming them.",Solution Discussion,False,368,CONTRIBUTOR,False,False,False,1.0,0.4452054795,1.0,0.5977653631,0.253235282,0.746764718,0.002218893623,0.000737706338
I don't understand the following statement.,Social Conversation,False,43,CONTRIBUTOR,True,False,False,0.1428571429,0.04109589041,0.5,0.6033519553,0.2534795534,0.7465204466,0.000737706338,6.29e-05
"Why aren't hints saved and used on restart?

> If both master and slave are restated at some point later (and brought up in same order - master first and slave second), again, no hints will be used at any of the restarts.",Solution Discussion,False,223,CONTRIBUTOR,True,False,False,1.0,0.2876712329,1.0,0.6089385475,0.2534795534,0.7465204466,0.000737706338,6.29e-05
"Hints are saved always, but not used because of command line mismatch.",Solution Discussion,False,70,CONTRIBUTOR,False,False,False,0.2790697674,0.08219178082,0.3333333333,0.6145251397,0.2535003741,0.7464996259,6.29e-05,8.28e-05
"When master and slave are started in  this order, and slave is the last one that saved the hint and then both are restarted in the same order, then master will try to read the hints that slave saved and ignore them.",Solution Discussion,False,215,CONTRIBUTOR,False,False,False,1.0,0.2945205479,0.6666666667,0.6201117318,0.2535003741,0.7464996259,6.29e-05,8.28e-05
"Then shortly after when slave also is brought up it may not be able to read them, if master just updated them.",Solution Discussion,False,110,CONTRIBUTOR,False,False,False,0.511627907,0.1506849315,1.0,0.625698324,0.2535003741,0.7464996259,6.29e-05,8.28e-05
This isn't (or shouldn't be) the way it works.,Solution Discussion,False,46,CONTRIBUTOR,True,False,False,0.6,0.06164383562,0.3333333333,0.6312849162,0.253527781,0.746472219,8.28e-05,0.0003822470545
"Every different set of command lines has it's own hints, which can be used independently.",Solution Discussion,False,89,CONTRIBUTOR,True,False,False,1.0,0.102739726,0.6666666667,0.6368715084,0.253527781,0.746472219,8.28e-05,0.0003822470545
"i.e. master will use the hints for the master command line, and similarly the slave.",Solution Discussion,False,84,CONTRIBUTOR,True,False,False,1.0,0.102739726,1.0,0.6424581006,0.253527781,0.746472219,8.28e-05,0.0003822470545
"Agreed, it would be very nice to have that capability, but I don't think that's in place, is it?",Social Conversation,False,96,CONTRIBUTOR,False,False,False,1.0,0.1301369863,1.0,0.6480446927,0.2536543517,0.7463456483,0.0003822470545,0.002648299987
It should already work that way.,Solution Discussion,False,32,CONTRIBUTOR,True,False,False,1.0,0.04109589041,0.5,0.6536312849,0.2545312644,0.7454687356,0.002648299987,0.0009966013216
Unless you have seen different behavior?,Solution Discussion,False,40,CONTRIBUTOR,True,False,False,1.0,0.04109589041,1.0,0.6592178771,0.2545312644,0.7454687356,0.002648299987,0.0009966013216
On closer inspection it does seem to work.,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,1.0,0.05479452055,0.5,0.6648044693,0.2548612619,0.7451387381,0.0009966013216,0.02486675089
I apologize  for the confusion.,Social Conversation,False,31,CONTRIBUTOR,False,False,False,0.75,0.04109589041,1.0,0.6703910615,0.2548612619,0.7451387381,0.0009966013216,0.02486675089
Is there some limit on the number of different command lines that we can store GC hints for in a given SCC ?,Solution Discussion,False,108,CONTRIBUTOR,False,False,False,1.0,0.1506849315,0.5,0.6759776536,0.2630952118,0.7369047882,0.02486675089,0.0001740403081
fyi @mpirvu because we were discussing this today.,Contribution and Commitment,False,50,CONTRIBUTOR,False,False,False,0.3636363636,0.05479452055,1.0,0.6815642458,0.2630952118,0.7369047882,0.02486675089,0.0001740403081
@vijaysun-omr the only limit is the size of the cache.,Solution Discussion,False,54,CONTRIBUTOR,True,False,False,0.5238095238,0.07534246575,0.3333333333,0.687150838,0.2631528405,0.7368471595,0.0001740403081,4.81e-05
"We wondered if we needed to add a limit, but not sure if it is necessary.",Solution Discussion,False,73,CONTRIBUTOR,True,False,False,0.7619047619,0.1095890411,0.6666666667,0.6927374302,0.2631528405,0.7368471595,0.0001740403081,4.81e-05
"Likely there will be something that changes the command line all the time, but otherwise there probably aren't that many variations.",Solution Discussion,False,132,CONTRIBUTOR,True,False,False,1.0,0.1438356164,1.0,0.6983240223,0.2631528405,0.7368471595,0.0001740403081,4.81e-05
"It's been observed that order of these options may change (probably due to some startup race)

@amicic what options changed?",Solution Discussion,False,126,CONTRIBUTOR,True,False,False,1.0,0.1438356164,0.5,0.7039106145,0.2631687747,0.7368312253,4.81e-05,7.11e-05
"Something to do with the VM that we can fix, or something to do with the application?",Solution Discussion,False,85,CONTRIBUTOR,True,False,False,0.8095238095,0.1164383562,1.0,0.7094972067,0.2631687747,0.7368312253,4.81e-05,7.11e-05
"@pshipton we (Marius and I) were also wondering about the same thing, i.e. potential issues with storing as many distinct paths as can be fit.",Solution Discussion,False,142,CONTRIBUTOR,False,False,False,0.7352941176,0.1712328767,0.5,0.7150837989,0.2631923042,0.7368076958,7.11e-05,0.001870010978
One case that we have seen change the path (directory where java is installed) continuously is Hadoop when the master installs workers on several machines repeatedly and uses slightly different directory names every time.,Solution Discussion,False,221,CONTRIBUTOR,False,False,False,1.0,0.2328767123,1.0,0.7206703911,0.2631923042,0.7368076958,7.11e-05,0.001870010978
In a case like that there is no benefit to storing the hints.,Solution Discussion,False,61,CONTRIBUTOR,True,False,False,0.65,0.08904109589,0.3333333333,0.7262569832,0.2638115076,0.7361884924,0.001870010978,0.005993563236
"It would be better to either disable them, or only store a subset of the command line which doesn't change.",Solution Discussion,False,107,CONTRIBUTOR,True,False,False,1.0,0.1369863014,0.6666666667,0.7318435754,0.2638115076,0.7361884924,0.001870010978,0.005993563236
Do you have an example Hadoop command line?,Solution Discussion,False,43,CONTRIBUTOR,True,False,False,0.4,0.05479452055,1.0,0.7374301676,0.2638115076,0.7361884924,0.001870010978,0.005993563236
"I didn't keep the Hadoop command line but the pattern is that the master sends the jar files through the network to the slaves, and the slaves create a temporary directory and copy the jar files there (example: CODE)",Solution Discussion,True,216,CONTRIBUTOR,False,False,False,1.0,0.2671232877,0.5,0.7430167598,0.2657961135,0.7342038865,0.005993563236,0.00238876338
Hadoop was the reason we added the CODE option.,Solution Discussion,True,47,CONTRIBUTOR,False,False,False,0.2307692308,0.06164383562,1.0,0.748603352,0.2657961135,0.7342038865,0.005993563236,0.00238876338
"For this specific case, we could store a subset of the command line when -Xshareclasses:restrictClassPaths is specified, and ignore the -cp option.",Solution Discussion,False,147,CONTRIBUTOR,True,False,False,1.0,0.1575342466,1.0,0.7541899441,0.2665870877,0.7334129123,0.00238876338,0.1747996692
@amicic we'd like to ensure this gets delivered for the 0.15 milestone.,Action on Issue,False,71,CONTRIBUTOR,True,False,False,1.0,0.08904109589,0.5,0.7653631285,0.6555901245,0.3444098755,1.0,0.7369047902
Do you have an outlook for completion?,Solution Discussion,False,38,CONTRIBUTOR,True,False,False,0.5384615385,0.04794520548,1.0,0.7709497207,0.6555901245,0.3444098755,1.0,0.7369047902
@amicic gentle ping.,Contribution and Commitment,False,20,MEMBER,False,False,False,0.4285714286,0.02054794521,0.5,0.7765363128,0.8995961528,0.1004038472,0.7369047902,0.0001470921313
Can you update this with the outlook?,Solution Discussion,False,37,MEMBER,False,False,False,1.0,0.04794520548,1.0,0.782122905,0.8995961528,0.1004038472,0.7369047902,0.0001470921313
"With some luck there is not much work left:
- make sure everything is still in order.",Solution Discussion,False,86,CONTRIBUTOR,False,False,False,0.2179487179,0.1164383562,0.25,0.7877094972,0.8996448583,0.1003551417,0.0001470921313,0.0005171483439
"I already tried it briefly a few days ago and while it seemed to work most of the time, it seemed like it would intermittently CODE hints.",Task Progress,True,138,CONTRIBUTOR,False,False,False,0.3461538462,0.1849315068,0.5,0.7932960894,0.8996448583,0.1003551417,0.0001470921313,0.0005171483439
"Need to investigate more.
- introduce a clean option to enable/disable the feature (right now I control it with an internal tuning/weight parameter which is set to 0, which effectively disables the feature).
- test race conditions between early first GC and heap expansion based on hints
- ideally, test high JVM count simultaneous startup scenario (SC lock contention or anything else) - I'm unlikely to do anything about it, since I don't have such scenario available.",Investigation and Exploration,False,473,CONTRIBUTOR,False,False,False,1.0,0.5342465753,0.75,0.7988826816,0.8996448583,0.1003551417,0.0001470921313,0.0005171483439
Balanced GC will not be covered in the first release.,Task Progress,False,53,CONTRIBUTOR,False,False,False,0.1282051282,0.06849315068,1.0,0.8044692737,0.8996448583,0.1003551417,0.0001470921313,0.0005171483439
"test high JVM count simultaneous startup scenario

This is just a matter of starting a number of JVMs at approximately the same time, such as starting up 20 JVMs running the SwingSet demo.",Solution Discussion,False,190,CONTRIBUTOR,True,False,False,1.0,0.2328767123,1.0,0.8100558659,0.899816098,0.100183902,0.0005171483439,0.1936406153
The option has been added for 0.15.  Moving to 0.16 to consider enabling by default,Action on Issue,False,83,MEMBER,False,False,False,1.0,0.1095890411,1.0,0.8156424581,0.963934934,0.03606506597,0.1936406153,0.0007577570648
"I've done some basic testing to confirm everything is order, and there are no races with first GC.",Testing,False,98,CONTRIBUTOR,False,False,False,1.0,0.1301369863,1.0,0.8212290503,0.9641858447,0.03581415527,0.0007577570648,0.0003211324394
@amicic has the concern about always writing to the cache been addressed?,Solution Discussion,False,73,CONTRIBUTOR,True,False,False,0.4,0.08219178082,0.3333333333,0.8268156425,0.964292179,0.03570782098,0.0003211324394,0.0001268809988
i.e. the GC code will only attempt to write a hint if it has calculated a different value than has already been stored to the cache?,Solution Discussion,False,132,CONTRIBUTOR,True,False,False,0.8666666667,0.1780821918,0.6666666667,0.8324022346,0.964292179,0.03570782098,0.0003211324394,0.0001268809988
"If this is addressed, I suggest we enable the feature by default just after branching for the 0.15 release, to give time to identify any problems before the next release.",Action on Issue,False,170,CONTRIBUTOR,True,False,False,1.0,0.2054794521,1.0,0.8379888268,0.964292179,0.03570782098,0.0003211324394,0.0001268809988
The hint is always updated.,Solution Discussion,False,27,CONTRIBUTOR,False,False,False,0.2272727273,0.03424657534,0.1666666667,0.843575419,0.9643341922,0.03566580778,0.0001268809988,0.01210021257
Values will almost always be different.,Solution Discussion,False,39,CONTRIBUTOR,False,False,False,0.2727272727,0.04109589041,0.3333333333,0.8491620112,0.9643341922,0.03566580778,0.0001268809988,0.01210021257
I have not done anything to test if there is a problem with excessive updates.,Task Progress,False,78,CONTRIBUTOR,False,False,False,0.6818181818,0.102739726,0.5,0.8547486034,0.9643341922,0.03566580778,0.0001268809988,0.01210021257
"We could still try to reduce it, blindly.",Solution Discussion,False,41,CONTRIBUTOR,False,False,False,0.3636363636,0.05479452055,0.6666666667,0.8603351955,0.9643341922,0.03566580778,0.0001268809988,0.01210021257
Perhaps update it if 1) it differs by some margin (>10%) or 2) with low probability (10%) even if within the margin.,Solution Discussion,False,116,CONTRIBUTOR,False,False,False,1.0,0.1506849315,0.8333333333,0.8659217877,0.9643341922,0.03566580778,0.0001268809988,0.01210021257
The latter is to ensure it's updated in very gradual run-to-run load change.,Solution Discussion,False,76,CONTRIBUTOR,False,False,False,0.6818181818,0.102739726,1.0,0.8715083799,0.9643341922,0.03566580778,0.0001268809988,0.01210021257
We shouldn't enable the feature by default until this has been resolved.,Solution Discussion,False,72,CONTRIBUTOR,True,False,False,0.48,0.08219178082,0.5,0.8770949721,0.9683408493,0.03165915068,0.01210021257,4.2e-05
"Writing to the shared cache on every startup affects starting up multiple JVMs concurrently, as each JVM will serialize on the write to the cache.",Solution Discussion,False,146,CONTRIBUTOR,True,False,False,1.0,0.1712328767,1.0,0.8826815642,0.9683408493,0.03165915068,0.01210021257,4.2e-05
"A multiJVM test... I used a fairly simple workload (single threaded, very few classes and methods).",Testing,False,99,CONTRIBUTOR,False,False,False,0.2807017544,0.1095890411,0.1111111111,0.8882681564,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"Started 50 JVMs simultaneously, on a machine with 120 threads.",Task Progress,False,62,CONTRIBUTOR,False,False,False,0.1754385965,0.06849315068,0.2222222222,0.8938547486,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
GC thread and compilation thread count reduced to 2 and 1 respectively.,Task Progress,False,71,CONTRIBUTOR,False,False,False,0.2105263158,0.08219178082,0.3333333333,0.8994413408,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"Measured average time to complete the tests as reported by Linux time command, in seconds.",Testing,False,90,CONTRIBUTOR,False,False,False,0.2631578947,0.102739726,0.4444444444,0.905027933,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"4 group of tests, with 4-6 sequential runs within each group.",Testing,False,61,CONTRIBUTOR,False,False,False,0.2105263158,0.08219178082,0.5555555556,0.9106145251,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"Before each group, SC was wiped.",Testing,False,32,CONTRIBUTOR,False,False,False,0.1052631579,0.04109589041,0.6666666667,0.9162011173,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"SC alone appears to regress completion time (since the test is so simple, there is probably no benefit of SC, but there is some cost of maintaining SC?).",Testing,False,153,CONTRIBUTOR,False,False,False,0.4912280702,0.1917808219,0.7777777778,0.9217877095,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"However, use of hints does not seem to introduce additional regression.",Testing,False,71,CONTRIBUTOR,False,False,False,0.1929824561,0.07534246575,0.8888888889,0.9273743017,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
"no SC
7.7104
7.08792
7.25356
8.0851

SC, no hints
9.23496
8.95598
9.325
8.82136

SC, use hints
7.41268
10.0347
7.37226
8.4999
8.2855
8.60048

SC, use hints, skip insignificant updates
7.53726
8.9249
9.76732
8.5943
10.1544
7.5088",Testing,False,254,CONTRIBUTOR,False,False,False,1.0,0.3904109589,1.0,0.9329608939,0.9683547652,0.0316452348,4.2e-05,0.0001153317802
Might be the same issue as https://github.com/eclipse/openj9/issues/5918.,Investigation and Exploration,False,73,CONTRIBUTOR,False,False,False,1.0,0.04794520548,0.5,0.938547486,0.9683929542,0.03160704581,0.0001153317802,2.94e-05
Using CODE can workaround this issue.,Workarounds,True,37,CONTRIBUTOR,False,False,False,0.8571428571,0.04109589041,1.0,0.9441340782,0.9683929542,0.03160704581,0.0001153317802,2.94e-05
@pshipton I understand the concern.,Social Conversation,False,35,CONTRIBUTOR,False,False,False,0.2272727273,0.03424657534,0.3333333333,0.9497206704,0.9684026741,0.03159732594,2.94e-05,0.0001713134092
"There might be a real problem, but I'm reluctant to add additional logic before observing a problem and proving the logic helps.",Solution Discussion,False,128,CONTRIBUTOR,False,False,False,1.0,0.1506849315,0.6666666667,0.9553072626,0.9684026741,0.03159732594,2.94e-05,0.0001713134092
"If you or somebody else try and succeed to create a problem with their own scenarios, I'm more than willing to investigate...",Contribution and Commitment,False,125,CONTRIBUTOR,False,False,False,1.0,0.1506849315,1.0,0.9608938547,0.9684026741,0.03159732594,2.94e-05,0.0001713134092
"@amicic based on the results in https://github.com/eclipse/openj9/issues/3743#issuecomment-503670540, I agree it seems fine as-is.",Solution Discussion,False,130,CONTRIBUTOR,True,False,False,1.0,0.09589041096,0.5,0.9664804469,0.9684593998,0.03154060015,0.0001713134092,2.18e-05
"~What platform did you test on?~ nm, I see Linux.",Investigation and Exploration,False,49,CONTRIBUTOR,True,False,False,0.7142857143,0.06849315068,1.0,0.9720670391,0.9684593998,0.03154060015,0.0001713134092,2.18e-05
@amicic do you agree to enable CODE by default next week after the branch for the 0.15 release?,Solution Discussion,True,95,CONTRIBUTOR,True,False,False,1.0,0.1232876712,1.0,0.9776536313,0.9684666234,0.03153337665,2.18e-05,0.08308572023
@amicic We've branched for CODE.,Social Conversation,True,32,MEMBER,False,False,False,1.0,0.04109589041,0.5,0.9832402235,0.9959782054,0.0040217946,0.08308572023,0.01208850295
Can enable CODE by default?,Social Conversation,True,27,MEMBER,False,False,False,0.8333333333,0.03424657534,1.0,0.9888268156,0.9959782054,0.0040217946,0.08308572023,0.01208850295
PR that enables it by default has just been merged.,Action on Issue,False,51,CONTRIBUTOR,False,False,False,1.0,0.06849315068,1.0,0.9944134078,0.9999809852,1.9e-05,0.01208850295,5.74e-05
"Since https://github.com/eclipse/omr/pull/4079 is merged, I believe this can be closed.",Action on Issue,False,87,CONTRIBUTOR,True,False,True,1.0,0.06849315068,1.0,1.0,1.0,0.0,5.74e-05,0.0
VM build failure - VMState: 0x00050080 or 0x000501ff,Investigation and Exploration,False,52,NONE,True,True,False,0.3333333333,0.1129032258,0.5,0.005464480874,0.0,1.0,0.0,0.003289514691
"Got this on https://ci.adoptopenjdk.net/view/Failing%20Builds/job/build-scripts/job/jobs/job/jdk11u/job/jdk11u-mac-x64-openj9/573 (CODE)
CODE
Access to the machine can be granted by opening an issue at https://github.com/AdoptOpenJDK/openjdk-infrastructure/issues",Action on Issue,True,265,NONE,True,True,False,1.0,0.3387096774,1.0,0.01092896175,0.0,1.0,0.0,0.003289514691
Also seen here https://github.com/eclipse/openj9/issues/9291,Bug Reproduction,False,60,CONTRIBUTOR,False,False,False,1.0,0.06451612903,1.0,0.01639344262,0.0006267905675,0.9993732094,0.003289514691,0.0009414561275
@andrewcraik @gita-omr Can someone take a look at this?,Contribution and Commitment,False,55,MEMBER,False,False,False,0.9090909091,0.1612903226,0.3333333333,0.0218579235,0.0008061774606,0.9991938225,0.0009414561275,0.0002387130853
It seems to be a newish assert failure.,Observed Bug Behaviour,False,39,MEMBER,False,False,False,0.7272727273,0.1290322581,0.6666666667,0.02732240437,0.0008061774606,0.9991938225,0.0009414561275,0.0002387130853
"This one occurred on osx, #9291 on aix ~10 days ago.",Investigation and Exploration,False,52,MEMBER,False,False,False,1.0,0.1774193548,1.0,0.03278688525,0.0008061774606,0.9991938225,0.0009414561275,0.0002387130853
@cathyzhyi might this be related to the AOT issues we have been looking at?,Investigation and Exploration,False,75,CONTRIBUTOR,False,False,False,1.0,0.2258064516,1.0,0.03825136612,0.0008516623191,0.9991483377,0.0002387130853,0.0004165850335
This failure seems very likely a CODE issue,Investigation and Exploration,True,43,CONTRIBUTOR,False,False,False,0.7272727273,0.1290322581,0.5,0.04371584699,0.0009310392468,0.9990689608,0.0004165850335,0.110942232
but we would need a backtrace to tell the root cause.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,1.0,0.1774193548,1.0,0.04918032787,0.0009310392468,0.9990689608,0.0004165850335,0.110942232
assigned to @Leonardo2718,Contribution and Commitment,False,25,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.05464480874,0.02207018927,0.9779298107,0.110942232,0.4214515802
@Leonardo2718 any update on this?,Task Progress,False,33,MEMBER,False,False,False,0.4545454545,0.08064516129,0.5,0.06010928962,0.1023743982,0.8976256018,0.4214515802,0.0006590192892
We're coming up on the v0.21.0 code split on June 7,Social Conversation,False,51,MEMBER,False,False,False,1.0,0.1774193548,1.0,0.06557377049,0.1023743982,0.8976256018,0.4214515802,0.0006590192892
"So, I wasn't able to get very far because I couldn't get the build that the assert was triggered in.",Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,0.6060606061,0.3225806452,0.3333333333,0.07103825137,0.1024999691,0.8975000309,0.0006590192892,0.003777918314
"There's really not a lot that can be done with the available information, so the best thing to do is to try to capture more information the next time this failure is seen.",Investigation and Exploration,False,171,CONTRIBUTOR,False,False,False,1.0,0.5322580645,0.6666666667,0.07650273224,0.1024999691,0.8975000309,0.0006590192892,0.003777918314
I've been trying to think of a way of improving the assert message but haven't found one yet.,Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,0.5757575758,0.3064516129,1.0,0.08196721311,0.1024999691,0.8975000309,0.0006590192892,0.003777918314
https://github.com/eclipse/openj9/issues/9291 seems very similar.,Investigation and Exploration,False,65,MEMBER,False,False,False,0.5714285714,0.06451612903,0.5,0.08743169399,0.103219821,0.896780179,0.003777918314,0.007925534914
Is that easier to reproduce to debug?,Bug Reproduction,False,37,MEMBER,False,False,False,1.0,0.1129032258,1.0,0.09289617486,0.103219821,0.896780179,0.003777918314,0.007925534914
"No, #9291 has the same problem, unfortunately.",Investigation and Exploration,False,46,CONTRIBUTOR,False,False,False,1.0,0.1129032258,1.0,0.09836065574,0.104729968,0.895270032,0.007925534914,4.8e-05
"The same problem = can't get the build?

Are you able to run the test locally or on a cloud machine to reproduce the issue?",Investigation and Exploration,False,125,MEMBER,False,False,False,0.7352941176,0.4032258065,0.5,0.1038251366,0.1047391146,0.8952608854,4.8e-05,0.0001562891595
"We have the nightly builds and debug images that can be downloaded from Adopt, especially for recent builds so reproducing this - locally or on a build farm - seems like the next step to me.",Investigation and Exploration,False,190,MEMBER,False,False,False,1.0,0.5483870968,1.0,0.1092896175,0.1047391146,0.8952608854,4.8e-05,0.0001562891595
"So, the problem is that the failure is happening _during_ the build, which makes reproducing the issue and extracting useful information very time-consuming.",Investigation and Exploration,False,157,CONTRIBUTOR,False,False,False,1.0,0.3870967742,0.3333333333,0.1147540984,0.1047688942,0.8952311058,0.0001562891595,1.0
I'm going to try requesting access to the machine at Adopt to see if I have better luck reproducing the failure.,Task Progress,False,112,CONTRIBUTOR,False,False,False,0.875,0.3387096774,0.6666666667,0.1202185792,0.1047688942,0.8952311058,0.0001562891595,1.0
"It's probably still going to take a lot of time to figure this out, though.",Social Conversation,False,75,CONTRIBUTOR,False,False,False,0.625,0.2419354839,1.0,0.1256830601,0.1047688942,0.8952311058,0.0001562891595,1.0
Any update on this @Leonardo2718?,Task Progress,False,33,MEMBER,False,False,False,0.3846153846,0.08064516129,0.5,0.131147541,0.2953108514,0.7046891486,1.0,0.0001270779714
Do you expect it to make the 0.22.0 code split on Aug 9?,Social Conversation,False,56,MEMBER,False,False,False,1.0,0.2096774194,1.0,0.1366120219,0.2953108514,0.7046891486,1.0,0.0001270779714
"@DanHeidinga 

> Any update on this @Leonardo2718?",Task Progress,False,52,CONTRIBUTOR,False,False,False,0.3684210526,0.1129032258,0.5,0.1420765027,0.2953350651,0.7046649349,0.0001270779714,5.14e-05
"Unfortunately, I haven't been able to reproduce this so there's no chance of it making the 0.22 code split.",Bug Reproduction,False,107,CONTRIBUTOR,False,False,False,1.0,0.3064516129,1.0,0.1475409836,0.2953350651,0.7046649349,0.0001270779714,5.14e-05
I've moved it to the 0.23 milestone,Action on Issue,False,35,MEMBER,False,False,False,1.0,0.1290322581,1.0,0.1530054645,0.2953448499,0.7046551501,5.14e-05,0.368564445
"From https://github.com/eclipse/openj9/issues/10313#issuecomment-682071756

> Unfortunately, it appears that core files can't be produced on MacOS (see AdoptOpenJDK/openjdk-build#1778).",Social Conversation,False,187,CONTRIBUTOR,False,False,False,1.0,0.2903225806,0.5,0.1584699454,0.3655718406,0.6344281594,0.368564445,0.0002290380421
"Without a core file, I don't really have a way of investigating this issue.",Investigation and Exploration,False,75,CONTRIBUTOR,False,False,False,0.7777777778,0.2258064516,1.0,0.1639344262,0.3655718406,0.6344281594,0.368564445,0.0002290380421
I think this has to move to the backlog until the adopt issue is fixed,Action on Issue,False,70,CONTRIBUTOR,False,False,False,1.0,0.2419354839,1.0,0.1693989071,0.3656154819,0.6343845181,0.0002290380421,0.09512000124
@M-Davies do we have any corefiles to debug as yet?,Investigation and Exploration,False,51,CONTRIBUTOR,False,False,False,0.3333333333,0.1774193548,0.5,0.174863388,0.3837398331,0.6162601669,0.09512000124,0.01216692501
If we don't have them then this will need to move to backlog until we can get diagnostic files since attempts at reproduction have not been successful to the best of my understaning.,Task Progress,False,182,CONTRIBUTOR,False,False,False,1.0,0.5322580645,1.0,0.1803278689,0.3837398331,0.6162601669,0.09512000124,0.01216692501
"It's hard to pick up diagnostic files from nightly builds at the best of times and with https://github.com/AdoptOpenJDK/openjdk-build/issues/1778, it makes it near impossible.",Task Progress,False,175,NONE,True,False,False,0.8214285714,0.3709677419,0.3333333333,0.1857923497,0.3860581428,0.6139418572,0.01216692501,0.3080636089
~I'll chase up that issue and see what the situation is and post back here once it's resolved~ Looks like it's something we'll be awaiting apple to fix.,Task Progress,False,152,NONE,True,False,False,1.0,0.4516129032,0.6666666667,0.1912568306,0.3860581428,0.6139418572,0.01216692501,0.3080636089
See the linked issue for the full problem,Social Conversation,False,41,NONE,True,False,False,0.2857142857,0.1290322581,1.0,0.1967213115,0.3860581428,0.6139418572,0.01216692501,0.3080636089
@DanHeidinga FYI this one is missing diagnostics and so cannot be progressed - should we backlog it or close it pending diagnostics?,Action on Issue,False,132,CONTRIBUTOR,False,False,False,1.0,0.3548387097,1.0,0.2021857923,0.4447571858,0.5552428142,0.3080636089,0.0002184327063
@andrewcraik Is there something we can add to the code around the assert to make the conditions leading to it easier to diagnose?,Investigation and Exploration,False,129,MEMBER,False,False,False,0.6571428571,0.3709677419,0.5,0.2076502732,0.4447988064,0.5552011936,0.0002184327063,0.2303004492
"Given we've branched for 0.23 already, I'd be OK with releasing that kind of code into the mainline - even if there's extra overhead - with the plan to pull it back out before 0.24",Action on Issue,False,180,MEMBER,False,False,False,1.0,0.564516129,1.0,0.2131147541,0.4447988064,0.5552011936,0.0002184327063,0.2303004492
So it looks like it can happen if we fail to compile-time resolve the defining class of a field.,Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.6896551724,0.3225806452,0.1428571429,0.218579235,0.4886807048,0.5113192952,0.2303004492,0.01077464908
Now when the field is resolved how that compile-time resolve could fail is a bit of a mystery.,Investigation and Exploration,False,94,CONTRIBUTOR,False,False,False,0.6551724138,0.3064516129,0.2857142857,0.2240437158,0.4886807048,0.5113192952,0.2303004492,0.01077464908
"Looking at the code though, I don't know that the fatal assert is necessary - there is a path through the code that could be crafted to avoid the problem",Investigation and Exploration,False,153,CONTRIBUTOR,False,False,False,1.0,0.4677419355,0.4285714286,0.2295081967,0.4886807048,0.5113192952,0.2303004492,0.01077464908
I _think_.,Social Conversation,False,10,CONTRIBUTOR,False,False,False,0.06896551724,0.03225806452,0.5714285714,0.2349726776,0.4886807048,0.5113192952,0.2303004492,0.01077464908
Will ponder this tonight and look again in the morning to see if there is a safe workaround.,Contribution and Commitment,False,92,CONTRIBUTOR,False,False,False,0.6206896552,0.2903225806,0.7142857143,0.2404371585,0.4886807048,0.5113192952,0.2303004492,0.01077464908
Compile time resolution is allowed to fail in general for any reason so it shouldn't be cause to kill the VM.,Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.724137931,0.3387096774,0.8571428571,0.2459016393,0.4886807048,0.5113192952,0.2303004492,0.01077464908
That being said I would expect this should be pretty rare.,Expected Behaviour,False,58,CONTRIBUTOR,False,False,False,0.3793103448,0.1774193548,1.0,0.2513661202,0.4886807048,0.5113192952,0.2303004492,0.01077464908
"Another occurrence https://ci.eclipse.org/openj9/job/Build_JDK15_x86-64_mac_Nightly/71/
there are diagnostic files including a core in https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK15_x86-64_mac_Nightly/71/Build_JDK15_x86-64_mac_Nightly-71-20201006-235858-diagnostics.tar.gz

CODE",Testing,True,321,CONTRIBUTOR,False,False,False,1.0,0.2419354839,1.0,0.2568306011,0.4907337275,0.5092662725,0.01077464908,0.01863655198
Analysis of the core has shown that we have a resolved filed defined on the class of the current method that is being compiled.,Investigation and Exploration,False,127,CONTRIBUTOR,False,False,False,0.96,0.3870967742,0.125,0.262295082,0.4942847726,0.5057152274,0.01863655198,0.01288492485
Given that we could get the flags of the field and determine its accessibility etc we should be able to get a resolved defining class.,Solution Discussion,False,134,CONTRIBUTOR,False,False,False,1.0,0.4032258065,0.25,0.2677595628,0.4942847726,0.5057152274,0.01863655198,0.01288492485
Some how the API is giving NULL.,Solution Discussion,False,32,CONTRIBUTOR,False,False,False,0.28,0.1129032258,0.375,0.2732240437,0.4942847726,0.5057152274,0.01863655198,0.01288492485
This doesn't make much sense - the answers should be consistent.,Solution Discussion,False,64,CONTRIBUTOR,False,False,False,0.4,0.1612903226,0.5,0.2786885246,0.4942847726,0.5057152274,0.01863655198,0.01288492485
"That being said, this code does need to account for the defining class to not be returned.",Solution Discussion,False,90,CONTRIBUTOR,False,False,False,0.68,0.2741935484,0.625,0.2841530055,0.4942847726,0.5057152274,0.01863655198,0.01288492485
The short term tactical fix for 0.23 ONLY will be to convert the fatal assert into a compile abort.,Solution Discussion,False,99,CONTRIBUTOR,False,False,False,0.76,0.3064516129,0.75,0.2896174863,0.4942847726,0.5057152274,0.01863655198,0.01288492485
We will then continue the investigation to find out why this is inconsistent and what the JIT can do to gracefully recover.,Task Progress,False,123,CONTRIBUTOR,False,False,False,0.88,0.3548387097,0.875,0.2950819672,0.4942847726,0.5057152274,0.01863655198,0.01288492485
FYI @pshipton - many thanks to @Leonardo2718 @liqunl and @dsouzai for their investigation and discussion.,Social Conversation,False,105,CONTRIBUTOR,False,False,False,0.56,0.2258064516,1.0,0.3005464481,0.4942847726,0.5057152274,0.01863655198,0.01288492485
#10848 provides a temporary fix for the 0.23 release.,Workarounds,False,53,CONTRIBUTOR,False,False,False,0.4736842105,0.1451612903,0.5,0.306010929,0.4967398914,0.5032601086,0.01288492485,0.6535899155
"Since we still need to figure what's really going in, this issue should pushed back to the next release.",Action on Issue,False,104,CONTRIBUTOR,False,False,False,1.0,0.3064516129,1.0,0.3114754098,0.4967398914,0.5032601086,0.01288492485,0.6535899155
"https://ci.eclipse.org/openj9/job/Build_JDK11_x86-64_mac_Nightly/558

Diagnostics https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK11_x86-64_mac_Nightly/558/Build_JDK11_x86-64_mac_Nightly-558-20201118-221726-diagnostics.tar.gz
CODE",Testing,True,269,CONTRIBUTOR,False,False,False,1.0,0.09677419355,1.0,0.3169398907,0.6212761931,0.3787238069,0.6535899155,0.02471061853
"A similar failure in https://ci.eclipse.org/openj9/job/Build_JDK15_x86-64_mac_Personal/64:
CODE",Testing,True,96,CONTRIBUTOR,False,False,False,1.0,0.1129032258,1.0,0.3224043716,0.6259846027,0.3740153973,0.02471061853,0.056196
"https://ci.eclipse.org/openj9/job/Build_JDK15_ppc64_aix_Nightly/118
CODE",Testing,True,73,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.3278688525,0.6366922985,0.3633077015,0.056196,0.00328449111
"New occurrence: https://ci.adoptopenjdk.net/view/Failing%20Builds/job/build-scripts/job/jobs/job/jdk11u/job/jdk11u-linux-ppc64le-openj9-linuxXL/413/console
CODE",Testing,True,161,CONTRIBUTOR,False,False,False,1.0,0.08064516129,1.0,0.3333333333,0.6373181319,0.3626818681,0.00328449111,0.004953063947
"https://ci.eclipse.org/openj9/job/Build_JDK11_x86-64_mac_OMR/772
CODE",Testing,True,70,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.3387978142,0.6382618984,0.3617381016,0.004953063947,0.00359446461
"Looked at all recent core dumps, all failed compilation are AOT compiles during start up, so no-SVM AOT is used.",Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,0.488372093,0.3387096774,0.1,0.3442622951,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"In all failed compiles, there are field load/store of the same class before the one that's causing the crash, and the defining class of the field is the class of outer most method, which means that validation for the class should succeed.",Solution Discussion,False,238,CONTRIBUTOR,False,False,False,1.0,0.6935483871,0.2,0.349726776,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"Looking at the code
In CODE, we call CODE in non-SVM AOT compile
https://github.com/eclipse/openj9/blob/8c76311cdcccaa6def680d362df418eca6ae9325/runtime/compiler/env/j9method.cpp#L1845

And CODE calls to CODE to get defining class
https://github.com/eclipse/openj9/blob/8c76311cdcccaa6def680d362df418eca6ae9325/runtime/compiler/env/j9method.cpp#L1715",Solution Discussion,True,355,CONTRIBUTOR,False,False,False,0.6744186047,0.4677419355,0.3,0.3551912568,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"Since CODE returned true (CODE is true), that means we were able to get defining class and validate the field.",Solution Discussion,True,110,CONTRIBUTOR,False,False,False,0.4651162791,0.3225806452,0.4,0.3606557377,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"But when we call CODE, which calls to CODE with the same parameters used by CODE, we get NULL.",Solution Discussion,True,94,CONTRIBUTOR,False,False,False,0.4418604651,0.3064516129,0.5,0.3661202186,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"Either CODE returned NULL or CODE failed
https://github.com/eclipse/openj9/blob/8c76311cdcccaa6def680d362df418eca6ae9325/runtime/compiler/env/j9method.cpp#L2022-L2040

Either way, the result is inconsistent.",Solution Discussion,True,210,CONTRIBUTOR,False,False,False,0.3720930233,0.2580645161,0.6,0.3715846995,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"We have to find out what is inconsistent, and proceed from there.",Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,0.2790697674,0.1935483871,0.7,0.3770491803,0.6389467947,0.3610532053,0.00359446461,0.01517828221
@Leonardo2718 There's not much I can find from the core dump.,Investigation and Exploration,False,61,CONTRIBUTOR,False,False,False,0.2558139535,0.1774193548,0.8,0.3825136612,0.6389467947,0.3610532053,0.00359446461,0.01517828221
"If we can't reproduce it locally, I suggest we add more information to the assert, and wait until next crash.",Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.4651162791,0.3225806452,0.9,0.3879781421,0.6389467947,0.3610532053,0.00359446461,0.01517828221
The extra information to print can be the result of CODE from CODE,Investigation and Exploration,True,66,CONTRIBUTOR,False,False,False,0.3023255814,0.2096774194,1.0,0.393442623,0.6389467947,0.3610532053,0.00359446461,0.01517828221
I'm in the process of trying to reproduce this myself.,Task Progress,False,54,CONTRIBUTOR,False,False,False,0.4347826087,0.1612903226,0.5,0.3989071038,0.6418388943,0.3581611057,0.01517828221,0.09158488929
"While that's happening, I figured we might as well try adding the extra info to the assert message, so I've opened #11279.",Investigation and Exploration,False,122,CONTRIBUTOR,False,False,False,1.0,0.3709677419,1.0,0.4043715847,0.6418388943,0.3581611057,0.01517828221,0.09158488929
"See https://github.com/eclipse/openj9/issues/11313
CODE
https://ci.adoptopenjdk.net/view/Failing%20Builds/job/build-scripts/job/jobs/job/jdk11u/job/jdk11u-mac-x64-openj9/831/console",Testing,True,183,CONTRIBUTOR,False,False,False,1.0,0.09677419355,1.0,0.4098360656,0.6592896584,0.3407103416,0.09158488929,0.001387996583
The latest crash shows that we got different results calling CODE.,Investigation and Exploration,True,66,CONTRIBUTOR,False,False,False,1.0,0.1774193548,0.25,0.4153005464,0.65955413,0.34044587,0.001387996583,0.0005831074118
@dsouzai When can this happen?,Social Conversation,False,30,CONTRIBUTOR,False,False,False,0.4545454545,0.08064516129,0.5,0.4207650273,0.65955413,0.34044587,0.001387996583,0.0005831074118
Can we switch from SVM to non-SVM in a compilation?,Investigation and Exploration,False,51,CONTRIBUTOR,False,False,False,1.0,0.1774193548,0.75,0.4262295082,0.65955413,0.34044587,0.001387996583,0.0005831074118
Can we first fail remembering a class but later succeed?,Investigation and Exploration,False,56,CONTRIBUTOR,False,False,False,0.9090909091,0.1612903226,1.0,0.4316939891,0.65955413,0.34044587,0.001387996583,0.0005831074118
When can this happen?,Social Conversation,False,21,CONTRIBUTOR,False,False,False,0.06451612903,0.06451612903,0.08333333333,0.4371584699,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"No idea, this doesn't make sense.",Social Conversation,False,33,CONTRIBUTOR,False,False,False,0.09677419355,0.09677419355,0.1666666667,0.4426229508,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"I've been talking to @Leonardo2718 offline, and I can't find come up with even the craziest scenario for how this could happen.",Task Progress,False,127,CONTRIBUTOR,False,False,False,0.3709677419,0.3709677419,0.25,0.4480874317,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"In order to enter the path where the assert exists, we must've returned true for CODE. CODE calls CODE which would've invoked CODE.",Solution Discussion,True,131,CONTRIBUTOR,False,False,False,0.4032258065,0.4032258065,0.3333333333,0.4535519126,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"It also calls CODE which would've succeeded because 1. CODE returned true, and",Solution Discussion,True,78,CONTRIBUTOR,False,False,False,0.2258064516,0.2258064516,0.4166666667,0.4590163934,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"2. I'm told the defining class is the class of the method we're compiling and so we would've already remembered it at the start of the compile...though even if it wasn't, the fact that CODE returned true means that we succeeded in remembering the class. CODE also does create an instance field validation record, but it must've succeeded nonetheless.",Solution Discussion,True,350,CONTRIBUTOR,False,False,False,1.0,1.0,0.5,0.4644808743,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"So, when we call CODE:
CODE
CODE should've returned a non-NULL class, because it succeeded earlier, and CODE should've returned CODE, because we would've literally done the same call before.",Solution Discussion,True,192,CONTRIBUTOR,False,False,False,0.5806451613,0.5806451613,0.5833333333,0.4699453552,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"You then add on the fact that with Leo's assert, we make the same call to CODE again which now returns a non-NULL class and it makes things even more confusing.",Solution Discussion,True,160,CONTRIBUTOR,False,False,False,0.5161290323,0.5161290323,0.6666666667,0.4754098361,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"You'd have to run with CODE

> Can we first fail remembering a class but later succeed?",Solution Discussion,True,89,CONTRIBUTOR,False,False,False,0.2903225806,0.2903225806,0.75,0.4808743169,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"While the code allows it, I don't know if there's any valid reason for while this could happen.",Social Conversation,False,95,CONTRIBUTOR,False,False,False,0.2903225806,0.2903225806,0.8333333333,0.4863387978,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"If a class failed to be remembered, it's because its J9ROMClass doesn't exist in the SCC, or the SCC is full.",Solution Discussion,False,109,CONTRIBUTOR,False,False,False,0.3387096774,0.3387096774,0.9166666667,0.4918032787,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"In this case though, if the class we're trying to remember is the class of the method we're compiling; we would've already remembered it at the start of the compile, or we wouldn't have done the compile to begin with.",Solution Discussion,False,217,CONTRIBUTOR,False,False,False,0.6612903226,0.6612903226,1.0,0.4972677596,0.6596652364,0.3403347636,0.0005831074118,0.0184875191
"I wonder if CODE returns different results, or it's just that we failed storing the record.",Solution Discussion,True,91,CONTRIBUTOR,False,False,False,0.4571428571,0.2580645161,0.1666666667,0.5027322404,0.6631878845,0.3368121155,0.0184875191,0.1091893746
We can add a version of CODE that gives us the result of CODE during its execution.,Solution Discussion,True,83,CONTRIBUTOR,False,False,False,0.4857142857,0.2741935484,0.3333333333,0.5081967213,0.6631878845,0.3368121155,0.0184875191,0.1091893746
And dump the information in our assert.,Solution Discussion,False,39,CONTRIBUTOR,False,False,False,0.2,0.1129032258,0.5,0.5136612022,0.6631878845,0.3368121155,0.0184875191,0.1091893746
"If the assert fires and we get CODE returns non-null, then it's a problem in AOT record creation.",Solution Discussion,True,97,CONTRIBUTOR,False,False,False,0.5428571429,0.3064516129,0.6666666667,0.5191256831,0.6631878845,0.3368121155,0.0184875191,0.1091893746
@Leonardo2718,Social Conversation,False,13,CONTRIBUTOR,False,False,False,0.02857142857,0.01612903226,0.8333333333,0.5245901639,0.6631878845,0.3368121155,0.0184875191,0.1091893746
"To fix it in the coming release, I think we can get CODE to return the defining class for us, then we should always get the defining class if CODE says the field is resolved.",Solution Discussion,True,174,CONTRIBUTOR,False,False,False,1.0,0.564516129,1.0,0.5300546448,0.6631878845,0.3368121155,0.0184875191,0.1091893746
"For 0.24, why don't we fail the compilation as we did in the 0.23 release (@Leonardo2718 to reintroduce the fix in 0.24) to ""gracefully"" avoid this problem.",Solution Discussion,False,156,CONTRIBUTOR,False,False,False,0.6428571429,0.435483871,0.3333333333,0.5355191257,0.6839930416,0.3160069584,0.1091893746,0.01660963043
Until we have more data on what the actual problem might be I think that is the safest way to work around this problem.,Workarounds,False,119,CONTRIBUTOR,False,False,False,0.5714285714,0.3870967742,0.6666666667,0.5409836066,0.6839930416,0.3160069584,0.1091893746,0.01660963043
"In the meantime, in the head stream, I like @liqunl's suggestion of capturing more of the API results that are producing inconsistent behaviour and including them in the assert so that we can hopefully reason as to what the issue might be.",Investigation and Exploration,False,239,CONTRIBUTOR,False,False,False,1.0,0.6774193548,1.0,0.5464480874,0.6839930416,0.3160069584,0.1091893746,0.01660963043
"Opened #11431 to ""gracefully avoid this problem"" in 0.24.",Action on Issue,False,57,CONTRIBUTOR,False,False,False,1.0,0.1451612903,1.0,0.5519125683,0.6871578731,0.3128421269,0.01660963043,0.01636607982
"https://ci.eclipse.org/openj9/job/Build_JDK11_ppc64_aix_OMR/805

Diagnostics https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK11_ppc64_aix_OMR/805/Build_JDK11_ppc64_aix_OMR-805-20201211-075646-diagnostics.tar.gz
CODE",Testing,True,254,CONTRIBUTOR,False,False,False,1.0,0.09677419355,1.0,0.5573770492,0.690276298,0.309723702,0.01636607982,0.04797128298
This issue continues to be worked in the master branch to get to the root cause of the problem.,Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.7916666667,0.3064516129,0.2,0.5628415301,0.6994168402,0.3005831598,0.04797128298,0.008864014105
Additional asserts are being added to help provide more data points to understand this unusual situation.,Investigation and Exploration,False,105,CONTRIBUTOR,False,False,False,0.6666666667,0.2580645161,0.4,0.5683060109,0.6994168402,0.3005831598,0.04797128298,0.008864014105
"In the meantime, a workaround solution was added to the 0.24 release (#11431) to gracefully fail the compilation when this incongruous state is detected.",Workarounds,False,153,CONTRIBUTOR,False,False,False,1.0,0.3870967742,0.6,0.5737704918,0.6994168402,0.3005831598,0.04797128298,0.008864014105
This is the same solution employed in the 0.23 release.,Social Conversation,False,55,CONTRIBUTOR,False,False,False,0.4166666667,0.1612903226,0.8,0.5792349727,0.6994168402,0.3005831598,0.04797128298,0.008864014105
This issue will be moved forward to the 0.25 release as the investigation continues.,Action on Issue,False,84,CONTRIBUTOR,False,False,False,0.5833333333,0.2258064516,1.0,0.5846994536,0.6994168402,0.3005831598,0.04797128298,0.008864014105
"https://ci.eclipse.org/openj9/job/Build_JDK11_ppc64_aix_Nightly/595
CODE",Testing,True,73,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.5901639344,0.7011058068,0.2988941932,0.008864014105,0.03246777048
"https://ci.eclipse.org/openj9/job/Build_JDK15_x86-64_mac_Nightly/142
CODE",Testing,True,74,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.5956284153,0.7072922793,0.2927077207,0.03246777048,0.1866343743
"https://ci.eclipse.org/openj9/job/Build_JDKnext_ppc64_aix_OpenJDK/286
There is ~500MB of JIT output.
CODE",Testing,True,107,CONTRIBUTOR,False,False,False,1.0,0.1774193548,1.0,0.6010928962,0.7428539583,0.2571460417,0.1866343743,0.1252248285
"https://ci.eclipse.org/openj9/job/Build_JDK11_x86-64_mac_Nightly/608
CODE",Testing,True,74,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.606557377,0.7667145422,0.2332854578,0.1252248285,0.03792151791
"https://ci.eclipse.org/openj9/job/Build_JDK16_ppc64_aix_OpenJDK16/5
CODE",Testing,True,73,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.6120218579,0.7739401824,0.2260598176,0.03792151791,0.1713865063
"https://ci.eclipse.org/openj9/job/Build_JDK15_ppc64_aix_xl_Personal/11
CODE",Testing,True,76,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.6174863388,0.8065965028,0.1934034972,0.1713865063,0.1197204731
"https://ci.eclipse.org/openj9/job/Build_JDK11_ppc64_aix_Personal/852
CODE",Testing,True,74,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.6229508197,0.829408276,0.170591724,0.1197204731,0.008832756273
"Several of us (Mark, Leo, Andrew, Liqun, myself) have looked at this code and we haven't been able figure out how the call to CODE can return NULL one time and non-NULL a second time, given that both CODE and CODE both call CODE with the same parameters.",Investigation and Exploration,True,254,CONTRIBUTOR,False,False,False,1.0,0.7903225806,0.1666666667,0.6284153005,0.8310912867,0.1689087133,0.008832756273,0.001165656648
"In fact, there's been an example [1] where the third time it returns NULL again.",Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.306122449,0.2419354839,0.3333333333,0.6338797814,0.8310912867,0.1689087133,0.008832756273,0.001165656648
We're starting to consider the possibility that there's some timing related issue related to the SCC APIs.,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.3469387755,0.2741935484,0.5,0.6393442623,0.8310912867,0.1689087133,0.008832756273,0.001165656648
"However, to verify this, @Leonardo2718 is coding up some changes to provide a trace of calls made in CODE starting from CODE up to the point where we assert.",Solution Discussion,True,157,CONTRIBUTOR,False,False,False,0.5918367347,0.4677419355,0.6666666667,0.6448087432,0.8310912867,0.1689087133,0.008832756273,0.001165656648
@hangshao0 do you know if there's any kind of sanity checking or other tracing in the SCC code that might be helpful here?,Testing,False,122,CONTRIBUTOR,False,False,False,0.4693877551,0.3709677419,0.8333333333,0.650273224,0.8310912867,0.1689087133,0.008832756273,0.001165656648
[1] https://github.com/eclipse/openj9/issues/9416#issuecomment-743283919,Testing,False,72,CONTRIBUTOR,False,False,False,0.04081632653,0.03225806452,1.0,0.6557377049,0.8310912867,0.1689087133,0.008832756273,0.001165656648
"We're starting to consider the possibility that there's some timing related issue related to the SCC APIs

I guess the APIs are CODE.",Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,1.0,0.3870967742,0.5,0.6612021858,0.8313133932,0.1686866068,0.001165656648,0.06807620883
"Probably worth turning on CODE sub-option CODE, and the trace points in CODE.",Solution Discussion,True,77,CONTRIBUTOR,False,False,False,0.5833333333,0.2258064516,1.0,0.6666666667,0.8313133932,0.1686866068,0.001165656648,0.06807620883
"https://ci.eclipse.org/openj9/job/Build_JDK11_x86-64_mac_mixed_Nightly/3
CODE",Testing,True,78,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.6721311475,0.8442847673,0.1557152327,0.06807620883,0.03199201883
"https://ci.eclipse.org/openj9/job/Build_JDK11_x86-64_mac_OMR/820
CODE",Testing,True,70,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.6775956284,0.8503805891,0.1496194109,0.03199201883,0.02798952788
"https://ci.eclipse.org/openj9/job/Build_JDK11_x86-64_mac_OMR/822
CODE",Testing,True,70,CONTRIBUTOR,False,False,False,1.0,0.04838709677,1.0,0.6830601093,0.8557137686,0.1442862314,0.02798952788,0.001880679553
"Moving this out to 0.26.  A failure has not been seen since adding the new instrumentation to help us narrow this down, and the workaround has been committed to the 0.25 branch already.",Action on Issue,False,185,CONTRIBUTOR,False,False,False,1.0,0.5483870968,1.0,0.693989071,0.8999451168,0.1000548832,0.2302537485,0.1265062135
"Saw this on a PR build:
CODE",Investigation and Exploration,True,29,CONTRIBUTOR,False,False,False,0.1739130435,0.1290322581,0.08333333333,0.6994535519,0.9240498584,0.07595014165,0.1265062135,0.2372754111
"Unfortunately, the PR that added this tracing missed a change that meant we didn't trace anything in CODE....",Investigation and Exploration,True,109,CONTRIBUTOR,False,False,False,0.4130434783,0.3064516129,0.1666666667,0.7049180328,0.9240498584,0.07595014165,0.1265062135,0.2372754111
_**sigh**_.,Social Conversation,False,11,CONTRIBUTOR,False,False,False,0.02173913043,0.01612903226,0.25,0.7103825137,0.9240498584,0.07595014165,0.1265062135,0.2372754111
Will have to enable the tracing to know for sure.,Task Progress,False,49,CONTRIBUTOR,False,False,False,0.2173913043,0.1612903226,0.6666666667,0.737704918,0.9240498584,0.07595014165,0.1265062135,0.2372754111
~I'll open a PR to ensure tracing happens in CODE~ Opened https://github.com/eclipse/openj9/pull/12058.,Action on Issue,True,103,CONTRIBUTOR,False,False,False,0.2608695652,0.1935483871,0.75,0.7431693989,0.9240498584,0.07595014165,0.1265062135,0.2372754111
"That said... as I mentioned above, with HCR it _is_ actually possible for us to get non-NULL the first time and NULL the second time.",Solution Discussion,False,133,CONTRIBUTOR,False,False,False,0.5652173913,0.4193548387,0.8333333333,0.7486338798,0.9240498584,0.07595014165,0.1265062135,0.2372754111
"It's possible for the class of the method we're compiling to get redefined and the compilation wouldn't be interrupted till we explicitly checked, which would not happen between the two queries.",Solution Discussion,False,194,CONTRIBUTOR,False,False,False,0.6739130435,0.5,0.9166666667,0.7540983607,0.9240498584,0.07595014165,0.1265062135,0.2372754111
"So, we're legitimately going to need to handle the possibility a null class chain.",Solution Discussion,False,82,CONTRIBUTOR,False,False,False,0.3043478261,0.2258064516,1.0,0.7595628415,0.9240498584,0.07595014165,0.1265062135,0.2372754111
I found a failure in an internal build.,Investigation and Exploration,False,39,CONTRIBUTOR,False,False,False,0.4444444444,0.1290322581,0.3333333333,0.7650273224,0.9692607796,0.03073922042,0.2372754111,0.0002193629989
No diagnostic files though.,Investigation and Exploration,False,27,CONTRIBUTOR,False,False,False,0.2222222222,0.06451612903,0.6666666667,0.7704918033,0.9692607796,0.03073922042,0.2372754111,0.0002193629989
"Created https://github.com/AdoptOpenJDK/openjdk-build/issues/2528
job/build-scripts/job/jobs/job/jdk11u/job/jdk11u-mac-x64-openj9-IBM/7
CODE",Testing,True,142,CONTRIBUTOR,False,False,False,1.0,0.2903225806,1.0,0.7759562842,0.9692607796,0.03073922042,0.2372754111,0.0002193629989
"The place where CODE is called is:

https://github.com/eclipse/openj9/blob/269003cc717d8fb7191426c71bcbafa86b296c15/runtime/compiler/env/J9SharedCache.cpp#L884-L901

The CODE that's passed into CODE comes from CODE (which is also passed in as a param).",Solution Discussion,True,256,CONTRIBUTOR,False,False,False,0.9,0.435483871,0.1111111111,0.781420765,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"The first time it's called:
CODE
where the last value CODE is the class chain returned by the CODE API, and second-last value CODE is the romClass.",Solution Discussion,True,149,CONTRIBUTOR,False,False,False,1.0,0.4838709677,0.2222222222,0.7868852459,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
This message gets printed out *after*,Solution Discussion,False,37,CONTRIBUTOR,False,False,False,0.2,0.09677419355,0.3333333333,0.7923497268,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"the call to CODE:
https://github.com/eclipse/openj9/blob/269003cc717d8fb7191426c71bcbafa86b296c15/runtime/compiler/env/J9SharedCache.cpp#L1135-L1150",Solution Discussion,True,149,CONTRIBUTOR,False,False,False,0.2,0.09677419355,0.4444444444,0.7978142077,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"The second time CODE is called:
CODE
notice that the last value is CODE even though we're passing in the *same* romClass CODE.",Solution Discussion,True,128,CONTRIBUTOR,False,False,False,0.8333333333,0.4032258065,0.5555555556,0.8032786885,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"Because we're passing in the same romClass, the CODE that gets generated will be the same.",Solution Discussion,True,90,CONTRIBUTOR,False,False,False,0.5333333333,0.2580645161,0.6666666667,0.8087431694,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"Therefore, CODE is returning different values.",Solution Discussion,True,46,CONTRIBUTOR,False,False,False,0.2,0.09677419355,0.7777777778,0.8142076503,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"As such, I don't think this is a JIT issue.",Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.3333333333,0.1612903226,0.8888888889,0.8196721311,0.9693025774,0.03069742256,0.0002193629989,0.0009261993286
"The only possible cases that CODE could return 0 for classChian are:
1. Failed to startup the ByteDataManager.",Investigation and Exploration,True,111,CONTRIBUTOR,False,False,False,1.0,0.3064516129,0.1666666667,0.8306010929,0.9694790573,0.03052094273,0.0009261993286,0.0003529530185
"https://github.com/eclipse/openj9/blob/269003cc717d8fb7191426c71bcbafa86b296c15/runtime/shared_common/CacheMap.cpp#L4050-L4052

   As the first time classChain is found, it is already started up.",Investigation and Exploration,False,197,CONTRIBUTOR,False,False,False,0.7368421053,0.2258064516,0.3333333333,0.8360655738,0.9694790573,0.03052094273,0.0009261993286,0.0003529530185
Won't be caused by this.,Investigation and Exploration,False,24,CONTRIBUTOR,False,False,False,0.2631578947,0.08064516129,0.5,0.8415300546,0.9694790573,0.03052094273,0.0009261993286,0.0003529530185
"2. Lockhash Table failed:
https://github.com/eclipse/openj9/blob/269003cc717d8fb7191426c71bcbafa86b296c15/runtime/shared_common/Manager.cpp#L414-L418

   It returns false after failed ON MONITOR_ENTER_RETRY_TIMES (10) attempts.",Investigation and Exploration,False,230,CONTRIBUTOR,False,False,False,0.8421052632,0.2580645161,0.6666666667,0.8469945355,0.9694790573,0.03052094273,0.0009261993286,0.0003529530185
https://github.com/eclipse/openj9/blob/269003cc717d8fb7191426c71bcbafa86b296c15/runtime/shared_common/Manager.cpp#L472-L484,Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,0.05263157895,0.01612903226,0.8333333333,0.8524590164,0.9694790573,0.03052094273,0.0009261993286,0.0003529530185
I'm not sure if there is anything we can do in this case.,Social Conversation,False,57,CONTRIBUTOR,False,False,False,0.6842105263,0.2096774194,1.0,0.8579234973,0.9694790573,0.03052094273,0.0009261993286,0.0003529530185
"The documentation of CODE is:
https://github.com/eclipse/openj9/blob/269003cc717d8fb7191426c71bcbafa86b296c15/runtime/shared_common/shrinit.cpp#L1792-L1795

It won't be able to return the record in an error case.",Investigation and Exploration,True,215,CONTRIBUTOR,False,False,False,1.0,0.3225806452,1.0,0.8633879781,0.9695463096,0.03045369037,0.0003529530185,7e-05
"Thanks @hangshao0 

@0xdaryl",Social Conversation,False,30,CONTRIBUTOR,False,False,False,0.08,0.06451612903,0.25,0.868852459,0.9695596396,0.03044036043,7e-05,0.07716070228
@Leonardo2718 I think the assert should just be removed:,Solution Discussion,False,56,CONTRIBUTOR,False,False,False,0.18,0.1451612903,0.5,0.8743169399,0.9695596396,0.03044036043,7e-05,0.07716070228
1. In AOT it's possible to get different values based on the semantics of the CODE API.,Solution Discussion,True,87,CONTRIBUTOR,False,False,False,0.34,0.2741935484,0.75,0.8797814208,0.9695596396,0.03044036043,7e-05,0.07716070228
"2. HCR means that even without AOT, it's possible to get different values (specifically non-NULL one time and NULL every time after) if classes get redefined; because J9Classes are redefined in place, we can end up with a different J9ROMClass that's not necessarily going to be in the SCC.",Solution Discussion,False,289,CONTRIBUTOR,False,False,False,1.0,0.8064516129,1.0,0.8852459016,0.9695596396,0.03044036043,7e-05,0.07716070228
"If the assert is removed (implying it is invalid), will the subsequent code work as expected assuming that CODE is NULL?

https://github.com/eclipse/openj9/blob/a9838e74bba0f5935103bedcda6fc84c881804ca/runtime/compiler/compile/J9SymbolReferenceTable.cpp#L940",Solution Discussion,True,260,CONTRIBUTOR,False,False,False,1.0,0.3709677419,1.0,0.8907103825,0.9842619908,0.0157380092,0.07716070228,0.001320457339
"@0xdaryl 

> If the assert is removed (implying it is invalid), will the subsequent code work as expected assuming that containingClass is NULL?",Solution Discussion,False,146,CONTRIBUTOR,False,False,False,0.5227272727,0.3709677419,0.1,0.8961748634,0.9845135933,0.01548640667,0.001320457339,0.001947660621
I don't think simply removing the assert is valid.,Solution Discussion,False,50,CONTRIBUTOR,False,False,False,0.2045454545,0.1451612903,0.2,0.9016393443,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"If CODE can be null, it can cause the JIT to think two fields from different classes are actually the same field.",Solution Discussion,True,113,CONTRIBUTOR,False,False,False,0.5,0.3548387097,0.3,0.9071038251,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"At the very least, I think we should abort compilation as we've been doing in the release branches.",Solution Discussion,False,99,CONTRIBUTOR,False,False,False,0.4318181818,0.3064516129,0.4,0.912568306,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"However, I believe there's a deeper issue as well.

> 1. In AOT it's possible to get different values based on the semantics of the CODE API.",Social Conversation,True,143,CONTRIBUTOR,False,False,False,0.6136363636,0.435483871,0.5,0.9180327869,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"So, to me, it seems pretty reasonable to assume that once something is resolved it stays resolved (ignoring the HCR issue for a minute).",Solution Discussion,False,136,CONTRIBUTOR,False,False,False,0.5454545455,0.3870967742,0.6,0.9234972678,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"If CODE can cause us to violate that assumption (or make it ""look like"" we did), then similar issues as this could impact other parts of the JIT that make a similar assumption, perhaps in even more subtle ways if there are no asserts.",Solution Discussion,True,234,CONTRIBUTOR,False,False,False,1.0,0.7096774194,0.7,0.9289617486,0.9845135933,0.01548640667,0.001320457339,0.001947660621
Redefining VM structures like this from under the JIT's nose seems rather dangerous.,Solution Discussion,False,84,CONTRIBUTOR,False,False,False,0.2954545455,0.2096774194,0.8,0.9344262295,0.9845135933,0.01548640667,0.001320457339,0.001947660621
I would think that we would probably want to abort all current compilations if a class gets redefined (at least all the compilations that might try to look at the class that got redefined).,Solution Discussion,False,189,CONTRIBUTOR,False,False,False,0.7727272727,0.5483870968,0.9,0.9398907104,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"Otherwise, for similar reasons as above, assumptions made in the JIT about the stability of the data structures could be violated and lead to a crash (even if the compiled body is thrown away in the end, the JIT could crash before compilation completes).",Solution Discussion,False,254,CONTRIBUTOR,False,False,False,1.0,0.7096774194,1.0,0.9453551913,0.9845135933,0.01548640667,0.001320457339,0.001947660621
"A way to deal with the HCR problem, in this specific case anyway, is to check whether the comp should be interrupted before the assert - If it does then we abort the compilation; if it doesn't then the assert will only fire when we hit an inconsistent state.",Solution Discussion,False,258,CONTRIBUTOR,False,False,False,0.8,0.7741935484,0.1111111111,0.9508196721,0.9848847044,0.01511529561,0.001947660621,0.07932791196
One way for us to deal with the fact that the SCC API could return NULL even if it returned non-NULL previously is to cache the class chain for each J9Class.,Solution Discussion,False,157,CONTRIBUTOR,False,False,False,0.5333333333,0.5161290323,0.2222222222,0.956284153,0.9848847044,0.01511529561,0.001947660621,0.07932791196
There exists some (currently inactive) infrastructure to cache the validation result of a class chain for each J9Class - this is only used in the AOT load run.,Solution Discussion,False,159,CONTRIBUTOR,False,False,False,0.45,0.435483871,0.3333333333,0.9617486339,0.9848847044,0.01511529561,0.001947660621,0.07932791196
I believe we can piggy-back off this infra to also just cache the class chain per J9Class.,Solution Discussion,False,90,CONTRIBUTOR,False,False,False,0.3,0.2903225806,0.4444444444,0.9672131148,0.9848847044,0.01511529561,0.001947660621,0.07932791196
"That said, the infra uses the CH Table; this is because we already have a whole bunch of code that ensures that the CH Table maintains coherence through all of the runtime events (such as class loading/unloading, redefinition, etc.). Therefore, if we were to piggy back off the aforementioned infra, we would depend on the existence of the CHTable.",Solution Discussion,False,348,CONTRIBUTOR,False,False,False,1.0,0.9677419355,0.5555555556,0.9726775956,0.9848847044,0.01511529561,0.001947660621,0.07932791196
Currently we disable the maintenance of the table if we disable CHOpts for whatever reason.,Solution Discussion,False,91,CONTRIBUTOR,False,False,False,0.25,0.2419354839,0.6666666667,0.9781420765,0.9848847044,0.01511529561,0.001947660621,0.07932791196
"However, there's no reason why we can't maintain the table even if we're not going to make use of it.",Solution Discussion,False,101,CONTRIBUTOR,False,False,False,0.3333333333,0.3225806452,0.7777777778,0.9836065574,0.9848847044,0.01511529561,0.001947660621,0.07932791196
"Therefore, if we can ensure that the CHTable will always be coherent, then we can cache the classchain and not have to worry about whether or not we're going to incorrectly fail an AOT validation we passed earlier.",Solution Discussion,False,214,CONTRIBUTOR,False,False,False,0.6333333333,0.6129032258,0.8888888889,0.9890710383,0.9848847044,0.01511529561,0.001947660621,0.07932791196
SharedClasses.SCM23.MultiCL_0 times out on Windows,Testing,False,50,CONTRIBUTOR,True,True,False,0.4,0.08955223881,0.25,0.005780346821,0.0,1.0,0.0,8.68e-08
"win2012r2-x86-4 got a test timeout from running slow, pls reboot it.",Testing,False,68,CONTRIBUTOR,True,True,False,0.8666666667,0.1940298507,0.5,0.01156069364,0.0,1.0,0.0,8.68e-08
"Or maybe just all the Windows machines except win2012r2-x86-3, which was rebooted yesterday.",Investigation and Exploration,False,92,CONTRIBUTOR,True,True,False,1.0,0.223880597,0.75,0.01734104046,0.0,1.0,0.0,8.68e-08
https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/143/,Testing,False,95,CONTRIBUTOR,True,True,False,0.06666666667,0.01492537313,1.0,0.02312138728,0.0,1.0,0.0,8.68e-08
@jdekonin @AdamBrousseau,Contribution and Commitment,False,24,CONTRIBUTOR,True,False,False,1.0,0.02985074627,1.0,0.0289017341,8.11e-08,0.9999999189,8.68e-08,4.08e-06
The sanitize job reboots Windows.,Investigation and Exploration,False,33,CONTRIBUTOR,False,False,False,1.0,0.07462686567,1.0,0.03468208092,3.89e-06,0.9999961083,4.08e-06,1.6e-05
"Ok, I'll just keep an eye out for more problems.",Social Conversation,False,48,CONTRIBUTOR,True,False,False,1.0,0.1492537313,1.0,0.04046242775,1.88e-05,0.9999811669,1.6e-05,0.001446574697
"Problem happened again on win2012r2-x86-2, please take a look at the machine to see if there is anything left running.
https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/144",Investigation and Exploration,False,214,CONTRIBUTOR,True,False,False,1.0,0.3582089552,1.0,0.04624277457,0.001369605962,0.998630394,0.001446574697,0.0006854428644
There doesn't appear to be anything java related running on it other than the jenkins agent.,Investigation and Exploration,False,92,CONTRIBUTOR,False,False,False,1.0,0.2388059701,1.0,0.05202312139,0.002009654212,0.9979903458,0.0006854428644,2.82e-06
"Latest timeout is on win2012r2-x86-3

@Mesbah-Alam did something change with the SharedClasses.SCM23.MultiCL_0 test?",Investigation and Exploration,False,118,CONTRIBUTOR,True,False,False,0.9473684211,0.2686567164,0.5,0.05780346821,0.002012283436,0.9979877166,2.82e-06,7.29e-06
It's been consistently running for over two hours and timing out on Windows for the past 3-4 days.,Investigation and Exploration,False,98,CONTRIBUTOR,True,False,False,1.0,0.2835820896,1.0,0.06358381503,0.002012283436,0.9979877166,2.82e-06,7.29e-06
Same for this machine.,Investigation and Exploration,False,22,CONTRIBUTOR,False,False,False,0.3636363636,0.05970149254,0.3333333333,0.06936416185,0.002019093939,0.9979809061,7.29e-06,0.001425190268
Appears to be okay.,Investigation and Exploration,False,19,CONTRIBUTOR,False,False,False,0.3636363636,0.05970149254,0.6666666667,0.07514450867,0.002019093939,0.9979809061,7.29e-06,0.001425190268
I rebooted this one too since it was idle in jenkins.,Task Progress,False,53,CONTRIBUTOR,False,False,False,1.0,0.1641791045,1.0,0.08092485549,0.002019093939,0.9979809061,7.29e-06,0.001425190268
did something change with the SharedClasses.SCM23.MultiCL_0 test?,Testing,False,65,CONTRIBUTOR,False,False,False,0.2962962963,0.1194029851,0.1666666667,0.08670520231,0.003349898568,0.9966501014,0.001425190268,2.44e-05
"Hi @pshipton, 

The change done recently in https://github.com/eclipse/openj9-systemtest/pull/98/files reduces load in the CODE variation of this test.",Task Progress,True,153,CONTRIBUTOR,False,False,False,0.6666666667,0.2686567164,0.3333333333,0.09248554913,0.003349898568,0.9966501014,0.001425190268,2.44e-05
No change was done for the CODE variation of the test - which is what this issue is about.,Investigation and Exploration,True,90,CONTRIBUTOR,False,False,False,0.6666666667,0.2686567164,0.5,0.09826589595,0.003349898568,0.9966501014,0.001425190268,2.44e-05
"If this test is consistently timing out on Windows, we need to reduce the load on it.",Solution Discussion,False,85,CONTRIBUTOR,False,False,False,0.6296296296,0.2537313433,0.6666666667,0.1040462428,0.003349898568,0.9966501014,0.001425190268,2.44e-05
"Or, rethinking, did the reboot solve the issue?",Solution Discussion,False,47,CONTRIBUTOR,False,False,False,0.2962962963,0.1194029851,0.8333333333,0.1098265896,0.003349898568,0.9966501014,0.001425190268,2.44e-05
Because the test has not changed in the recent past - so it should not start to time out all on a sudden due to any test issue.,Investigation and Exploration,False,127,CONTRIBUTOR,False,False,False,1.0,0.4029850746,1.0,0.1156069364,0.003349898568,0.9966501014,0.001425190268,2.44e-05
@Mesbah-Alam I don't think the reboot helped.,Social Conversation,False,45,CONTRIBUTOR,True,False,False,0.380952381,0.1194029851,0.25,0.1213872832,0.003372681321,0.9966273187,2.44e-05,4.75e-06
"I don't know why the test was timing out, but I think it always runs slow even when it doesn't timeout.",Investigation and Exploration,False,103,CONTRIBUTOR,True,False,False,1.0,0.3134328358,0.5,0.1271676301,0.003372681321,0.9966273187,2.44e-05,4.75e-06
Pls check other platforms as well.,Investigation and Exploration,False,34,CONTRIBUTOR,True,False,False,0.2857142857,0.08955223881,0.75,0.1329479769,0.003372681321,0.9966273187,2.44e-05,4.75e-06
If the test is running for over an hour across multiple platforms I think it needs to be re-tuned.,Solution Discussion,False,98,CONTRIBUTOR,True,False,False,0.9523809524,0.2985074627,1.0,0.1387283237,0.003372681321,0.9966273187,2.44e-05,4.75e-06
"The timeout for this test is set to CODE , so looks like workload of this test needs to be reduced.",Solution Discussion,True,99,CONTRIBUTOR,False,False,False,1.0,0.2985074627,0.5,0.1502890173,0.003377117413,0.9966228826,4.75e-06,0.0007383085446
Will check other platforms.,Task Progress,False,27,CONTRIBUTOR,False,False,False,0.2,0.05970149254,0.75,0.1560693642,0.003377117413,0.9966228826,4.75e-06,0.0007383085446
"Another timeout, on win2012r2-x86-6
https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/147",Solution Discussion,False,131,CONTRIBUTOR,True,False,False,1.0,0.1194029851,1.0,0.1676300578,0.004066530224,0.9959334698,0.0007383085446,0.0006332221901
"**IGNORE THIS, IT IS INCORRECT**",Social Conversation,False,32,CONTRIBUTOR,True,False,False,0.07462686567,0.07462686567,0.25,0.1734104046,0.004657816202,0.9953421838,0.0006332221901,0.0003635972979
"This test used to take 10 min, it got slow between

https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/142/
OpenJ9: 535e903
OMR: 640f1df
OpenJDK: 8bf2a81
CODE

and 

https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/143/
OpenJ9: 82609ef
OMR: 20db4fb
OpenJDK: 502ab02
CODE

**IGNORE THIS, IT IS INCORRECT**
https://github.com/eclipse/openj9/compare/535e903...82609ef
https://github.com/eclipse/openj9-omr/compare/640f1df...20db4fb
https://github.com/ibmruntimes/openj9-openjdk-jdk11/compare/8bf2a81...502ab02
https://github.com/AdoptOpenJDK/openjdk-tests/compare/c91c600...7ced48a
https://github.com/AdoptOpenJDK/openjdk-systemtest/compare/7de3fbe...6fad604
https://github.com/eclipse/openj9-systemtest/compare/4facf81...79a666d

**IGNORE THIS, IT IS INCORRECT**
I suspect #7149.",Investigation and Exploration,True,884,CONTRIBUTOR,True,False,False,1.0,1.0,0.5,0.1791907514,0.004657816202,0.9953421838,0.0006332221901,0.0003635972979
Trying a grinder with the feature disabled.,Investigation and Exploration,False,43,CONTRIBUTOR,True,False,False,0.1044776119,0.1044776119,0.75,0.1849710983,0.004657816202,0.9953421838,0.0006332221901,0.0003635972979
https://ci.eclipse.org/openj9/view/Test/job/Grinder/519/,Testing,False,56,CONTRIBUTOR,True,False,False,0.01492537313,0.01492537313,1.0,0.1907514451,0.004657816202,0.9953421838,0.0006332221901,0.0003635972979
"I see the CODE option being used in the grinder, but it's still running slow.",Investigation and Exploration,True,77,CONTRIBUTOR,True,False,False,0.75,0.223880597,0.3333333333,0.1965317919,0.004997333654,0.9950026663,0.0003635972979,1.94e-05
@doomerxe pls create a JVM with the change reverted and run a grinder to see if the problem still occurs.,Solution Discussion,False,105,CONTRIBUTOR,True,False,False,1.0,0.2985074627,0.6666666667,0.2023121387,0.004997333654,0.9950026663,0.0003635972979,1.94e-05
"CODE

@hangshao0 @DanHeidinga
@mpirvu fyi in case it's the Port j9methodserver change
**IGNORE THIS, IT IS INCORRECT**",Solution Discussion,True,122,CONTRIBUTOR,True,False,False,1.0,0.2985074627,1.0,0.2080924855,0.004997333654,0.9950026663,0.0003635972979,1.94e-05
"@doomerxe Shoot, ignore the above, I got the fast / slow runs incorrect.",Social Conversation,False,72,CONTRIBUTOR,True,False,False,0.2857142857,0.1791044776,0.3333333333,0.2138728324,0.005015413916,0.9949845861,1.94e-05,4.91e-06
"Trying again

fast
https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/140
OpenJ9: c9d84df
OMR: 54fb162
OpenJDK: 8bf2a81

slow
https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_x86-64_windows_Nightly/142/
OpenJ9: 535e903
OMR: 640f1df
OpenJDK: 8bf2a81

https://github.com/eclipse/openj9/compare/c9d84df...535e903
https://github.com/eclipse/openj9-omr/compare/54fb162...640f1df

There was a build in between, but it failed.",Task Progress,False,495,CONTRIBUTOR,True,False,False,1.0,0.6268656716,0.6666666667,0.2196531792,0.005015413916,0.9949845861,1.94e-05,4.91e-06
Maybe another platform will have similar slowdown.,Investigation and Exploration,False,50,CONTRIBUTOR,True,False,False,0.1666666667,0.1044776119,1.0,0.225433526,0.005015413916,0.9949845861,1.94e-05,4.91e-06
"Between the following builds, SharedClasses.SCM23.MultiCL_0 on pccle went from 13min to 55min.",Investigation and Exploration,False,94,CONTRIBUTOR,True,False,False,0.52,0.1940298507,0.3333333333,0.2312138728,0.005020000581,0.9949799994,4.91e-06,6.9e-06
The systemtest material didn't change.,Investigation and Exploration,False,38,CONTRIBUTOR,True,False,False,0.2,0.07462686567,0.6666666667,0.2369942197,0.005020000581,0.9949799994,4.91e-06,6.9e-06
"https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_ppc64le_linux_Nightly/147
OpenJ9: c9d84df
OMR: 54fb162
OpenJDK: 8bf2a81

https://ci.eclipse.org/openj9/job/Test_openjdk11_j9_extended.system_ppc64le_linux_Nightly/148
OpenJ9: b0e9913
OMR: ffb0d98
OpenJDK: 8bf2a81

https://github.com/eclipse/openj9/compare/c9d84df...b0e9913
https://github.com/eclipse/openj9-omr/compare/54fb162...ffb0d98",Investigation and Exploration,False,416,CONTRIBUTOR,True,False,False,1.0,0.3731343284,1.0,0.2427745665,0.005020000581,0.9949799994,4.91e-06,6.9e-06
I think it has to be one of the JIT changes.,Investigation and Exploration,False,44,CONTRIBUTOR,True,False,False,1.0,0.1641791045,0.5,0.2485549133,0.005026440444,0.9949735596,6.9e-06,3.68e-06
@andrewcraik @fjeremic,Contribution and Commitment,False,22,CONTRIBUTOR,True,False,False,0.1818181818,0.02985074627,1.0,0.2543352601,0.005026440444,0.9949735596,6.9e-06,3.68e-06
"JDK8 runs don't seem affected, only JDK11+",Investigation and Exploration,False,42,CONTRIBUTOR,True,False,False,1.0,0.1044776119,1.0,0.2601156069,0.005029880443,0.9949701196,3.68e-06,4.08e-06
"Confirmed with Windows JDK13 runs
fast (11m)
https://ci.eclipse.org/openj9/job/Test_openjdk13_j9_extended.system_x86-64_windows_Nightly/42
OpenJ9: e60693e
OMR: 54fb162
OpenJDK: 05ba4bd

slow (58m)
https://ci.eclipse.org/openj9/job/Test_openjdk13_j9_extended.system_x86-64_windows_Nightly/43
OpenJ9: 0449f02
OMR: ffb0d98
OpenJDK: 05ba4bd

https://github.com/eclipse/openj9/compare/e60693e...0449f02",Investigation and Exploration,False,410,CONTRIBUTOR,True,False,False,1.0,0.552238806,1.0,0.2658959538,0.005033691081,0.9949663089,4.08e-06,1.72e-05
I suspect it is the changes to the method handle inlining - JDK11 has that and JDK8 doesn't have that.,Investigation and Exploration,False,102,CONTRIBUTOR,False,False,False,0.7307692308,0.2835820896,0.1666666667,0.2716763006,0.005049779156,0.9949502208,1.72e-05,1.44e-05
The improvements will not be reverted as they are providing orders of magnitude performance improvement in general and it is the strategic direction for the optimizer.,Solution Discussion,False,167,CONTRIBUTOR,False,False,False,1.0,0.3880597015,0.3333333333,0.2774566474,0.005049779156,0.9949502208,1.72e-05,1.44e-05
@cathyzhyi is working on further reducing the overhead of the inlining to improve performance in the next release.,Task Progress,False,114,CONTRIBUTOR,False,False,False,0.6923076923,0.2686567164,0.5,0.2832369942,0.005049779156,0.9949502208,1.72e-05,1.44e-05
"A similar timeout exists on a few handle intensive tests on z.

FYI @liqunl.",Solution Discussion,False,78,CONTRIBUTOR,False,False,False,0.5769230769,0.223880597,0.6666666667,0.289017341,0.005049779156,0.9949502208,1.72e-05,1.44e-05
@hzongaro can we look at where the compile-time increase is happening to see if we can do anything simple to help cut the pathlength.,Contribution and Commitment,False,133,CONTRIBUTOR,False,False,False,0.9615384615,0.3731343284,0.8333333333,0.2947976879,0.005049779156,0.9949502208,1.72e-05,1.44e-05
@pshipton what mode are the tests running in - is there a count=0 or disableAsyncCompilation in play?,Solution Discussion,False,101,CONTRIBUTOR,False,False,False,0.6153846154,0.2388059701,1.0,0.3005780347,0.005049779156,0.9949502208,1.72e-05,1.44e-05
"is there a count=0 or disableAsyncCompilation in play 

SharedClasses.",Solution Discussion,False,72,CONTRIBUTOR,False,False,False,1.0,0.1492537313,0.5,0.3063583815,0.005063180094,0.9949368199,1.44e-05,4.84e-06
SCM23.MultiCL uses CODE,Solution Discussion,True,23,CONTRIBUTOR,False,False,False,0.3,0.0447761194,1.0,0.3121387283,0.005063180094,0.9949368199,1.44e-05,4.84e-06
hmm - so I'm not sure if the problem is the compile time or the fact that with the aggressive handle inlining we won't be able to do AOT.,Investigation and Exploration,False,137,CONTRIBUTOR,False,False,False,1.0,0.4179104478,0.3333333333,0.3179190751,0.005067697264,0.9949323027,4.84e-06,5.36e-06
@mpirvu we might need your help to figure out if the inliner changes are affecting AOT or not.,Contribution and Commitment,False,94,CONTRIBUTOR,False,False,False,0.6428571429,0.2686567164,0.6666666667,0.323699422,0.005067697264,0.9949323027,4.84e-06,5.36e-06
There is a plan to support method handles with AOT but that is still being designed.,Solution Discussion,False,84,CONTRIBUTOR,False,False,False,0.5714285714,0.2388059701,1.0,0.3294797688,0.005067697264,0.9949323027,4.84e-06,5.36e-06
We can get a sense of compilation time from verbose logs: -CODE,Investigation and Exploration,True,63,CONTRIBUTOR,False,False,False,1.0,0.1791044776,1.0,0.3352601156,0.005072700899,0.9949272991,5.36e-06,2.67e-05
@Mesbah-Alam is there a setup that can be accessed to do investigation?,Investigation and Exploration,False,71,CONTRIBUTOR,False,False,False,1.0,0.1940298507,0.5,0.3410404624,0.005097603246,0.9949023968,2.67e-05,3.41e-05
Would you be able to get the log mentioned by @mpirvu above?,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.9230769231,0.1791044776,1.0,0.3468208092,0.005097603246,0.9949023968,2.67e-05,3.41e-05
"Would you be able to get the log

@andrewcraik - I am running a grinder with CODE.",Investigation and Exploration,True,84,CONTRIBUTOR,False,False,False,1.0,0.2537313433,0.5,0.3526011561,0.005129489834,0.9948705102,3.41e-05,3.39e-05
Will share the log here once it finishes.,Task Progress,False,41,CONTRIBUTOR,False,False,False,0.4705882353,0.1194029851,1.0,0.3583815029,0.005129489834,0.9948705102,3.41e-05,3.39e-05
"Following attachments contain the vlogs: 

[Generated by running the test on Windows] URL 

[Generated by running the test on Linux] URL 

@andrewcraik @mpirvu",Investigation and Exploration,False,165,CONTRIBUTOR,False,False,False,1.0,0.3880597015,1.0,0.3641618497,0.005161133189,0.9948388668,3.39e-05,1.17e-05
I looked at the verbose logs on Windows and there are some pretty large compilation times.,Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,1.0,0.2388059701,0.5,0.3699421965,0.005172043892,0.9948279561,1.17e-05,6.8e-06
"Eaxmple:
CODE
CODE",Investigation and Exploration,True,20,CONTRIBUTOR,False,False,False,0.3125,0.07462686567,1.0,0.3757225434,0.005172043892,0.9948279561,1.17e-05,6.8e-06
"Total compilation time on Linux is about half (AOT warm compilations take less time on average):
CODE
CODE",Investigation and Exploration,True,108,CONTRIBUTOR,False,False,False,1.0,0.3134328358,1.0,0.3815028902,0.005178391095,0.9948216089,6.8e-06,4.36e-05
Hmm - now that is odd - why is windows so much slower?,Social Conversation,False,54,CONTRIBUTOR,False,False,False,0.5238095238,0.1641791045,0.3333333333,0.387283237,0.005219068791,0.9947809312,4.36e-05,5.27e-05
worse JIT compiler optimization at build time or something?,Investigation and Exploration,False,59,CONTRIBUTOR,False,False,False,0.4285714286,0.1343283582,0.6666666667,0.3930635838,0.005219068791,0.9947809312,4.36e-05,5.27e-05
"Unlikely that the difference would be the inliner change if it is platform specific, but I've been proven wrong before.",Investigation and Exploration,False,119,CONTRIBUTOR,False,False,False,1.0,0.3134328358,1.0,0.3988439306,0.005219068791,0.9947809312,4.36e-05,5.27e-05
"Note plinux seemed to have been affected as well https://github.com/eclipse/openj9/issues/7178#issuecomment-535484726
The other platforms seem fine according to https://github.com/eclipse/openj9-systemtest/pull/99#issuecomment-535156261",Investigation and Exploration,False,237,CONTRIBUTOR,True,False,False,1.0,0.2835820896,1.0,0.4046242775,0.00526823645,0.9947317636,5.27e-05,3.08e-05
"Andrew @andrewcraik, Marius @mpirvu, do you think it would be worth the time to get CODE logs for Windows before the degradation and for ppc64le_linux both before and after?",Investigation and Exploration,True,173,MEMBER,False,False,False,1.0,0.4328358209,1.0,0.4104046243,0.005296972601,0.9947030274,3.08e-05,5.28e-06
"Yes, it makes sense to see whether compilation time increased or it was always that bad (24 sec for one warm compilation !)",Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,1.0,0.328358209,1.0,0.4161849711,0.00530190674,0.9946980933,5.28e-06,5.04e-06
FWIW I see that 54ff80e51f1bc6d11c574548e3f6e4fbf03e3790 [1] is in the list of changes in the diff from Peter's https://github.com/eclipse/openj9/issues/7178#issuecomment-535492114. Internally during Z testing we've found the same change is causing over 2x increase in footprint and massive compilation time increases for Octane benchmarks.,Investigation and Exploration,False,340,CONTRIBUTOR,False,False,False,1.0,0.6417910448,0.2,0.4219653179,0.00530660923,0.9946933908,5.04e-06,3.62e-05
I would focus my attention to that commit in particular.,Task Progress,False,56,CONTRIBUTOR,False,False,False,0.2325581395,0.1492537313,0.4,0.4277456647,0.00530660923,0.9946933908,5.04e-06,3.62e-05
I bet it is the same offender here.,Investigation and Exploration,False,35,CONTRIBUTOR,False,False,False,0.1860465116,0.1194029851,0.6,0.4335260116,0.00530660923,0.9946933908,5.04e-06,3.62e-05
See internal Problem Report 142384 for those of you who can access it.,Social Conversation,False,70,CONTRIBUTOR,False,False,False,0.3023255814,0.1940298507,0.8,0.4393063584,0.00530660923,0.9946933908,5.04e-06,3.62e-05
[1] https://github.ibm.com/runtimes/openj9/commit/54ff80e51f1bc6d11c574548e3f6e4fbf03e3790,Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,0.04651162791,0.02985074627,1.0,0.4450867052,0.00530660923,0.9946933908,5.04e-06,3.62e-05
@hzongaro would be worth getting compilePerformance and inlining vlog for both platforms before and after.,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.9375,0.223880597,0.5,0.450867052,0.005340441676,0.9946595583,3.62e-05,4.18e-05
That way we can see if the long compiles are inlining a lot of method handles.,Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,1.0,0.2388059701,1.0,0.4566473988,0.005340441676,0.9946595583,3.62e-05,4.18e-05
"@Mesbah-Alam, may I ask you to generate the verbose logs on Windows and ppc64le_linux for builds before and after the relevant changes, with the following options?

CODE

I'm unable to submit grinder runs on those builds myself.",Contribution and Commitment,True,232,MEMBER,False,False,False,1.0,0.5970149254,0.5,0.4624277457,0.005379451493,0.9946205485,4.18e-05,0.0008238462571
I'll do the same with the test Filip mentioned [above](https://github.com/eclipse/openj9/issues/7178#issuecomment-535654690).,Task Progress,False,125,MEMBER,False,False,False,0.325,0.1940298507,1.0,0.4682080925,0.005379451493,0.9946205485,4.18e-05,0.0008238462571
@hzongaro - I have sent the vlogs in email as some of the attachments were more than 10mb and could not be attached here.,Task Progress,False,121,CONTRIBUTOR,False,False,False,1.0,0.3582089552,0.5,0.4739884393,0.006148737137,0.9938512629,0.0008238462571,6.19e-06
Please let me know if you need anything else.,Social Conversation,False,45,CONTRIBUTOR,False,False,False,0.375,0.1343283582,1.0,0.4797687861,0.006148737137,0.9938512629,0.0008238462571,6.19e-06
"Actually, the email bounced back saying attachments are too large as well.  

@hzongaro - I've sent you the attachments via slack.",Social Conversation,False,132,CONTRIBUTOR,False,False,False,1.0,0.328358209,0.5,0.4855491329,0.006154516798,0.9938454832,6.19e-06,0.003668136449
Please check.,Social Conversation,False,13,CONTRIBUTOR,False,False,False,0.09090909091,0.02985074627,1.0,0.4913294798,0.006154516798,0.9938454832,6.19e-06,0.003668136449
"Thanks, Mesbah @Mesbah-Alam, for collecting that data!",Social Conversation,False,54,MEMBER,False,False,False,0.1777777778,0.1194029851,0.1428571429,0.4971098266,0.009579724698,0.9904202753,0.003668136449,0.001720565783
The differences are quite pronounced.,Investigation and Exploration,False,37,MEMBER,False,False,False,0.1111111111,0.07462686567,0.2857142857,0.5028901734,0.009579724698,0.9904202753,0.003668136449,0.001720565783
"Before the relevant changes on Linux for Power, this was a typical result from the verbose log:

CODE

and this was a typical one from after the change

CODE

The maximum compile-time was usually one of the many CODE methods.",Investigation and Exploration,True,233,MEMBER,False,False,False,1.0,0.671641791,0.4285714286,0.5086705202,0.009579724698,0.9904202753,0.003668136449,0.001720565783
"Those methods typically went from having about 15 methods inlined to about 150 or so inlined, and seemed to require about ten times more memory per compile.",Investigation and Exploration,False,156,MEMBER,False,False,False,0.6,0.4029850746,0.5714285714,0.5144508671,0.009579724698,0.9904202753,0.003668136449,0.001720565783
"On Windows, the maximum compile-time method was sometimes one of the CODE methods, sometimes CODE and sometimes CODE.",Investigation and Exploration,True,117,MEMBER,False,False,False,0.4222222222,0.2835820896,0.7142857143,0.5202312139,0.009579724698,0.9904202753,0.003668136449,0.001720565783
"Following was a typical result from the verbose log on Windows before the change:

CODE

and this was a typical one from after the change

CODE",Investigation and Exploration,True,149,MEMBER,False,False,False,0.6444444444,0.4328358209,0.8571428571,0.5260115607,0.009579724698,0.9904202753,0.003668136449,0.001720565783
"The total number of inlined methods for all the compiles in any particular run went from being in the range 100000 to 150000 to about 270000 to 400000, while the total number of compiles fell by about 70% to 80%.",Investigation and Exploration,False,212,MEMBER,False,False,False,0.8888888889,0.5970149254,1.0,0.5317919075,0.009579724698,0.9904202753,0.003668136449,0.001720565783
@andrewcraik it's not clear to me if this should be a blocker for the 0.17 release or not.,Social Conversation,False,90,CONTRIBUTOR,True,False,False,0.75,0.2686567164,0.3333333333,0.5375722543,0.0111863431,0.9888136569,0.001720565783,5.33e-07
"The test that exposed the problem is using CODE, but the increase in inlining and compile time could be affecting default mode as well.",Investigation and Exploration,True,135,CONTRIBUTOR,True,False,False,1.0,0.3582089552,0.6666666667,0.5433526012,0.0111863431,0.9888136569,0.001720565783,5.33e-07
Do you know if this has shown up in any other performance testing?,Testing,False,66,CONTRIBUTOR,True,False,False,0.5416666667,0.1940298507,1.0,0.549132948,0.0111863431,0.9888136569,0.001720565783,5.33e-07
Also weird that only certain platforms seem to be affected.,Investigation and Exploration,False,59,CONTRIBUTOR,True,False,False,1.0,0.1492537313,1.0,0.5549132948,0.01118684115,0.9888131589,5.33e-07,5.92e-05
@pshipton I have not had any reports of such.,Investigation and Exploration,False,45,CONTRIBUTOR,False,False,False,0.2045454545,0.1343283582,0.25,0.5606936416,0.01124208961,0.9887579104,5.92e-05,5.28e-05
@piyush286 (he helps monitor OpenJ9 performance at IBM) have you seen anything on any of your monitoring that might be showing JSR292 inlining being a problem?,Investigation and Exploration,False,159,CONTRIBUTOR,False,False,False,0.5909090909,0.3880597015,0.5,0.5664739884,0.01124208961,0.9887579104,5.92e-05,5.28e-05
I don't know if it should block 0.17,Social Conversation,False,36,CONTRIBUTOR,False,False,False,0.1818181818,0.1194029851,0.75,0.5722543353,0.01124208961,0.9887579104,5.92e-05,5.28e-05
but I think @hzongaro (with some help from me when needed) should continue treating it as a priority to see if there is anything simple and safe we can do to reign in any true excesses to reduce the changes of any field impact.,Contribution and Commitment,False,227,CONTRIBUTOR,False,False,False,1.0,0.6567164179,1.0,0.5780346821,0.01124208961,0.9887579104,5.92e-05,5.28e-05
@andrewcraik We haven't seen this issue in our JSR292 regression runs but I'll report here if we do.,Investigation and Exploration,False,100,NONE,False,False,False,1.0,0.2686567164,1.0,0.5838150289,0.01129138468,0.9887086153,5.28e-05,0.0006655096996
"Related to JSR292 tests, 
There are no regressions seen with JRuby related benchmarks.",Investigation and Exploration,False,87,NONE,False,False,False,0.5833333333,0.2089552239,0.3333333333,0.5895953757,0.01191281987,0.9880871801,0.0006655096996,0.0002903767183
"With basic tests, out of two string based tests, testFilterReturnI2String and testFilterReturnString2I
testFilterReturnString2I - didn't show any difference in scores at all.",Investigation and Exploration,False,175,NONE,False,False,False,0.9166666667,0.328358209,0.6666666667,0.5953757225,0.01191281987,0.9880871801,0.0006655096996,0.0002903767183
"testFilterReturnI2String  - has a high drop in score with 20190913 build , but most of the perf is restored with the later build.
CODE",Investigation and Exploration,True,135,NONE,False,False,False,1.0,0.3582089552,1.0,0.6011560694,0.01191281987,0.9880871801,0.0006655096996,0.0002903767183
"Taking another look at logs produced with CODE on Linux x86_64, I noticed that there is far less cold call inlining happening in the compilations of the various CODE methods on that platform than on Linux Power 64 LE or Windows.",Investigation and Exploration,True,228,MEMBER,False,False,False,1.0,0.6119402985,0.5,0.6069364162,0.0121839659,0.9878160341,0.0002903767183,0.005263769541
I'm getting inlining logs for the two runs on Linux to see if I can spot where and why they diverge.,Investigation and Exploration,False,100,MEMBER,False,False,False,0.512195122,0.3134328358,1.0,0.612716763,0.0121839659,0.9878160341,0.0002903767183,0.005263769541
@hzongaro @andrewcraik  Do we have any new information on this issue?,Task Progress,False,69,NONE,False,False,False,1.0,0.1791044776,1.0,0.6184971098,0.01709913339,0.9829008666,0.005263769541,9.59e-06
So @hzongaro and @cathyzhyi have been looking at this.,Contribution and Commitment,False,54,CONTRIBUTOR,False,False,False,0.1875,0.1343283582,0.1111111111,0.6242774566,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
"From my offline discussions with them, they have not been able to reproduce a 2 hour timeout using the development machines we have here at IBM.",Bug Reproduction,False,144,CONTRIBUTOR,False,False,False,0.5416666667,0.3880597015,0.2222222222,0.6300578035,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
"@hzongaro has reported that in these tests we are spawning 5 instances of the tests all running forceAOT,count=1 on a 4 core machine.",Testing,False,133,CONTRIBUTOR,False,False,False,0.5,0.3582089552,0.3333333333,0.6358381503,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
"When he looks the runtime on bare metal machines he has access to we see the runtime double (4 mins to 7 mins kind of thing), but we have not been able to reproduce the pathological 2 hour timeout.",Bug Reproduction,False,197,CONTRIBUTOR,False,False,False,0.8125,0.5820895522,0.4444444444,0.6416184971,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
A compile-time increase with the changes to the 292 inlining are expected per above discussion.,Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.3333333333,0.2388059701,0.5555555556,0.6473988439,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
The machines which generated this defect seem to be seeing the issue more regularly.,Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,0.2916666667,0.2089552239,0.6666666667,0.6531791908,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
"At least one of the machines had 4 cores and so it is possible the machine is overcommitted and thrashing with the increased compilation load, but we have yet to prove this.",Investigation and Exploration,False,173,CONTRIBUTOR,False,False,False,0.6666666667,0.4776119403,0.7777777778,0.6589595376,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
Investigation continues.,Investigation and Exploration,False,24,CONTRIBUTOR,False,False,False,0.04166666667,0.02985074627,0.8888888889,0.6647398844,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
The most surprising thing on the 2 hour runs is that the compilation time does not account for the increase in runtime so something odd seems to be happening either precipitated by the inlining changes or possibly related to how the workload is being run in the cloud.,Investigation and Exploration,False,268,CONTRIBUTOR,False,False,False,1.0,0.7164179104,1.0,0.6705202312,0.01710808665,0.9828919134,9.59e-06,0.0001153940457
The increase in execution time on Power that Peter had reported was about four- to five-fold - going from 13 minutes to about 55 minutes.,Investigation and Exploration,False,137,MEMBER,False,False,False,0.4166666667,0.3731343284,0.2,0.6820809249,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
"As Andrew said, the test executes five processes concurrently, all running forceAOT,count=1.",Investigation and Exploration,False,92,MEMBER,False,False,False,0.2166666667,0.1940298507,0.3,0.6878612717,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
"It also does that twice, sequentially.",Investigation and Exploration,False,38,MEMBER,False,False,False,0.1,0.08955223881,0.4,0.6936416185,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
So the individual runs on Power that Peter reported on went from about 6.5 minutes to roughly 27 minutes.,Investigation and Exploration,False,105,MEMBER,False,False,False,0.3166666667,0.2835820896,0.5,0.6994219653,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
The increases in time required on Windows with JDK 11 were much more dramatic.,Investigation and Exploration,False,78,MEMBER,False,False,False,0.2333333333,0.2089552239,0.6,0.7052023121,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
Andrew mentioned offline that the priorities of the compilation threads on Windows are raised.,Investigation and Exploration,False,94,MEMBER,False,False,False,0.2333333333,0.2089552239,0.7,0.710982659,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
"Marius @mpirvu provided me with the CODE option, and recommended setting a priority of 2.  I was able to produce numbers on Windows with and without that option, and this time saw a dramatic difference:

[Grinder run 2226] URL  used CODE, required just over 10 minutes for one run, just over 20 minutes for two sequential runs.",Solution Discussion,True,329,MEMBER,False,False,False,1.0,0.8955223881,0.8,0.7167630058,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
"[Grinder run 2234] URL  did not specify CODE, and each sequential run was killed after ten minutes, having completed roughly 10% to 15% of the run, so about a six to ten-fold degradation.",Investigation and Exploration,True,187,MEMBER,False,False,False,0.5833333333,0.5223880597,0.9,0.7225433526,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
I will rerun the latter with a build prior to this change.,Task Progress,False,58,MEMBER,False,False,False,0.2,0.1791044776,1.0,0.7283236994,0.01721583853,0.9827841615,0.0001153940457,1.1e-05
That all makes a bit more sense.,Social Conversation,False,32,CONTRIBUTOR,False,False,False,0.2058823529,0.1044776119,0.5,0.7341040462,0.01722613536,0.9827738646,1.1e-05,1.59e-05
"I still wonder why the compilation threads can starve the process to that extent - @mpirvu?

@hzongaro Why was 2234 kill after 10 mins when 2226 was allowed to run ""just over 10 minutes""?",Investigation and Exploration,False,189,CONTRIBUTOR,False,False,False,1.0,0.5074626866,1.0,0.7398843931,0.01722613536,0.9827738646,1.1e-05,1.59e-05
Why was 2234 kill after 10 mins?,Investigation and Exploration,False,32,MEMBER,False,False,False,0.1707317073,0.1044776119,0.2,0.7456647399,0.01724097253,0.9827590275,1.59e-05,1.18e-05
This was from a recent change from Mesbah @Mesbah-Alam to kill the run after ten minutes if it hasn't completed.,Investigation and Exploration,False,112,MEMBER,False,False,False,0.512195122,0.3134328358,0.4,0.7514450867,0.01724097253,0.9827590275,1.59e-05,1.18e-05
"The test loads classes from a jar using a CODE, and after every thousand classes it checks whether ten minutes have passed - so the last batch of 1000 classes in the jar might finish being loaded after ten minutes have passed.",Investigation and Exploration,True,226,MEMBER,False,False,False,1.0,0.6119402985,0.6,0.7572254335,0.01724097253,0.9827590275,1.59e-05,1.18e-05
So 2234 was also killed after just over ten minutes - not after ten minutes precisely.,Investigation and Exploration,False,86,MEMBER,False,False,False,0.3658536585,0.223880597,0.8,0.7630057803,0.01724097253,0.9827590275,1.59e-05,1.18e-05
Sorry for the confusion.,Social Conversation,False,24,MEMBER,False,False,False,0.09756097561,0.05970149254,1.0,0.7687861272,0.01724097253,0.9827590275,1.59e-05,1.18e-05
"We didn't deliver that 10min restriction on the test run, so I assume you are using this for testing purposes.",Investigation and Exploration,False,110,CONTRIBUTOR,True,False,False,1.0,0.2985074627,0.5,0.774566474,0.01725199905,0.9827480009,1.18e-05,3.36e-06
https://github.com/eclipse/openj9-systemtest/pull/99,Investigation and Exploration,False,52,CONTRIBUTOR,True,False,False,0.05,0.01492537313,1.0,0.7803468208,0.01725199905,0.9827480009,1.18e-05,3.36e-06
"I still wonder why the compilation threads can starve the process to that extent

When thread priorities are obeyed, if a compilation thread can run it will preempt any application thread.",Investigation and Exploration,False,190,CONTRIBUTOR,False,False,False,1.0,0.4776119403,1.0,0.7861271676,0.01725513791,0.9827448621,3.36e-06,0.0008600782261
Andrew @andrewcraik asked me off-line to check whether the difference in compile-time accounts for the entire difference in execution time for these tests.,Contribution and Commitment,False,155,MEMBER,False,False,False,0.390625,0.3731343284,0.3333333333,0.7919075145,0.018058256,0.981941744,0.0008600782261,0.001167361543
Following are the results from grinder runs on Windows.,Investigation and Exploration,False,55,MEMBER,False,False,False,0.140625,0.1343283582,0.6666666667,0.7976878613,0.018058256,0.981941744,0.0008600782261,0.001167361543
"I added the elapsed time for each of the ten runs (two sequential executions of five concurrent runs)

- Before
  - Accumulated run-time:  7701s
  - Total time spent in compile threads:  2403s

- After
  - Accumulated run-time:  68564s
  - Total time spent in compile threads:  53519s

So there’s roughly 10000s difference unaccounted for there in total.",Investigation and Exploration,False,364,MEMBER,False,False,False,1.0,0.9552238806,1.0,0.8034682081,0.018058256,0.981941744,0.0008600782261,0.001167361543
"We're about out of time for making more changes for the 0.17 release, unless the release is delayed.",Task Progress,False,100,CONTRIBUTOR,True,False,False,0.72,0.2686567164,0.1666666667,0.8092485549,0.01914830704,0.980851693,0.001167361543,2.78e-05
The preferred approach is to complete the release on schedule to pick up the OpenJDK security fixes.,Solution Discussion,False,100,CONTRIBUTOR,True,False,False,0.68,0.2537313433,0.3333333333,0.8150289017,0.01914830704,0.980851693,0.001167361543,2.78e-05
Adding another release to update 0.17 later is open for discussion.,Action on Issue,False,67,CONTRIBUTOR,True,False,False,0.44,0.1641791045,0.5,0.8208092486,0.01914830704,0.980851693,0.001167361543,2.78e-05
Testing of the current content will occur on the weekend (Oct 12).,Task Progress,False,66,CONTRIBUTOR,True,False,False,0.48,0.1791044776,0.6666666667,0.8265895954,0.01914830704,0.980851693,0.001167361543,2.78e-05
"We expect to get OpenJDK changes Tues afternoon (Oct 15), and as long as these don't cause any problem the 0.17 release will be finalized.",Task Progress,False,138,CONTRIBUTOR,True,False,False,1.0,0.3731343284,0.8333333333,0.8323699422,0.01914830704,0.980851693,0.001167361543,2.78e-05
@andrewcraik @DanHeidinga,Contribution and Commitment,False,25,CONTRIBUTOR,True,False,False,0.08,0.02985074627,1.0,0.838150289,0.01914830704,0.980851693,0.001167361543,2.78e-05
@andrewcraik @mpirvu Is this a stop ship issue?,Social Conversation,False,47,MEMBER,False,False,False,0.5333333333,0.1194029851,0.5,0.8439306358,0.0191742634,0.9808257366,2.78e-05,1.04e-05
Can you pull together a case on why (or not) this should block the release?,Social Conversation,False,75,MEMBER,False,False,False,1.0,0.223880597,1.0,0.8497109827,0.0191742634,0.9808257366,2.78e-05,1.04e-05
@andrewcraik  We were talking yesterday about a possible solution to this problem.,Solution Discussion,False,82,CONTRIBUTOR,False,False,False,1.0,0.1940298507,0.5,0.8554913295,0.01918396952,0.9808160305,1.04e-05,1.3e-06
Are there unforseen roadblocks?,Investigation and Exploration,False,31,CONTRIBUTOR,False,False,False,0.3076923077,0.05970149254,1.0,0.8612716763,0.01918396952,0.9808160305,1.04e-05,1.3e-06
So I don't think my theory holds water - we are still trying to figure out what is going on.,Investigation and Exploration,False,92,CONTRIBUTOR,False,False,False,0.6551724138,0.2835820896,0.2,0.8670520231,0.01918518568,0.9808148143,1.3e-06,0.0002576922821
I still think the windows case is an extreme stress case - you have 5 JVMs all with 3 compile threads loading and compiling methods in 10000 classes with count=1.,Investigation and Exploration,False,162,CONTRIBUTOR,False,False,False,1.0,0.4328358209,0.4,0.8728323699,0.01918518568,0.9808148143,1.3e-06,0.0002576922821
With the elevated compile thread priority the system starves the application on windows.,Investigation and Exploration,False,88,CONTRIBUTOR,False,False,False,0.4482758621,0.1940298507,0.6,0.8786127168,0.01918518568,0.9808148143,1.3e-06,0.0002576922821
Lowering the priority lets the test pass.,Solution Discussion,False,41,CONTRIBUTOR,False,False,False,0.2413793103,0.1044776119,0.8,0.8843930636,0.01918518568,0.9808148143,1.3e-06,0.0002576922821
We're trying to understand why the system is so stressed.,Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,0.3448275862,0.1492537313,1.0,0.8901734104,0.01918518568,0.9808148143,1.3e-06,0.0002576922821
All in all we don't think this is a stop ship issue.,Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,0.2727272727,0.1791044776,0.1666666667,0.8959537572,0.01942581186,0.9805741881,0.0002576922821,0.0001852779599
"Changes to inlining method handle chains have increased the compilation overhead substantially and the test on Windows times-out because compilation threads, having higher priority , don't give application thread many chances to run (5 JVMs * 3 compTheads = 15 comp threads working on 4 cores).",Investigation and Exploration,False,294,CONTRIBUTOR,False,False,False,1.0,0.6567164179,0.3333333333,0.901734104,0.01942581186,0.9805741881,0.0002576922821,0.0001852779599
"From the vlogs I looked at, the total time on CPU by compilation threads jumped from 2822 sec to 6509 sec.",Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.4772727273,0.3134328358,0.5,0.9075144509,0.01942581186,0.9805741881,0.0002576922821,0.0001852779599
"The biggest increase comes from warm compilations which, even though they are substantially fewer now, they are way more expensive (20x).",Investigation and Exploration,False,137,CONTRIBUTOR,False,False,False,0.4772727273,0.3134328358,0.6666666667,0.9132947977,0.01942581186,0.9805741881,0.0002576922821,0.0001852779599
"However, this level of stress is not common in practice (CODE creates many compilations).",Investigation and Exploration,True,89,CONTRIBUTOR,False,False,False,0.3181818182,0.2089552239,0.8333333333,0.9190751445,0.01942581186,0.9805741881,0.0002576922821,0.0001852779599
We looked at the perf results from TrafficLights and neither JSR292 specific benchmarks nor Daytrader3 on Java11 see any negative side effects.,Investigation and Exploration,False,143,CONTRIBUTOR,False,False,False,0.5,0.328358209,1.0,0.9248554913,0.01942581186,0.9805741881,0.0002576922821,0.0001852779599
"Are there any objections to merging the system test change that limits the test time to 10 minutes, regardless of how many classes get loaded in that time?",Investigation and Exploration,False,155,CONTRIBUTOR,True,False,False,1.0,0.4179104478,1.0,0.9306358382,0.01959881947,0.9804011805,0.0001852779599,6.97e-06
and the follow up question.,Solution Discussion,False,27,CONTRIBUTOR,True,False,False,0.2631578947,0.07462686567,0.5,0.936416185,0.01960532883,0.9803946712,6.97e-06,0.0005708426721
"Does the system test change resolve this Issue, or should it stay open for more investigation or further changes?",Social Conversation,False,113,CONTRIBUTOR,True,False,False,1.0,0.2835820896,1.0,0.9421965318,0.01960532883,0.9803946712,6.97e-06,0.0005708426721
@andrewcraik @mpirvu fyi the preceding two comments.,Contribution and Commitment,False,52,CONTRIBUTOR,True,False,False,0.35,0.1044776119,0.5,0.9479768786,0.02013836648,0.9798616335,0.0005708426721,2.11e-05
Without further input I'll go ahead with the test change today so we are using it for the weekend testing.,Testing,False,106,CONTRIBUTOR,True,False,False,1.0,0.2985074627,1.0,0.9537572254,0.02013836648,0.9798616335,0.0005708426721,2.11e-05
"If I understand correctly the system test change will put an upper bound on the testing time, but the number of classes loaded will not be a criteria for failure.",Solution Discussion,False,162,CONTRIBUTOR,False,False,False,1.0,0.447761194,0.25,0.9595375723,0.02015809145,0.9798419085,2.11e-05,0.0001604948466
I am ok with this change.,Social Conversation,False,25,CONTRIBUTOR,False,False,False,0.2,0.08955223881,0.5,0.9653179191,0.02015809145,0.9798419085,2.11e-05,0.0001604948466
@andrewcraik mentioned about future work that will attempt to reduce compilation time.,Social Conversation,False,86,CONTRIBUTOR,False,False,False,0.4,0.1791044776,0.75,0.9710982659,0.02015809145,0.9798419085,2.11e-05,0.0001604948466
"Whether or not this issue should stay open, I'll let Andrew decide.",Social Conversation,False,67,CONTRIBUTOR,False,False,False,0.4,0.1791044776,1.0,0.9768786127,0.02015809145,0.9798419085,2.11e-05,0.0001604948466
https://github.com/eclipse/openj9-systemtest/pull/99 is merged.,Action on Issue,False,63,CONTRIBUTOR,True,False,False,0.1578947368,0.0447761194,0.5,0.9826589595,0.02030795726,0.9796920427,0.0001604948466,0.0491754647
Removing the blocker label and moving this issue to the next milestone as a reminder for any future work.,Action on Issue,False,105,CONTRIBUTOR,True,False,False,1.0,0.2835820896,1.0,0.9884393064,0.02030795726,0.9796920427,0.0001604948466,0.0491754647
Additional perf improvement is open as https://github.com/eclipse/openj9/pull/7785,Task Progress,False,82,CONTRIBUTOR,False,False,False,1.0,0.1044776119,1.0,0.9942196532,0.06622669353,0.9337733065,0.0491754647,1.0
This seems complete.,Social Conversation,False,20,CONTRIBUTOR,True,False,True,1.0,0.0447761194,1.0,1.0,1.0,0.0,1.0,0.0
Bug in OpenJ9's JITC?,Observed Bug Behaviour,False,21,NONE,True,True,False,0.08333333333,0.05970149254,0.1428571429,0.005586592179,0.0,1.0,0.0,0.00144281986
"Hi all, 

I've been running my stuff on OpenJ9 recently after a lot of the issues (like the one blocking IntelliJ) were fixed.",Social Conversation,False,128,NONE,True,True,False,0.5208333333,0.3731343284,0.2857142857,0.01117318436,0.0,1.0,0.0,0.00144281986
"Unfortunately, in one of the apps I wrote using [akka] URL , I'm hitting an issue where a benchmark I'm running will freeze and the program will stop functioning, and this issue is related to OpenJ9 as it disappears on Zulu9, but appears within 2-5 iterations on OpenJ9.",Observed Bug Behaviour,False,270,NONE,True,True,False,1.0,0.7164179104,0.4285714286,0.01675977654,0.0,1.0,0.0,0.00144281986
"I'm trying to nail down what exactly is going on here, but I don't know how to write a minimized test-case for you guys that you can reproduce.",Investigation and Exploration,False,143,NONE,True,True,False,0.6041666667,0.4328358209,0.5714285714,0.02234636872,0.0,1.0,0.0,0.00144281986
"Is there any profiling or thread information I can extract from openj9 that would help me figure out where the issue is so I can produce a minimized test case for this bug?

Thanks.",Investigation and Exploration,False,183,NONE,True,True,False,0.7291666667,0.5223880597,0.7142857143,0.02793296089,0.0,1.0,0.0,0.00144281986
"OpenJ9 version string:
CODE

Update: using CODE makes the issue disappear, though I'm not sure if this is because the bench is slower and less demanding on OpenJ9, or if it's because of an issue with the jit compiler.",Solution Discussion,True,220,NONE,True,True,False,0.8541666667,0.6119402985,0.8571428571,0.03351955307,0.0,1.0,0.0,0.00144281986
I'll retest this on a slower connection and see if openj9 works still...,Investigation and Exploration,False,72,NONE,True,True,False,0.2708333333,0.1940298507,1.0,0.03910614525,0.0,1.0,0.0,0.00144281986
"Easiest way I can think of is to send CODE to the process periodically, that will cause the JVM to dump javacore files, which are text files that contain Java backtraces for every application thread, the state of locks, etc.",Investigation and Exploration,True,224,MEMBER,False,False,False,1.0,0.5970149254,0.5,0.04469273743,0.0005659745819,0.9994340254,0.00144281986,0.002326266906
You can usually determine if forward progress is being made or if one or more threads are stuck waiting.,Investigation and Exploration,False,104,MEMBER,False,False,False,0.475,0.2835820896,1.0,0.05027932961,0.0005659745819,0.9994340254,0.00144281986,0.002326266906
I'm back home with my significantly slower internet and I've confirmed this seems to be a JIT bug.,Investigation and Exploration,False,98,NONE,True,False,False,0.3064516129,0.2835820896,0.25,0.05586592179,0.001478498714,0.9985215013,0.002326266906,0.0001379039292
"Disabling jit with -Xnojit fixes the problem, and the program fails after a few warmup iterations when I have the default options enabled.",Solution Discussion,False,138,NONE,True,False,False,0.3709677419,0.3432835821,0.5,0.06145251397,0.001478498714,0.9985215013,0.002326266906,0.0001379039292
"I've attached the jit log from a run that exhibited the hang, as well as two core dumps (one possibly before the problem manifested, one definitely after)

[bench.zip] URL 

I hope this is helpful cause I'm not sure I can make a minimal test case for you guys, and unfortunately, this code is accessing parts of my job's infrastructure",Investigation and Exploration,False,339,NONE,True,False,False,1.0,0.9253731343,0.75,0.06703910615,0.001478498714,0.9985215013,0.002326266906,0.0001379039292
so I can't share it with you as it is.,Social Conversation,False,38,NONE,True,False,False,0.1612903226,0.1492537313,1.0,0.07262569832,0.001478498714,0.9985215013,0.002326266906,0.0001379039292
"When it hangs, is it with high cpu or idle?",Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,1.0,0.1492537313,1.0,0.0782122905,0.001532594253,0.9984674057,0.0001379039292,0.0001732418111
"I used your core analyzer to look at the coredumps i gave you, and it looks like a jit thread is hanging or something.",Investigation and Exploration,False,118,NONE,True,False,False,1.0,0.3582089552,0.5,0.08379888268,0.001600551775,0.9983994482,0.0001732418111,0.0001922036014
It's the largest cpu time user of any thread and grows between the two dumps.,Investigation and Exploration,False,77,NONE,True,False,False,0.625,0.223880597,1.0,0.08938547486,0.001600551775,0.9983994482,0.0001732418111,0.0001922036014
@JamesKingdon It's idle/near idle.,Investigation and Exploration,False,34,NONE,True,False,False,0.5,0.07462686567,0.5,0.09497206704,0.001675947433,0.9983240526,0.0001922036014,5.6e-05
Still some slight cpu usage in the 1-2% range.,Investigation and Exploration,False,46,NONE,True,False,False,1.0,0.1492537313,1.0,0.1005586592,0.001675947433,0.9983240526,0.0001922036014,5.6e-05
"The verbose log has the same number of compilation starts as it does compilation ends, so it's not stuck in a compilation as far as I can see.",Investigation and Exploration,False,142,CONTRIBUTOR,False,False,False,1.0,0.4179104478,0.6666666667,0.1117318436,0.001697923746,0.9983020763,5.6e-05,0.0001611752173
"Ok, low cpu would also suggest we're stuck on a lock somewhere.",Investigation and Exploration,False,63,CONTRIBUTOR,False,False,False,0.4285714286,0.1791044776,1.0,0.1173184358,0.001697923746,0.9983020763,5.6e-05,0.0001611752173
"Hmm, lock dump doesn't immediately look suspicious.",Investigation and Exploration,False,51,CONTRIBUTOR,False,False,False,0.6363636364,0.1044776119,0.5,0.1229050279,0.001761147907,0.9982388521,0.0001611752173,0.0002284033828
Which thread would you expect to be working in this app?,Expected Behaviour,False,56,CONTRIBUTOR,False,False,False,1.0,0.1641791045,1.0,0.1284916201,0.001761147907,0.9982388521,0.0001611752173,0.0002284033828
@JamesKingdon The thread titled mySystem-irods-dispatcher takes near 70% of cpu time when -Xnojit is passed to openj9.,Investigation and Exploration,False,118,NONE,True,False,False,0.95,0.2835820896,0.5,0.1340782123,0.001850743645,0.9981492564,0.0002284033828,0.0005464443196
"The eu.bioemergences.utils.irods.IRODSServiceBench,listcontents thread and the main thread are the next two biggest, and all others take minimal time.",Investigation and Exploration,False,150,NONE,True,False,False,1.0,0.2985074627,1.0,0.1396648045,0.001850743645,0.9981492564,0.0002284033828,0.0005464443196
"Hmm, that thread is sat at 
CODE
Edit: wild cards weren't showing up

Would it be possible to run a test with the following?
CODE",Investigation and Exploration,True,134,CONTRIBUTOR,False,False,False,1.0,0.4328358209,1.0,0.1452513966,0.00206509722,0.9979349028,0.0005464443196,0.0002508127713
I get the same results.,Testing,False,23,NONE,True,False,False,0.5,0.07462686567,0.5,0.1508379888,0.002163483482,0.9978365165,0.0002508127713,0.0001215278376
"Here's the core dump from that run: 
[javacore.20171013.204324.7707.0001.txt] URL ",Testing,False,83,NONE,True,False,False,1.0,0.1492537313,1.0,0.156424581,0.002163483482,0.9978365165,0.0002508127713,0.0001215278376
"Ah, that was my fault, my first attempt at posting the exclude, I forgot to quote the text and the formatting hid the wildcards.",Solution Discussion,False,128,CONTRIBUTOR,False,False,False,1.0,0.3582089552,0.5,0.1620111732,0.002211155176,0.9977888448,0.0001215278376,0.0004214688837
You need a '*' at the end of each method filter for it to match anything.,Solution Discussion,False,73,CONTRIBUTOR,False,False,False,0.625,0.223880597,1.0,0.1675977654,0.002211155176,0.9977888448,0.0001215278376,0.0004214688837
"@JamesKingdon That didn't fix it either, but switching to CODE did.",Solution Discussion,True,67,NONE,True,False,False,0.7857142857,0.1641791045,0.5,0.1731843575,0.002376484669,0.9976235153,0.0004214688837,5.77e-05
I tried CODE to see if that narrowing still fixed things but it didn't.,Solution Discussion,True,71,NONE,True,False,False,1.0,0.2089552239,1.0,0.1787709497,0.002376484669,0.9976235153,0.0004214688837,5.77e-05
Did you wild card the end of CODE ?,Solution Discussion,True,35,CONTRIBUTOR,False,False,False,1.0,0.1194029851,1.0,0.1843575419,0.002399137176,0.9976008628,5.77e-05,0.0001387658288
@JamesKingdon no I hadn't.,Social Conversation,False,26,NONE,True,False,False,1.0,0.05970149254,0.5,0.1899441341,0.002453570813,0.9975464292,0.0001387658288,0.0002146129899
CODE fixes the issue.,Solution Discussion,True,21,NONE,True,False,False,1.0,0.05970149254,1.0,0.1955307263,0.002453570813,0.9975464292,0.0001387658288,0.0002146129899
"OK, the only jit compiled method from sun/misc in your original verbose log is
CODE, so if excluding sun/misc/* works reliably, we might assume that excluding and not inlining getObjectVolatile should also work:
(this will probably need quotes depending on how you launch the JVM)
CODE
If the program works with that, the next step is to get a compilation log.",Solution Discussion,True,364,CONTRIBUTOR,False,False,False,1.0,1.0,0.5,0.2011173184,0.002537756996,0.997462243,0.0002146129899,0.0006464246683
"We would need to remove the exclude/dontInline options and replace with:
CODE",Solution Discussion,True,78,CONTRIBUTOR,False,False,False,0.2089552239,0.2089552239,1.0,0.2067039106,0.002537756996,0.997462243,0.0002146129899,0.0006464246683
It appears it wasn't getObjectVolatile.,Solution Discussion,False,39,NONE,True,False,False,0.2631578947,0.07462686567,0.2,0.2122905028,0.002791329837,0.9972086702,0.0006464246683,0.0001327325319
"Excluding it didn't fix the problem, however the jit log of the new run that failed showed another sun.misc.",Solution Discussion,False,108,NONE,True,False,False,1.0,0.2835820896,0.4,0.217877095,0.002791329837,0.9972086702,0.0006464246683,0.0001327325319
Unsafe method: CODE.,Solution Discussion,True,20,NONE,True,False,False,0.1578947368,0.0447761194,0.6,0.2234636872,0.002791329837,0.9972086702,0.0006464246683,0.0001327325319
Excluding it fixed execution.,Solution Discussion,False,29,NONE,True,False,False,0.2105263158,0.05970149254,0.8,0.2290502793,0.002791329837,0.9972086702,0.0006464246683,0.0001327325319
I'm creating the compilation log now.,Task Progress,False,37,NONE,True,False,False,0.3157894737,0.08955223881,1.0,0.2346368715,0.002791329837,0.9972086702,0.0006464246683,0.0001327325319
I hate bugs that move...,Social Conversation,False,24,CONTRIBUTOR,False,False,False,1.0,0.07462686567,1.0,0.2458100559,0.002843396794,0.9971566032,0.0001327325319,0.0004990398439
"This is all I can get from running both: 
CODE
and
CODE

[compareAndSwapObject.log] URL ",Investigation and Exploration,True,93,NONE,True,False,False,0.6,0.2686567164,0.3333333333,0.251396648,0.003039155028,0.996960845,0.0004990398439,0.0003309694301
"As you can see, nothing particularly useful there.",Investigation and Exploration,False,50,NONE,True,False,False,0.2666666667,0.1194029851,0.6666666667,0.2569832402,0.003039155028,0.996960845,0.0004990398439,0.0003309694301
"I'm not sure why it's not compiling, but excluding that method stops the hang from happening...

here's the jit log where I found compareAndSwapObject being jitted: 
[unsafe.20171013.211151.13867.log] URL ",Investigation and Exploration,False,208,NONE,True,False,False,1.0,0.447761194,1.0,0.2625698324,0.003039155028,0.996960845,0.0004990398439,0.0003309694301
@0dvictor you might be able to help since this is one of the primitives we probably do something special for in the code generator when we do encounter it - maybe you can provide some guidance?,Contribution and Commitment,False,193,CONTRIBUTOR,False,False,False,1.0,0.5223880597,1.0,0.2681564246,0.003168984322,0.9968310157,0.0003309694301,0.0004628400625
The trace log is not complete.,Investigation and Exploration,False,30,CONTRIBUTOR,False,False,False,0.3333333333,0.08955223881,0.3333333333,0.2737430168,0.003350542477,0.9966494575,0.0004628400625,0.0001068755452
"It seems that multiple log files were generated, do you mind double check and attach all of them?",Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,1.0,0.2686567164,0.6666666667,0.2793296089,0.003350542477,0.9966494575,0.0004628400625,0.0001068755452
These log files may have names like CODE.,Investigation and Exploration,True,41,CONTRIBUTOR,False,False,False,0.4444444444,0.1194029851,1.0,0.2849162011,0.003350542477,0.9966494575,0.0004628400625,0.0001068755452
They do not exist.,Investigation and Exploration,False,18,NONE,True,False,False,0.16,0.05970149254,0.5,0.2905027933,0.00339246652,0.9966075335,0.0001068755452,0.0002499508717
"I've double and triple checked and there are no such logs

As I said, the jit log for compareAndSwapObject is not particularly helpful.",Investigation and Exploration,False,137,NONE,True,False,False,1.0,0.3731343284,1.0,0.2960893855,0.00339246652,0.9966075335,0.0001068755452,0.0002499508717
"Might be worth combining a run which logs anything from sun/misc/Unsafe with a verbose log so we can confirm what did get compiled during the run:
CODE
This might get large, but at least in the one verbose log I have there was only one method compiled from Unsafe, so hopefully it will be ok.",Investigation and Exploration,True,294,CONTRIBUTOR,False,False,False,1.0,0.8805970149,1.0,0.3016759777,0.003490514685,0.9965094853,0.0002499508717,0.0003395884257
"Here's that: 
[Unsafe.20171013.215123.17207.log] URL 

You'll notice compareAndSwapObject isn't even in the log...",Investigation and Exploration,False,117,NONE,True,False,False,1.0,0.2089552239,1.0,0.3072625698,0.003623724951,0.996376275,0.0003395884257,0.0001999606974
"True, but getObjectVolatile was.",Investigation and Exploration,False,32,CONTRIBUTOR,False,False,False,0.2352941176,0.05970149254,0.3333333333,0.312849162,0.003702163483,0.9962978365,0.0001999606974,9.22e-05
Was there a compilation log (tracefile) to go with the verbose log?,Investigation and Exploration,False,67,CONTRIBUTOR,False,False,False,0.7058823529,0.1791044776,0.6666666667,0.3184357542,0.003702163483,0.9962978365,0.0001999606974,9.22e-05
"I see you used the same name for both, I'm not sure how that would work out...",Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,1.0,0.2537313433,1.0,0.3240223464,0.003702163483,0.9962978365,0.0001999606974,9.22e-05
"Another two configs that may worth trying:
1. Export environment variable CODE
2. Export environment variable CODE",Investigation and Exploration,True,116,CONTRIBUTOR,False,False,False,1.0,0.2835820896,0.5,0.3296089385,0.003738339876,0.9962616601,9.22e-05,0.0002215081863
These two trials may help to isolate the issue.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.4736842105,0.1343283582,1.0,0.3351955307,0.003738339876,0.9962616601,9.22e-05,0.0002215081863
"@JamesKingdon only one of the runs produced a tracefile: 
[bench_1.zip] URL 

I'll try those @0dvictor.",Investigation and Exploration,False,106,NONE,True,False,False,1.0,0.2537313433,0.5,0.3407821229,0.003825230836,0.9961747692,0.0002215081863,5.6e-05
I assume I should do those one at a time?,Investigation and Exploration,False,41,NONE,True,False,False,0.5882352941,0.1492537313,1.0,0.3463687151,0.003825230836,0.9961747692,0.0002215081863,5.6e-05
"Yes, they should be two separate tests.",Investigation and Exploration,False,39,CONTRIBUTOR,False,False,False,1.0,0.1044776119,1.0,0.3519553073,0.003847207149,0.9961527929,5.6e-05,0.0004662876607
DisableUnsafe made the bench run perfectly fine.,Investigation and Exploration,False,48,NONE,True,False,False,0.2916666667,0.1044776119,0.5,0.3575418994,0.004030117692,0.9959698823,0.0004662876607,0.0005447205204
"DisableCASInlining caused it to hard crash instead of hanging

[DisableCASInlining.zip] URL 
[DisableUnsafe.zip] URL 

I included the coredump with the inlining zip",Investigation and Exploration,False,169,NONE,True,False,False,1.0,0.3582089552,1.0,0.3631284916,0.004030117692,0.9959698823,0.0004662876607,0.0005447205204
Thank you.,Social Conversation,False,10,CONTRIBUTOR,False,False,False,0.1111111111,0.02985074627,0.2,0.3687150838,0.004243795073,0.9957562049,0.0005447205204,0.0001206659381
The result indicates the defect might be related to CODE.,Investigation and Exploration,True,57,CONTRIBUTOR,False,False,False,0.5555555556,0.1492537313,0.4,0.374301676,0.004243795073,0.9957562049,0.0005447205204,0.0001206659381
Unfortunately I cannot tell anything from these two logs.,Investigation and Exploration,False,57,CONTRIBUTOR,False,False,False,0.5555555556,0.1492537313,0.6,0.3798882682,0.004243795073,0.9957562049,0.0005447205204,0.0001206659381
"Instead trying to figure out which function to log, it may be simpler to log every compiled methods.",Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,1.0,0.2686567164,0.8,0.3854748603,0.004243795073,0.9957562049,0.0005447205204,0.0001206659381
"To achieve this, one can use CODE; and please unset the two environment variables when logging.",Investigation and Exploration,True,95,CONTRIBUTOR,False,False,False,0.8888888889,0.2388059701,1.0,0.3910614525,0.004243795073,0.9957562049,0.0005447205204,0.0001206659381
"Depending on how many methods, logging everything could generate quite a lot of data.",Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,1.0,0.2089552239,1.0,0.3966480447,0.00429112867,0.9957088713,0.0001206659381,0.0003930261983
@0dvictor when I do CODE the hanging problem disappears entirely.,Solution Discussion,True,65,NONE,True,False,False,0.5263157895,0.1492537313,0.1666666667,0.4022346369,0.004445300957,0.995554699,0.0003930261983,0.0006283247775
I think something is happening during the jit compilation of that method.,Solution Discussion,False,73,NONE,True,False,False,0.6315789474,0.1791044776,0.3333333333,0.4078212291,0.004445300957,0.995554699,0.0003930261983,0.0006283247775
"Even though it rarely shows up in the jit logs, excluding it from jit makes the problem go away.",Solution Discussion,False,96,NONE,True,False,False,1.0,0.2835820896,0.5,0.4134078212,0.004445300957,0.995554699,0.0003930261983,0.0006283247775
I'm compressing the logs you asked for right now.,Task Progress,False,49,NONE,True,False,False,0.4736842105,0.1343283582,0.6666666667,0.4189944134,0.004445300957,0.995554699,0.0003930261983,0.0006283247775
"edit: here's the logs in tar.xz.gz (use gunzip, followed by tar xvf to unpack it): 
[FullTrace.tar.xz.gz] URL ",Investigation and Exploration,False,111,NONE,True,False,False,1.0,0.2835820896,0.8333333333,0.4245810056,0.004445300957,0.995554699,0.0003930261983,0.0006283247775
It's about 400+ MB unpacked.,Investigation and Exploration,False,28,NONE,True,False,False,0.2631578947,0.07462686567,1.0,0.4301675978,0.004445300957,0.995554699,0.0003930261983,0.0006283247775
A quick note: CODE alone fixes the problem as well.,Solution Discussion,True,51,NONE,True,False,False,1.0,0.1492537313,1.0,0.4357541899,0.004691773759,0.9953082262,0.0006283247775,0.0003766501067
When running CODE these are the files produced.,Investigation and Exploration,True,47,NONE,True,False,False,0.1777777778,0.1194029851,0.1666666667,0.4413407821,0.004839522201,0.9951604778,0.0003766501067,0.0006257390789
"You'll notice that unlike many other jit logs, compareAndSwapObject is actually compiled by the jitc.",Investigation and Exploration,False,101,NONE,True,False,False,0.3333333333,0.223880597,0.3333333333,0.4469273743,0.004839522201,0.9951604778,0.0003766501067,0.0006257390789
"Even though it's compiled, no trace is provided for some reason...",Investigation and Exploration,False,66,NONE,True,False,False,0.2444444444,0.1641791045,0.5,0.4525139665,0.004839522201,0.9951604778,0.0003766501067,0.0006257390789
"[CompareAndSwapObject.zip] URL 

edit: I've done a number of runs of this now.",Investigation and Exploration,False,80,NONE,True,False,False,0.3111111111,0.2089552239,0.6666666667,0.4581005587,0.004839522201,0.9951604778,0.0003766501067,0.0006257390789
"compareAndSwapObject never generates trace data, but it is **always** compiled by the JITC for my program under these settings.",Investigation and Exploration,False,127,NONE,True,False,False,0.4222222222,0.2835820896,0.8333333333,0.4636871508,0.004839522201,0.9951604778,0.0003766501067,0.0006257390789
"Considering the relative rarity of it before in my jit logs, I am almost certain that in-lining it was hanging the JITC and halting execution of my program (which is why i had abnormal cpu time devoted to a jit thread in my coredumps.",Investigation and Exploration,False,234,NONE,True,False,False,1.0,0.671641791,1.0,0.469273743,0.004839522201,0.9951604778,0.0003766501067,0.0006257390789
Thanks Mark - did the hang happen in that last run that you provided logs for?,Social Conversation,False,78,CONTRIBUTOR,False,False,False,1.0,0.223880597,1.0,0.4748603352,0.005084980712,0.9949150193,0.0006257390789,0.0002266795837
@JamesKingdon not at all.,Social Conversation,False,25,NONE,True,False,False,0.1428571429,0.05970149254,0.1666666667,0.4804469274,0.005173900255,0.9948260997,0.0002266795837,0.000261155566
The bench ran perfectly.,Investigation and Exploration,False,24,NONE,True,False,False,0.1428571429,0.05970149254,0.3333333333,0.4860335196,0.005173900255,0.9948260997,0.0002266795837,0.000261155566
"Also, I managed to finally get a tracefile for compareAndSwapObject.",Task Progress,False,68,NONE,True,False,False,0.3571428571,0.1492537313,0.5,0.4916201117,0.005173900255,0.9948260997,0.0002266795837,0.000261155566
[CompareAndSwapObjectWTrace.zip] URL,Task Progress,False,37,NONE,True,False,False,0.07142857143,0.02985074627,0.6666666667,0.4972067039,0.005173900255,0.9948260997,0.0002266795837,0.000261155566
I'm going to rerun the bench a bunch of times with CODE and see if I can't manage to get a trace for CODE with inlining enabled.,Investigation and Exploration,True,128,NONE,True,False,False,0.9642857143,0.4029850746,0.8333333333,0.5027932961,0.005173900255,0.9948260997,0.0002266795837,0.000261155566
"For some reason openJ9 doesn't seem to want to produce traces for it, considering only 1 run in 10 actually produced any trace despite all runs compiling it.",Investigation and Exploration,False,157,NONE,True,False,False,1.0,0.4179104478,1.0,0.5083798883,0.005173900255,0.9948260997,0.0002266795837,0.000261155566
"Yes, I'm not sure what's going on with the trace.",Investigation and Exploration,False,49,CONTRIBUTOR,False,False,False,0.303030303,0.1492537313,0.25,0.5139664804,0.005276343682,0.9947236563,0.000261155566,1.47e-05
"The CompareAndSwapObject.zip files you sent in showed several methods from sun/misc/Unsafe getting compiled that all should have matched the trace filter, and yet no output was present in the trace file.",Investigation and Exploration,False,203,CONTRIBUTOR,False,False,False,1.0,0.4925373134,0.5,0.5195530726,0.005276343682,0.9947236563,0.000261155566,1.47e-05
"I'm guessing it's some part of the way we handle Unsafe that's getting in the way, but I'll defer to Victor on that.",Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,0.696969697,0.3432835821,0.75,0.5251396648,0.005276343682,0.9947236563,0.000261155566,1.47e-05
I'm about to head out for the weekend - thanks for all the data!,Social Conversation,False,64,CONTRIBUTOR,False,False,False,0.3939393939,0.1940298507,1.0,0.530726257,0.005276343682,0.9947236563,0.000261155566,1.47e-05
Something very weird.,Social Conversation,False,21,CONTRIBUTOR,False,False,False,0.25,0.0447761194,0.5,0.5363128492,0.005282091334,0.9947179087,1.47e-05,0.0003370027271
I don't see any method involving compareAndSwapObject from the full trace log.,Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,1.0,0.1791044776,1.0,0.5418994413,0.005282091334,0.9947179087,1.47e-05,0.0003370027271
"Another environment variable might be worth trying: CODE
The reason why compareAndSwapObject was not shown in the log might be it was transformed by UnsafeFastPath.",Social Conversation,True,165,CONTRIBUTOR,False,False,False,1.0,0.3880597015,1.0,0.5474860335,0.005414287308,0.9945857127,0.0003370027271,0.0001990987978
Ok I'll give that a shot.,Social Conversation,False,25,NONE,True,False,False,0.3333333333,0.08955223881,0.3333333333,0.5530726257,0.005492387743,0.9945076123,0.0001990987978,0.0006886577466
"In the meantime though, I managed to get a trace of compareAndSwapObject with CODE
here you go:",Investigation and Exploration,True,96,NONE,True,False,False,1.0,0.2686567164,0.6666666667,0.5586592179,0.005492387743,0.9945076123,0.0001990987978,0.0006886577466
[CompareAndSwapInline.zip] URL,Investigation and Exploration,False,31,NONE,True,False,False,0.1111111111,0.02985074627,1.0,0.5642458101,0.005492387743,0.9945076123,0.0001990987978,0.0006886577466
"Unfortunately, CODE doesn't make compareAndSwapObject have a trace.",Investigation and Exploration,True,67,NONE,True,False,False,0.7272727273,0.1194029851,0.5,0.5698324022,0.005762527344,0.9942374727,0.0006886577466,0.2689971282
"Here's one of the jit logs + trace files...

[DisableUnsafeFastPath.zip] URL ",Social Conversation,False,79,NONE,True,False,False,1.0,0.1641791045,1.0,0.5754189944,0.005762527344,0.9942374727,0.0006886577466,0.2689971282
"Hey guys, good news!",Social Conversation,False,20,NONE,True,False,False,0.1428571429,0.05970149254,0.25,0.5810055866,0.1112819629,0.8887180371,0.2689971282,0.0008696566537
"It turns out this flaw is not in openj9 specifically, and is actually endemic to openjdk9!",Investigation and Exploration,False,90,NONE,True,False,False,0.5714285714,0.2388059701,0.5,0.5865921788,0.1112819629,0.8887180371,0.2689971282,0.0008696566537
"I think openj9 is just more likely to trigger it than hotspot jvms at the moment, but I managed to trigger the error running the benchmark on zulu9.",Investigation and Exploration,False,148,NONE,True,False,False,1.0,0.4179104478,0.75,0.5921787709,0.1112819629,0.8887180371,0.2689971282,0.0008696566537
So I guess I need to report this to the OpenJDK team!,Action on Issue,False,53,NONE,True,False,False,0.4285714286,0.1791044776,1.0,0.5977653631,0.1112819629,0.8887180371,0.2689971282,0.0008696566537
"Ah, that's good to know - thanks.",Social Conversation,False,33,CONTRIBUTOR,False,False,False,0.2857142857,0.08955223881,0.1428571429,0.6033519553,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
It raises really interesting questions about why the xjit: options we tried change the behaviour.,Investigation and Exploration,False,97,CONTRIBUTOR,False,False,False,0.7142857143,0.223880597,0.2857142857,0.6089385475,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
The most likely explanation is that it's a narrow window race condition and the options change the timing.,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,0.8571428571,0.2686567164,0.4285714286,0.6145251397,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
If you open an issue with OpenJDK please can you drop a link here?,Social Conversation,False,66,CONTRIBUTOR,False,False,False,0.6666666667,0.2089552239,0.5714285714,0.6201117318,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
I'd like to follow the progress.,Task Progress,False,32,CONTRIBUTOR,False,False,False,0.3333333333,0.1044776119,0.7142857143,0.625698324,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
"I started working on some low level tests to try and reproduce the problem, but haven't got very far as yet.",Social Conversation,False,108,CONTRIBUTOR,False,False,False,1.0,0.3134328358,0.8571428571,0.6312849162,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
"(Chances are I was looking in the wrong place, given your latest news!)",Social Conversation,False,71,CONTRIBUTOR,False,False,False,0.619047619,0.1940298507,1.0,0.6368715084,0.1116231029,0.8883768971,0.0008696566537,6.55e-05
"Hmm, actually there was a problem with my benchmark code that was triggering an issue that I mistook as the same.",Investigation and Exploration,False,113,NONE,True,False,False,1.0,0.3134328358,0.5,0.6424581006,0.1116487982,0.8883512018,6.55e-05,0.001260959053
Let me retest with the fixed code and make sure I'm still getting the same problems.,Testing,False,84,NONE,True,False,False,0.7619047619,0.2388059701,1.0,0.6480446927,0.1116487982,0.8883512018,6.55e-05,0.001260959053
@markehammons and @JamesKingdon just wanted to say thanks for helping to continue investigation on this issue.,Social Conversation,False,110,CONTRIBUTOR,False,False,False,0.4848484848,0.2388059701,0.3333333333,0.6536312849,0.1121434343,0.8878565657,0.001260959053,0.002111653916
I have certainly seen cases where different VMs/JITs are more or less prone to deadlocks etc due to subtle timing differences.,Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,0.6666666667,0.328358209,0.6666666667,0.6592178771,0.1121434343,0.8878565657,0.001260959053,0.002111653916
There could still be an OpenJ9 issue here so I look forward to seeing the next round of test results to see if they continue to point to a problem elsewhere or not...,Investigation and Exploration,False,166,CONTRIBUTOR,False,False,False,1.0,0.4925373134,1.0,0.6648044693,0.1121434343,0.8878565657,0.001260959053,0.002111653916
"So I want to make clear, this issue in my benchmark code was in a new bench I added to test a service I'm developing, and the bench OpenJ9 was failing on is untouched.",Task Progress,False,167,NONE,True,False,False,0.7083333333,0.5074626866,0.2,0.6703910615,0.1129717723,0.8870282277,0.002111653916,4.74e-05
"Since I fixed the new bench I have not seen the thread hang appear again, and the bench had a thread hang cause I threw an exception that was not caught and the benchmark code did not shut down the threading system upon close like it should have.",Task Progress,False,246,NONE,True,False,False,1.0,0.7164179104,0.4,0.6759776536,0.1129717723,0.8870282277,0.002111653916,4.74e-05
"Having fixed that issue, openjdk 9 is working as expected, while OpenJ9 still hangs on the first bench.",Observed Bug Behaviour,False,103,NONE,True,False,False,0.375,0.2686567164,0.6,0.6815642458,0.1129717723,0.8870282277,0.002111653916,4.74e-05
"So unfortunately, the issue **is** in fact related to OpenJ9.",Investigation and Exploration,False,61,NONE,True,False,False,0.2083333333,0.1492537313,0.8,0.687150838,0.1129717723,0.8870282277,0.002111653916,4.74e-05
Sorry to get your hopes up guys :(.,Social Conversation,False,35,NONE,True,False,False,0.1666666667,0.1194029851,1.0,0.6927374302,0.1129717723,0.8870282277,0.002111653916,4.74e-05
"No worries, I'll keep looking :)",Social Conversation,False,32,CONTRIBUTOR,False,False,False,1.0,0.08955223881,1.0,0.6983240223,0.1129903676,0.8870096324,4.74e-05,0.0002870125527
Tell me if your need more info.,Social Conversation,False,31,NONE,True,False,False,0.1842105263,0.1044776119,0.5,0.7039106145,0.113102954,0.886897046,0.0002870125527,0.0001456610252
I can even see if there's a way I can rig up a dummy system for the innards of this system so that I can provide you guys an open test case to poke at and use yourselves...,Contribution and Commitment,False,172,NONE,True,False,False,1.0,0.5671641791,1.0,0.7094972067,0.113102954,0.886897046,0.0002870125527,0.0001456610252
@markehammons thanks for the offer and we may well take you up on that.,Social Conversation,False,71,CONTRIBUTOR,False,False,False,0.35,0.2089552239,0.25,0.7150837989,0.1131600924,0.8868399076,0.0001456610252,0.002266795837
I think @JamesKingdon was thinking of just writing some small sample code and doing an inspection of the generated code for anything obvious and then trying some kind of small microbenchmark/test to see if we could provoke the problem.,Investigation and Exploration,False,235,CONTRIBUTOR,False,False,False,1.0,0.5970149254,0.5,0.7206703911,0.1131600924,0.8868399076,0.0001456610252,0.002266795837
If that doesn't work then we may need your help to try and dummy something up that can be used to help debug the problem.,Contribution and Commitment,False,121,CONTRIBUTOR,False,False,False,0.625,0.3731343284,0.75,0.7262569832,0.1131600924,0.8868399076,0.0001456610252,0.002266795837
Thanks again for bringing this to our attention and for helping with the problem determination.,Social Conversation,False,95,CONTRIBUTOR,False,False,False,0.375,0.223880597,1.0,0.7318435754,0.1131600924,0.8868399076,0.0001456610252,0.002266795837
"@andrewcraik here's a reduced version of the bench that still triggers the bug, but doesn't rely on our servers (cept for the build, but that's fine)",Bug Reproduction,False,149,NONE,True,False,False,1.0,0.3880597015,0.5,0.7374301676,0.1140492878,0.8859507122,0.002266795837,0.0009299896227
"https://github.com/markehammons/OpenJ9Issue

You'll need sbt to build and run it, which you can get [here] URL ",Social Conversation,False,113,NONE,True,False,False,0.6153846154,0.2388059701,1.0,0.7430167598,0.1140492878,0.8859507122,0.002266795837,0.0009299896227
"Got it, investigating.",Social Conversation,False,22,CONTRIBUTOR,False,False,False,1.0,0.0447761194,0.5,0.748603352,0.1144140946,0.8855859054,0.0009299896227,0.0003094219412
Many thanks.,Social Conversation,False,12,CONTRIBUTOR,False,False,False,0.6666666667,0.02985074627,1.0,0.7541899441,0.1144140946,0.8855859054,0.0009299896227,0.0003094219412
"This is the expected failure behaviour?
>>>[info] # Run progress: 0.00% complete, ETA 00:37:00
[info] # Fork: 1 of 3
[info] # Warmup Iteration   1: <failure>",Expected Behaviour,False,160,CONTRIBUTOR,False,False,False,1.0,0.4029850746,0.5,0.7597765363,0.1145354715,0.8854645285,0.0003094219412,0.0001922036014
[info] java.util.concurrent.TimeoutException: Futures timed out after [20000 milliseconds],Observed Bug Behaviour,False,90,CONTRIBUTOR,False,False,False,0.3333333333,0.1343283582,1.0,0.7653631285,0.1145354715,0.8854645285,0.0003094219412,0.0001922036014
"Yes, the system will timeout if it doesn't receive a response in 20 seconds.",Investigation and Exploration,False,76,NONE,True,False,False,0.3888888889,0.2089552239,0.1428571429,0.7709497207,0.1146108671,0.8853891329,0.0001922036014,0.0001353182306
"CODE makes it run properly, but CODE on CODE doesn't solve the issue anymore.",Solution Discussion,True,77,NONE,True,False,False,0.3888888889,0.2089552239,0.5714285714,0.7877094972,0.1146108671,0.8853891329,0.0001922036014,0.0001353182306
Maybe it's revealing other bugs?,Investigation and Exploration,False,32,NONE,True,False,False,0.1388888889,0.07462686567,0.7142857143,0.7932960894,0.1146108671,0.8853891329,0.0001922036014,0.0001353182306
This is a lot more stress on the jvm than the old one since I use dummy methods that take around CODE instead of CODE,Solution Discussion,True,117,NONE,True,False,False,0.6944444444,0.3731343284,0.8571428571,0.7988826816,0.1146108671,0.8853891329,0.0001922036014,0.0001353182306
"In any case,  openjdk9 runs the bench without issue.",Solution Discussion,False,52,NONE,True,False,False,0.2777777778,0.1492537313,1.0,0.8044692737,0.1146108671,0.8853891329,0.0001922036014,0.0001353182306
"Great, this should be a big help.",Social Conversation,False,33,CONTRIBUTOR,False,False,False,1.0,0.1044776119,1.0,0.8100558659,0.1146639484,0.8853360516,0.0001353182306,0.0009687751028
"Likewise, if you disable inlining of compareAndSwapObject the issue should disappear.",Solution Discussion,False,85,CONTRIBUTOR,False,False,False,0.2972972973,0.1641791045,0.2,0.8156424581,0.1150439695,0.8849560305,0.0009687751028,0.0002215081863
"-Xnojit makes it run properly, but -Xjit:dontInline on sun.misc.",Solution Discussion,False,64,CONTRIBUTOR,False,False,False,0.2702702703,0.1492537313,0.4,0.8212290503,0.1150439695,0.8849560305,0.0009687751028,0.0002215081863
Unsafe* doesn't solve the issue anymore.,Solution Discussion,False,40,CONTRIBUTOR,False,False,False,0.1621621622,0.08955223881,0.6,0.8268156425,0.1150439695,0.8849560305,0.0009687751028,0.0002215081863
"I confirmed that disabling inlining of compareAndSwapObject makes the test pass for me, as does disabling inlining on the Unsafe class, which must include the compareAndSwapObject method.",Solution Discussion,False,187,CONTRIBUTOR,False,False,False,0.7297297297,0.4029850746,0.8,0.8324022346,0.1150439695,0.8849560305,0.0009687751028,0.0002215081863
"It might be a test environment difference, but the syntax on the filters is finicky, so possibly a typo crept in to your run? CODE
Victor just dropped by and gave me an idea to test...",Solution Discussion,True,185,CONTRIBUTOR,False,False,False,1.0,0.552238806,1.0,0.8379888268,0.1150439695,0.8849560305,0.0009687751028,0.0002215081863
"You're right, i forgot to use CODE for the package names instead of CODE",Social Conversation,True,72,NONE,True,False,False,1.0,0.2089552239,0.5,0.843575419,0.1151308605,0.8848691395,0.0002215081863,0.06580775503
👎,Social Conversation,False,1,NONE,True,False,False,0.07142857143,0.01492537313,1.0,0.8491620112,0.1151308605,0.8848691395,0.0002215081863,0.06580775503
"The Akka framework uses Unsafe extensively, making this an excellent stress test for those parts of Unsafe that are used for implementing synchronization primitives.",Investigation and Exploration,False,165,CONTRIBUTOR,False,False,False,0.8,0.3582089552,0.25,0.8547486034,0.1409452519,0.8590547481,0.06580775503,0.4477852629
Unfortunately it means we have a lot of code to look at to figure out what's going on.,Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,0.6,0.2686567164,0.5,0.8603351955,0.1409452519,0.8590547481,0.06580775503,0.4477852629
"I'm trying to narrow it down by looking for methods that were jit compiled with compareAndSwapObject inlined during the hanging case, but my first choice didn't turn up anything interesting.",Investigation and Exploration,False,190,CONTRIBUTOR,False,False,False,1.0,0.447761194,0.75,0.8659217877,0.1409452519,0.8590547481,0.06580775503,0.4477852629
Moving on to the next one...,Task Progress,False,28,CONTRIBUTOR,False,False,False,0.2,0.08955223881,1.0,0.8715083799,0.1409452519,0.8590547481,0.06580775503,0.4477852629
"OK, there have been a few more twists and turns along the path than I was expecting, but I think we're getting closer to the answer now.",Task Progress,False,136,CONTRIBUTOR,False,False,False,0.84375,0.4029850746,0.08333333333,0.8770949721,0.3165978639,0.6834021361,0.4477852629,0.1312948834
I have a working prototype fix,Solution Discussion,False,30,CONTRIBUTOR,False,False,False,0.1875,0.08955223881,0.1666666667,0.8826815642,0.3165978639,0.6834021361,0.4477852629,0.1312948834
and I just need to flesh out the details to make it real.,Task Progress,False,57,CONTRIBUTOR,False,False,False,0.40625,0.1940298507,0.25,0.8882681564,0.3165978639,0.6834021361,0.4477852629,0.1312948834
"The problem is around the fact that in Java9 the sun.misc.Unsafe implementation was moved to the jdk.internal.misc package, with a set of wrappers remaining in sun.misc.Unsafe for compatibility.",Investigation and Exploration,False,194,CONTRIBUTOR,False,False,False,0.9375,0.447761194,0.3333333333,0.8938547486,0.3165978639,0.6834021361,0.4477852629,0.1312948834
The JIT recognises most of the methods in Unsafe so that it can generate fast inline equivalents instead of making expensive JNI calls.,Investigation and Exploration,False,135,CONTRIBUTOR,False,False,False,0.71875,0.3432835821,0.4166666667,0.8994413408,0.3165978639,0.6834021361,0.4477852629,0.1312948834
For Java9 it has been updated to recognise the Unsafe methods in both the old and new packages.,Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.5625,0.2686567164,0.5,0.905027933,0.3165978639,0.6834021361,0.4477852629,0.1312948834
"For most of the methods this is working as expected, but in a small number of cases there is some additional complexity that got overlooked.",Investigation and Exploration,False,140,CONTRIBUTOR,False,False,False,0.78125,0.3731343284,0.5833333333,0.9106145251,0.3165978639,0.6834021361,0.4477852629,0.1312948834
"The issue is that it was sometimes assumed that the Unsafe method was a JNI call, which is no longer true for the wrapper methods that remain in sun.misc.Unsafe..",Investigation and Exploration,False,162,CONTRIBUTOR,False,False,False,0.96875,0.4626865672,0.6666666667,0.9162011173,0.3165978639,0.6834021361,0.4477852629,0.1312948834
This resulted in both a performance issue (the Unsafe call didn't get properly optimised) and the functional problem that causes the test to hang.,Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,0.75,0.3582089552,0.75,0.9217877095,0.3165978639,0.6834021361,0.4477852629,0.1312948834
"So far it looks like the problem only occurs with the compareAndSwap calls, but I'll be doing some additional testing to verify that.",Investigation and Exploration,False,133,CONTRIBUTOR,False,False,False,0.71875,0.3432835821,0.8333333333,0.9273743017,0.3165978639,0.6834021361,0.4477852629,0.1312948834
The fix is to work through the various places that deal with the Unsafe methods and add a test to differentiate between the implementation classes (the JNI methods) and the wrappers.,Solution Discussion,False,182,CONTRIBUTOR,False,False,False,0.96875,0.4626865672,0.9166666667,0.9329608939,0.3165978639,0.6834021361,0.4477852629,0.1312948834
We'd like the same code to work both for Java8 classes (impl in sun.misc) and Java9 (impl in jdk.internal.misc)) which makes it a little more fiddly than it would otherwise be.,Solution Discussion,False,176,CONTRIBUTOR,False,False,False,1.0,0.4776119403,1.0,0.938547486,0.3165978639,0.6834021361,0.4477852629,0.1312948834
Thanks for your hard work @JamesKingdon!,Social Conversation,False,40,NONE,True,False,False,0.375,0.08955223881,0.5,0.9441340782,0.3681008747,0.6318991253,0.1312948834,1.0
I look forward to switching back to openj9 as the JVM for my development system! 👍,Task Progress,False,82,NONE,True,False,False,1.0,0.2388059701,1.0,0.9497206704,0.3681008747,0.6318991253,0.1312948834,1.0
"Hi Mark, just to update the status - I'm waiting on the two PRs to work their way through the build/test hierarchy and finally appear on adoptopenjdk.net. Once there is a build available I'll download, test it and update this issue again.",Task Progress,False,238,CONTRIBUTOR,False,False,False,1.0,0.6268656716,1.0,0.9553072626,0.7603706221,0.2396293779,1.0,0.07147905412
@r30shah this may be of interest to you.,Social Conversation,False,40,CONTRIBUTOR,False,False,False,1.0,0.1194029851,1.0,0.9608938547,0.7884096926,0.2115903074,0.07147905412,0.3605162089
Looks like AdoptOpenJDK has been having infrastructure problems recently - no new builds since November 6th.,Social Conversation,False,108,CONTRIBUTOR,False,False,False,0.8333333333,0.223880597,0.5,0.9664804469,0.9298292948,0.07017070524,0.3605162089,0.1542127927
"I've seen some discussions on the Adopt Slack channels, so hopefully things will get unblocked fairly soon.",Social Conversation,False,107,CONTRIBUTOR,False,False,False,1.0,0.2686567164,1.0,0.9720670391,0.9298292948,0.07017070524,0.3605162089,0.1542127927
"@markehammons Good news, the build is available on AdoptOpenJDK at https://adoptopenjdk.net/nightly.html?variant=openjdk9-openj9
The build is dated 16 November 2017 and the filename is OpenJDK9-OPENJ9_x64_Linux_20171611.tar.gz.",Social Conversation,False,228,CONTRIBUTOR,False,False,False,1.0,0.3582089552,0.3333333333,0.9776536313,0.990322308,0.009677692014,0.1542127927,0.02467101294
I've downloaded it and confirmed that it doesn't hang with the test case you provided.,Testing,False,86,CONTRIBUTOR,False,False,False,0.6666666667,0.2388059701,0.6666666667,0.9832402235,0.990322308,0.009677692014,0.1542127927,0.02467101294
Many thanks for helping us fix this problem.,Social Conversation,False,44,CONTRIBUTOR,False,False,False,0.3333333333,0.1194029851,1.0,0.9888268156,0.990322308,0.009677692014,0.1542127927,0.02467101294
I've also confirmed that it no longer hangs in the full version of the bench.,Solution Discussion,False,77,NONE,True,False,True,1.0,0.2388059701,0.5,0.9944134078,1.0,0.0,0.02467101294,0.0
Thanks for the hard work @JamesKingdon 👍,Social Conversation,False,40,NONE,True,False,True,0.4375,0.1044776119,1.0,1.0,1.0,0.0,0.02467101294,0.0
"jdk_util_1_FAILED NullPointerException: Cannot invoke ""java.lang.invoke.MethodHandleImpl$IntrinsicMethodHandle.<init>(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandleImpl$Intrinsic)""",Observed Bug Behaviour,False,194,MEMBER,True,True,False,0.25,0.1086956522,0.5,0.006289308176,0.0,1.0,0.0,0.005412926547
"Failure link
------------

From an internal build CODE (CODE):
CODE
[Rerun in Grinder] URL 

Optional info
-------------

Failure output (captured from console output)
---------------------------------------------
CODE

30x grinder at CODE.",Testing,True,254,MEMBER,True,True,False,1.0,0.4347826087,1.0,0.01257861635,0.0,1.0,0.0,0.005412926547
"Also observed at https://openj9-jenkins.osuosl.org/job/Test_openjdk16_j9_sanity.openjdk_s390x_linux_Nightly/49/consoleFull
CODECODEmain' threw exception: java.lang.BootstrapMethodError: bootstrap method initialization exception
23:10:08  --------------------------------------------------
23:11:35  Test results: passed: 41; failed: 1
23:11:35  Report written to /home/jenkins/workspace/Test_openjdk16_j9_sanity.openjdk_s390x_linux_Nightly/jvmtest/openjdk/report/html/report.html
23:11:35  Results written to /home/jenkins/workspace/Test_openjdk16_j9_sanity.openjdk_s390x_linux_Nightly/aqa-tests/TKG/output_16260563457690/jdk_math_0/work
23:11:35  Error: Some tests failed or other problems occurred.",Bug Reproduction,True,706,MEMBER,True,False,False,1.0,0.75,0.5,0.01886792453,0.00174965029,0.9982503497,0.005412926547,0.0412638732
@tajila fyi.,Contribution and Commitment,False,12,CONTRIBUTOR,False,False,False,0.5,0.02173913043,0.5,0.03144654088,0.01508760104,0.984912399,0.0412638732,0.0001283837294
Likely OJKD MH related?,Investigation and Exploration,False,23,CONTRIBUTOR,False,False,False,1.0,0.04347826087,1.0,0.03773584906,0.01508760104,0.984912399,0.0412638732,0.0001283837294
This is MH enabled internal build like https://github.com/eclipse-openj9/openj9/issues/13164 and a few others.,Investigation and Exploration,False,110,MEMBER,True,False,False,1.0,0.1304347826,1.0,0.04402515723,0.01512909923,0.9848709008,0.0001283837294,0.0002248813038
@fengxue-IS another NPE,Investigation and Exploration,False,23,CONTRIBUTOR,False,False,False,1.0,0.04347826087,1.0,0.05031446541,0.01520178886,0.9847982111,0.0002248813038,0.5034978273
"Just note it is observed in recent JDK16 build at CODE
CODECODEmain' threw exception: java.lang.BootstrapMethodError: bootstrap method initialization exception
19:56:31  --------------------------------------------------
20:07:25  Test results: passed: 868; failed: 1
20:07:43  Report written to /home/jenkins/workspace/Test_openjdk16_j9_sanity.openjdk_x86-64_linux_Personal/jvmtest/openjdk/report/html/report.html
20:07:43  Results written to /home/jenkins/workspace/Test_openjdk16_j9_sanity.openjdk_x86-64_linux_Personal/aqa-tests/TKG/output_16293246664264/jdk_util_0/work
20:07:43  Error: Some tests failed or other problems occurred.
20:07:43  
20:07:43  jdk_util_0_FAILED
CODE`
[Re-run the Grinder] URL ",Testing,True,718,MEMBER,True,False,False,1.0,1.0,1.0,0.05660377358,0.177950186,0.822049814,0.5034978273,0.2801321228
"Test passed with latest JDK17 Nightly build
**java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java**
20/20 passed x86-64_linux CODE
20/20 passed x86-64_windows CODE",Testing,True,189,CONTRIBUTOR,False,False,False,1.0,0.3152173913,0.5,0.06289308176,0.2684988468,0.7315011532,0.2801321228,0.116554805
"**java/math/BigInteger/PrimeTest.java**
20/20 passed s390_linux CODE

Closing this issue (re-open if failure seen again)",Action on Issue,True,123,CONTRIBUTOR,False,False,False,0.6551724138,0.2065217391,1.0,0.06918238994,0.2684988468,0.7315011532,0.2801321228,0.116554805
"Observed in JDK17 CODE release at CODE
CODECODEmain' threw exception: java.lang.BootstrapMethodError: bootstrap method initialization exception
11:36:46  --------------------------------------------------
11:47:44  Test results: passed: 885; failed: 1
11:47:51  Report written to /home/jenkins/workspace/Test_openjdk17_j9_sanity.openjdk_s390x_linux_Personal/jvmtest/openjdk/report/html/report.html
11:47:51  Results written to /home/jenkins/workspace/Test_openjdk17_j9_sanity.openjdk_s390x_linux_Personal/aqa-tests/TKG/output_16317110381189/jdk_util_1/work
11:47:51  Error: Some tests failed or other problems occurred.
11:47:51  
11:47:51  jdk_util_1_FAILED
CODE`
Re-open.",Testing,True,683,MEMBER,True,False,False,1.0,0.902173913,0.5,0.07547169811,0.3061735033,0.6938264967,0.116554805,0.06814608357
fyi @fengxue-IS,Contribution and Commitment,False,15,MEMBER,True,False,False,0.03614457831,0.03260869565,1.0,0.08176100629,0.3061735033,0.6938264967,0.116554805,0.06814608357
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_x86-64_windows_Nightly/29
jdk_util_0
-Xdump:system:none -Xdump:heap:none -Xdump:system:events=gpf+abort+traceassert+corruptcache -XX:+UseCompressedOops
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java
CODE",Testing,True,306,CONTRIBUTOR,False,False,False,1.0,0.2934782609,1.0,0.08805031447,0.3282007401,0.6717992599,0.06814608357,0.0002148119917
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_x86-64_mac_Release/5
jdk_util_1
-Xdump:system:none -Xdump:heap:none -Xdump:system:events=gpf+abort+traceassert+corruptcache -XX:-UseCompressedOops
java/util/stream/test/org/openjdk/tests/java/util/stream/CountLargeTest.java
CODE",Testing,True,303,CONTRIBUTOR,False,False,False,1.0,0.3152173913,1.0,0.09433962264,0.328270175,0.671729825,0.0002148119917,0.01518116622
"@fengxue-IS Can you take a look, its been upgraded to blocker",Contribution and Commitment,False,61,CONTRIBUTOR,False,False,False,1.0,0.1304347826,1.0,0.1006289308,0.3331772676,0.6668227324,0.01518116622,0.01472771154
"I tried running grinders using a custom build with more debug info printed, and I was not able to reproduce the failure.",Bug Reproduction,False,120,CONTRIBUTOR,False,False,False,0.8461538462,0.2391304348,0.5,0.106918239,0.3379377875,0.6620622125,0.01472771154,0.01482991505
"100/100 passed for s390_linux CODE
100/100 passed for mac_osx CODE
50/50 passed for x86-64_window CODE
Will try reproducing using stock nightly build.",Testing,True,153,CONTRIBUTOR,False,False,False,1.0,0.2826086957,1.0,0.1132075472,0.3379377875,0.6620622125,0.01472771154,0.01482991505
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_ppc64le_linux_Nightly/32
jdk_util_1
-Xdump:system:none -Xdump:heap:none -Xdump:system:events=gpf+abort+traceassert+corruptcache -XX:-UseCompressedOops
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java

https://openj9-artifactory.osuosl.org/artifactory/ci-openj9/Test/Test_openjdk17_j9_sanity.openjdk_ppc64le_linux_Nightly/32/openjdk_test_output.tar.gz
CODE",Testing,True,458,CONTRIBUTOR,False,False,False,1.0,0.3152173913,1.0,0.1194968553,0.3427313433,0.6572686567,0.01482991505,0.0002941917355
"50x using nightly build for each platform also passed, I assume this can only be reproduced when running entire suite, will try running the entire CODE and CODE in grinder.",Testing,True,172,CONTRIBUTOR,False,False,False,0.6818181818,0.3260869565,0.3333333333,0.1257861635,0.3428264365,0.6571735635,0.0002941917355,0.001046537172
"I also inspected the bytecode at which the NPE is thrown:
CODE

CODE",Investigation and Exploration,True,71,CONTRIBUTOR,False,False,False,0.3409090909,0.1630434783,0.6666666667,0.1320754717,0.3428264365,0.6571735635,0.0002941917355,0.001046537172
"The exception message seem to suggest that the receiver created by CODE bytecode is null, which I don't think is possible from VM code without triggering other exceptions, will have to look at a core dump at the exception point to confirm the issue",Investigation and Exploration,True,248,CONTRIBUTOR,False,False,False,1.0,0.4782608696,1.0,0.1383647799,0.3428264365,0.6571735635,0.0002941917355,0.001046537172
"Caused by: java.lang.NullPointerException: Cannot invoke ""java.lang.invoke.MethodHandleImpl$IntrinsicMethodHandle.<init(java.lang.invoke.",Investigation and Exploration,False,137,MEMBER,True,False,False,0.4090909091,0.09782608696,0.1,0.1446540881,0.3431647145,0.6568352855,0.001046537172,0.001139510487
"MethodHandle, java.lang.invoke.MethodHandleImpl$Intrinsic)""
at java.base/java.lang.invoke.MethodHandleImpl.makeIntrinsic(MethodHandleImpl.java:1310)",Investigation and Exploration,False,149,MEMBER,True,False,False,0.2727272727,0.0652173913,0.2,0.1509433962,0.3431647145,0.6568352855,0.001046537172,0.001139510487
"This NPE message indicated that CODE failed at [1], ~which is odd because the line throwing NPE is a CODE method call.",Investigation and Exploration,True,118,MEMBER,True,False,False,1.0,0.2391304348,0.3,0.1572327044,0.3431647145,0.6568352855,0.001046537172,0.001139510487
It appears somehow it was treated as CODE method invocation and the object CODE caused NPE.~,Investigation and Exploration,True,92,MEMBER,True,False,False,0.7272727273,0.1739130435,0.4,0.1635220126,0.3431647145,0.6568352855,0.001046537172,0.001139510487
**Edit,Investigation and Exploration,False,6,MEMBER,True,False,False,0.04545454545,0.01086956522,0.5,0.1698113208,0.3431647145,0.6568352855,0.001046537172,0.001139510487
":** Looked at wrong line, NPE occurred at CODE.",Investigation and Exploration,True,47,MEMBER,True,False,False,0.4090909091,0.09782608696,0.6,0.1761006289,0.3431647145,0.6568352855,0.001046537172,0.001139510487
The exception message states CODE can't be invoked but w/o what was CODE due to lack of details during NPE message generation.,Investigation and Exploration,True,126,MEMBER,True,False,False,1.0,0.2391304348,0.7,0.1823899371,0.3431647145,0.6568352855,0.001046537172,0.001139510487
"Assuming the NPE was at 
CODE",Investigation and Exploration,True,30,MEMBER,True,False,False,0.3181818182,0.07608695652,0.8,0.1886792453,0.3431647145,0.6568352855,0.001046537172,0.001139510487
"Yeah, it does suggest the receiver was CODE.",Investigation and Exploration,True,44,MEMBER,True,False,False,0.3636363636,0.08695652174,0.9,0.1949685535,0.3431647145,0.6568352855,0.001046537172,0.001139510487
[1] https://github.com/ibmruntimes/openj9-openjdk-jdk/blob/6bf156ad9ad45ecbce48f67039a2f1aafdce3348/src/java.base/share/classes/java/lang/invoke/MethodHandleImpl.java#L1310,Investigation and Exploration,False,172,MEMBER,True,False,False,0.09090909091,0.02173913043,1.0,0.2012578616,0.3431647145,0.6568352855,0.001046537172,0.001139510487
This was tagged vm since vm was looking.,Action on Issue,False,40,CONTRIBUTOR,False,False,False,0.6666666667,0.08695652174,0.5,0.2075471698,0.3435330448,0.6564669552,0.001139510487,7.64e-05
I'll tag jit since indications are looking more like a jit problem.,Action on Issue,False,67,CONTRIBUTOR,False,False,False,1.0,0.1304347826,1.0,0.213836478,0.3435330448,0.6564669552,0.001139510487,7.64e-05
"10/10 passed on s390-linux for entire jdk_util_1 suite (CODE), this seem hard to reproduce individually on grinder, is there any setup differences between grinder vs sanity.openjdk target?",Testing,True,188,CONTRIBUTOR,False,False,False,1.0,0.3043478261,1.0,0.2201257862,0.3435577268,0.6564422732,7.64e-05,0.0001805763305
"10/10 passed on s390-linux for entire jdk_util_1 suite (Test_grinder/job/Grinder/18363), 

I think larger grinder is required.",Investigation and Exploration,False,128,MEMBER,True,False,False,1.0,0.2065217391,0.5,0.2264150943,0.3436160955,0.6563839045,0.0001805763305,1.59e-05
This NPE appeared once out of 35 CODE runs at https://github.com/eclipse-openj9/openj9/issues/13370#issuecomment-925742840,Investigation and Exploration,True,122,MEMBER,True,False,False,0.5789473684,0.1195652174,1.0,0.2327044025,0.3436160955,0.6563839045,0.0001805763305,1.59e-05
"10/10 passed on s390-linux for entire jdk_util_1 suite (Test_grinder/job/Grinder/18363),
 
 I think larger grinder is required.",Investigation and Exploration,False,129,CONTRIBUTOR,False,False,False,1.0,0.2065217391,0.3333333333,0.2389937107,0.3436212488,0.6563787512,1.59e-05,0.05801551647
This NPE appeared once out of 35 CODE runs at [#13370 (comment)](https://github.com/eclipse-openj9/openj9/issues/13370#issuecomment-925742840),Investigation and Exploration,True,142,CONTRIBUTOR,False,False,False,0.8421052632,0.1739130435,0.6666666667,0.2452830189,0.3436212488,0.6563787512,1.59e-05,0.05801551647
Any conclusions from the 50x grinder?,Task Progress,False,37,CONTRIBUTOR,False,False,False,1.0,0.0652173913,1.0,0.2578616352,0.3623739262,0.6376260738,0.05801551647,0.0112234231
"I got 2 failures running a 60x grinder, but I was not able to get a core file using CODE
still trying to get a core from grinder",Bug Reproduction,True,129,CONTRIBUTOR,False,False,False,1.0,0.3152173913,1.0,0.2641509434,0.3660017355,0.6339982645,0.0112234231,0.0001080772833
Instead of CODE use CODE.,Investigation and Exploration,True,25,CONTRIBUTOR,False,False,False,0.4166666667,0.05434782609,0.3333333333,0.2704402516,0.36603667,0.63396333,0.0001080772833,4.77e-05
I believe CODE is only triggered for exceptions the JVM throws internally.,Investigation and Exploration,True,74,CONTRIBUTOR,False,False,False,1.0,0.1304347826,0.6666666667,0.2767295597,0.36603667,0.63396333,0.0001080772833,4.77e-05
This will not apply to MH JCL code.,Investigation and Exploration,False,35,CONTRIBUTOR,False,False,False,0.6666666667,0.08695652174,1.0,0.2830188679,0.36603667,0.63396333,0.0001080772833,4.77e-05
the stacktrace suggests that the NPE exception comes from internal handler of CODE so I don't think CODE apply?,Investigation and Exploration,True,111,CONTRIBUTOR,False,False,False,0.95,0.2065217391,0.3333333333,0.2893081761,0.3660520758,0.6339479242,4.77e-05,0.0001236847171
ie. CODE doesn't have any java code that throw an exception.,Investigation and Exploration,True,60,CONTRIBUTOR,False,False,False,0.55,0.1195652174,0.6666666667,0.2955974843,0.3660520758,0.6339479242,4.77e-05,0.0001236847171
"but the NPE did get caught by JCL code and wrapped into a CODE, would that affect how xdump work?",Investigation and Exploration,True,97,CONTRIBUTOR,False,False,False,1.0,0.2173913043,1.0,0.3018867925,0.3660520758,0.6339479242,4.77e-05,0.0001236847171
the stacktrace suggests that the NPE exception comes from internal handler of invokespecial so I don't think throw apply?,Investigation and Exploration,False,121,CONTRIBUTOR,False,False,False,1.0,0.2065217391,0.3333333333,0.3081761006,0.3660920551,0.6339079449,0.0001236847171,0.0002473694342
If its thrown by the bytecodeinterpreter CODE target only CODE will trigger it.,Investigation and Exploration,True,79,CONTRIBUTOR,False,False,False,0.6842105263,0.1413043478,0.6666666667,0.3144654088,0.3660920551,0.6339079449,0.0001236847171,0.0002473694342
"So in the case of invokeSpecial, you should use CODE

CODE will be triggered by things like CODE",Investigation and Exploration,True,98,CONTRIBUTOR,False,False,False,1.0,0.2065217391,1.0,0.320754717,0.3660920551,0.6339079449,0.0001236847171,0.0002473694342
I think the package separator is CODE instead of CODE for CODE.,Investigation and Exploration,True,63,MEMBER,True,False,False,1.0,0.1304347826,0.3333333333,0.3270440252,0.3661720137,0.6338279863,0.0002473694342,0.0008075588312
"In addition, CODE can catch both scenarios just in case.",Investigation and Exploration,True,56,MEMBER,True,False,False,0.8333333333,0.1086956522,0.6666666667,0.3333333333,0.3661720137,0.6338279863,0.0002473694342,0.0008075588312
A sample option looks like CODE,Investigation and Exploration,True,31,MEMBER,True,False,False,0.5,0.0652173913,1.0,0.3396226415,0.3661720137,0.6338279863,0.0002473694342,0.0008075588312
fyi the web helper to build -Xdump options https://www.eclipse.org/openj9/tools/xdump_option_builder.html,Investigation and Exploration,False,105,CONTRIBUTOR,False,False,False,1.0,0.09782608696,1.0,0.3459119497,0.3664330454,0.6335669546,0.0008075588312,0.01162451737
"Observed in JDK17 head build at CODE
CODE",Testing,True,42,MEMBER,True,False,False,1.0,0.09782608696,1.0,0.3522012579,0.3701905027,0.6298094973,0.01162451737,0.1016715226
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_x86-64_linux_Nightly/43
jdk_util_1
-Xdump:system:none -Xdump:heap:none -Xdump:system:events=gpf+abort+traceassert+corruptcache -XX:-UseCompressedOops
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java
CODE",Testing,True,304,CONTRIBUTOR,False,False,False,1.0,0.2934782609,1.0,0.358490566,0.4030543532,0.5969456468,0.1016715226,0.09102607801
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_s390x_linux_Release/8
jdk_util_0
-Xdump:system:none -Xdump:heap:none -Xdump:system:events=gpf+abort+traceassert+corruptcache -XX:+UseCompressedOops
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java
CODE",Testing,True,302,CONTRIBUTOR,False,False,False,1.0,0.2934782609,1.0,0.3647798742,0.4324772176,0.5675227824,0.09102607801,0.08317436407
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_ppc64_aix_Nightly/52
jdk_util_0 -Xdump:system:none -Xdump:heap:none -Xdump:system:events=gpf+abort+traceassert+corruptcache -XX:+UseCompressedOops 
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java
CODE",Testing,True,301,CONTRIBUTOR,False,False,False,1.0,0.2826086957,1.0,0.3710691824,0.459362129,0.540637871,0.08317436407,0.01375082044
"An occurrence at JDK17 CODE release CODE (CODE)
CODECODEmain' threw exception: java.lang.BootstrapMethodError: bootstrap method initialization exception

22:21:42  Test results: passed: 885; failed: 1
22:21:42  Report written to /home/jenkins/workspace/Test_openjdk17_j9_sanity.openjdk_x86-64_linux_Personal/jvmtest/openjdk/report/html/report.html
22:21:42  Results written to /home/jenkins/workspace/Test_openjdk17_j9_sanity.openjdk_x86-64_linux_Personal/aqa-tests/TKG/output_16346072337595/jdk_util_0/work
22:21:42  Error: Some tests failed or other problems occurred.
22:21:42  
22:21:42  jdk_util_0_FAILED
CODE`",Testing,True,624,MEMBER,True,False,False,1.0,0.8586956522,1.0,0.3773584906,0.463806883,0.536193117,0.01375082044,0.004763623737
"I was able to get the stackslot from cores generated by -Xdump on NPE thrown from CODE, based on the core dump which came from bytecode frame, it suggests that the error occurred in CODE function.",Investigation and Exploration,True,196,CONTRIBUTOR,False,False,False,1.0,0.3913043478,0.3333333333,0.3836477987,0.4653466555,0.5346533445,0.004763623737,0.09933594565
I've tried to add printf to provide more data during the execution on where exactly the NPE is generated (ie. which of initialSpecialMethod / resolveSpecialMethodRef / invokeSpecialLogic / etc),Investigation and Exploration,False,193,CONTRIBUTOR,False,False,False,0.75,0.2934782609,0.6666666667,0.3899371069,0.4653466555,0.5346533445,0.004763623737,0.09933594565
"After adding the printfs so far I have not been able to reproduce this issue on xlinux with 80x grinder

CODE",Bug Reproduction,True,111,CONTRIBUTOR,False,False,False,0.6111111111,0.2391304348,1.0,0.3962264151,0.4653466555,0.5346533445,0.004763623737,0.09933594565
"<229600         Method: java/lang/invoke/MethodHandleImpl.makeIntrinsic(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/MethodHandleImpl$Intrinsic;)Ljava/lang/invoke/MethodHandle; !j9method 0x0000000000151F50
<229600         Bytecode index = 10
<229600",Investigation and Exploration,False,268,MEMBER,True,False,False,0.6444444444,0.3152173913,0.1666666667,0.4025157233,0.4974555645,0.5025444355,0.09933594565,0.0006447716188
"Using local mapper
<229600> 	Locals starting at 0x00000000002779E8 for 0x0000000000000003 slots
<229600> 		I-Slot: a0[0x00000000002779E8] = 0x0000000000000000

The incoming CODE is CODE, this can cause CODE at [1],
CODE
It seems the CODE was reported at CODE
CODE",Investigation and Exploration,True,270,MEMBER,True,False,False,1.0,0.4891304348,0.3333333333,0.4088050314,0.4974555645,0.5025444355,0.09933594565,0.0006447716188
Maybe because of inlining?,Investigation and Exploration,False,26,MEMBER,True,False,False,0.08888888889,0.04347826087,0.5,0.4150943396,0.4974555645,0.5025444355,0.09933594565,0.0006447716188
"The CODE is from [2]
CODE",Investigation and Exploration,True,26,MEMBER,True,False,False,0.1555555556,0.07608695652,0.6666666667,0.4213836478,0.4974555645,0.5025444355,0.09933594565,0.0006447716188
So CODE somehow becomes CODE?,Investigation and Exploration,True,29,MEMBER,True,False,False,0.1111111111,0.05434782609,0.8333333333,0.427672956,0.4974555645,0.5025444355,0.09933594565,0.0006447716188
"[1] https://github.com/ibmruntimes/openj9-openjdk-jdk17/blob/2475fcb8f4e08364e97ad3051aa301632c9fcc20/src/java.base/share/classes/java/lang/invoke/MethodHandle.java#L478
[2] https://github.com/ibmruntimes/openj9-openjdk-jdk17/blob/2475fcb8f4e08364e97ad3051aa301632c9fcc20/src/java.base/share/classes/java/lang/invoke/MethodHandles.java#L5102-L5105",Investigation and Exploration,False,348,MEMBER,True,False,False,0.1111111111,0.05434782609,1.0,0.4339622642,0.4974555645,0.5025444355,0.09933594565,0.0006447716188
"Are any of these methods JIT compiled, or is this all interpreted?",Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,0.8571428571,0.1304347826,0.5,0.4402515723,0.4976639776,0.5023360224,0.0006447716188,0.0002080991169
Just wondering if something like the recently fixed #13167 is coming into play here.,Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,1.0,0.152173913,1.0,0.4465408805,0.4976639776,0.5023360224,0.0006447716188,0.0002080991169
https://github.com/eclipse-openj9/openj9/issues/13167 OMR PR,Investigation and Exploration,False,60,MEMBER,True,False,False,0.3333333333,0.03260869565,0.2,0.4528301887,0.4977312427,0.5022687573,0.0002080991169,0.000454293798
[1]  was merged yesterday.,Action on Issue,False,26,MEMBER,True,False,False,0.5555555556,0.05434782609,0.4,0.4591194969,0.4977312427,0.5022687573,0.0002080991169,0.000454293798
The core in question https://github.com/eclipse-openj9/openj9/issues/13162#issuecomment-947040043 was ~7 days ago.,Investigation and Exploration,False,114,MEMBER,True,False,False,1.0,0.09782608696,0.6,0.465408805,0.4977312427,0.5022687573,0.0002080991169,0.000454293798
It doesn't seem they can be related.,Investigation and Exploration,False,36,MEMBER,True,False,False,0.7777777778,0.07608695652,0.8,0.4716981132,0.4977312427,0.5022687573,0.0002080991169,0.000454293798
[1] https://github.com/eclipse/omr/pull/6208,Solution Discussion,False,44,MEMBER,True,False,False,0.2222222222,0.02173913043,1.0,0.4779874214,0.4977312427,0.5022687573,0.0002080991169,0.000454293798
"What I meant was:  if we're dealing with JIT frames, perhaps 13167 fixes the problem, not causes it.",Solution Discussion,False,100,CONTRIBUTOR,False,False,False,1.0,0.2065217391,1.0,0.4842767296,0.4978780866,0.5021219134,0.000454293798,0.000135264426
The earlier backtrace seems to suggest we are dealing with interpreted frames though.,Investigation and Exploration,False,85,CONTRIBUTOR,False,False,False,1.0,0.1413043478,0.5,0.4905660377,0.4979218088,0.5020781912,0.000135264426,0.0008332355771
I just thought I'd ask in case the situation has changed.,Social Conversation,False,57,CONTRIBUTOR,False,False,False,0.9230769231,0.1304347826,1.0,0.4968553459,0.4979218088,0.5020781912,0.000135264426,0.0008332355771
"perhaps 13167 fixes the problem, not causes it.",Solution Discussion,False,47,MEMBER,True,False,False,0.5333333333,0.08695652174,0.5,0.5031446541,0.4981911402,0.5018088598,0.0008332355771,0.009822949607
"Aha, will launch a grinder to check (after OMR promotion), yes, https://github.com/eclipse-openj9/openj9/issues/13162#issuecomment-947040043 shows CODE though.",Investigation and Exploration,True,159,MEMBER,True,False,False,1.0,0.1630434783,1.0,0.5094339623,0.4981911402,0.5018088598,0.0008332355771,0.009822949607
"Observed in latest JDK17 CODE CODE release build CODE (CODE)
CODECODEmain' threw exception: java.lang.BootstrapMethodError: bootstrap method initialization exception

21:58:17  TEST RESULT: Failed.",Investigation and Exploration,True,200,MEMBER,True,False,False,0.8965517241,0.2826086957,0.2,0.5157232704,0.5013662667,0.4986337333,0.009822949607,0.01749005949
"Execution failed: CODECODECODE
The VM has [(0.29.1)",Investigation and Exploration,True,52,MEMBER,True,False,False,0.275862069,0.08695652174,0.4,0.5220125786,0.5013662667,0.4986337333,0.009822949607,0.01749005949
"Avoid combining a regular type bound with a ClassObject location in VP] URL  which closed [JDK17 jsr292_MethodHandleAPI_Test_JitCount1_0_FAILED - NullPointerException: Cannot read field ""rtype"" because ""this"" is null] URL .",Solution Discussion,False,223,MEMBER,True,False,False,1.0,0.3152173913,0.6,0.5283018868,0.5013662667,0.4986337333,0.009822949607,0.01749005949
It seems this problem is different.,Investigation and Exploration,False,35,MEMBER,True,False,False,0.2068965517,0.0652173913,0.8,0.534591195,0.5013662667,0.4986337333,0.009822949607,0.01749005949
fyi @0xdaryl,Contribution and Commitment,False,12,MEMBER,True,False,False,0.06896551724,0.02173913043,1.0,0.5408805031,0.5013662667,0.4986337333,0.009822949607,0.01749005949
"As per Jack's investigation, the CODE is thrown from CODE due to a CODE: https://github.com/eclipse-openj9/openj9/blob/c430223380bd4a6bfd4a238953720395d7741b6e/runtime/vm/BytecodeInterpreter.hpp#L7031-L7039

CODE is called on an CODE method (constructor):

CODE",Investigation and Exploration,True,265,CONTRIBUTOR,False,False,False,1.0,0.2934782609,0.2,0.5471698113,0.5070196757,0.4929803243,0.01749005949,7.94e-05
[Link to IntrinsicMethodHandle's constructor](https://github.com/ibmruntimes/openj9-openjdk-jdk17/blob/dee9f348efd3bf8b70478a56ae93eea912f23123/src/java.base/share/classes/java/lang/invoke/MethodHandleImpl.java#L1249).,Investigation and Exploration,False,218,CONTRIBUTOR,False,False,False,0.6666666667,0.1956521739,0.4,0.5534591195,0.5070196757,0.4929803243,0.01749005949,7.94e-05
The NPE is intermittent.,Investigation and Exploration,False,24,CONTRIBUTOR,False,False,False,0.1481481481,0.04347826087,0.6,0.5597484277,0.5070196757,0.4929803243,0.01749005949,7.94e-05
@gacholio Can there be a race condition which can cause the CODE to be CODE?,Investigation and Exploration,True,76,CONTRIBUTOR,False,False,False,0.5555555556,0.1630434783,0.8,0.5660377358,0.5070196757,0.4929803243,0.01749005949,7.94e-05
Do we need to **resolve** the CODE in case of a CODE?,Solution Discussion,True,53,CONTRIBUTOR,False,False,False,0.4444444444,0.1304347826,1.0,0.572327044,0.5070196757,0.4929803243,0.01749005949,7.94e-05
"The receiver comes from the stack, which is only modified by the current thread, so I don't see any possibility of a race in the above code.",Investigation and Exploration,False,140,CONTRIBUTOR,False,False,False,1.0,0.2934782609,0.5,0.5786163522,0.5070453341,0.4929546659,7.94e-05,0.07106417022
I don't know the answer about resolution - that would have no effect on the problem anyway.,Solution Discussion,False,91,CONTRIBUTOR,False,False,False,0.5925925926,0.1739130435,1.0,0.5849056604,0.5070453341,0.4929546659,7.94e-05,0.07106417022
"Tried with CODE
still failed with same error",Bug Reproduction,True,45,CONTRIBUTOR,False,False,False,1.0,0.09782608696,1.0,0.5911949686,0.5300158002,0.4699841998,0.07106417022,0.08663149456
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_x86-64_mac_Nightly/73
jdk_util_0 CODE
java/util/Map/InPlaceOpsCollisions.java
CODE",Testing,True,156,CONTRIBUTOR,False,False,False,1.0,0.1195652174,1.0,0.5974842767,0.558018179,0.441981821,0.08663149456,0.00069427907
@fengxue-IS Can you provide an update on the current approach / next steps?,Task Progress,False,75,MEMBER,False,False,False,0.8666666667,0.1413043478,0.5,0.6037735849,0.5582425947,0.4417574053,0.00069427907,0.0001275446201
It's hard to follow the investigation (and chime in with help!) without more detail here.,Social Conversation,False,89,MEMBER,False,False,False,1.0,0.1630434783,1.0,0.6100628931,0.5582425947,0.4417574053,0.00069427907,0.0001275446201
The latest experiments seem to indicate that when we prevent transitions to the JIT after we have entered CODE the failure goes away.,Investigation and Exploration,True,133,CONTRIBUTOR,False,False,False,0.7666666667,0.25,0.25,0.6163522013,0.5582838217,0.4417161783,0.0001275446201,0.0004086462498
So far it has passed 80/80 with this change.,Testing,False,44,CONTRIBUTOR,False,False,False,0.3,0.09782608696,0.5,0.6226415094,0.5582838217,0.4417161783,0.0001275446201,0.0004086462498
The next step will be to determine which compiled methods are called after entry to  CODE and exclude them individually to determine which one may be trigerring the issue.,Investigation and Exploration,True,171,CONTRIBUTOR,False,False,False,1.0,0.3260869565,0.75,0.6289308176,0.5582838217,0.4417161783,0.0001275446201,0.0004086462498
"Simultaneously, there are efforts to determine when then stack slot is being set to NULL, which will further help to pinpoint where the failure is occurring.",Investigation and Exploration,False,157,CONTRIBUTOR,False,False,False,0.8666666667,0.2826086957,1.0,0.6352201258,0.5582838217,0.4417161783,0.0001275446201,0.0004086462498
I have modified CODE function to always return false once VM enter CODE call.,Task Progress,True,77,CONTRIBUTOR,False,False,False,0.5384615385,0.152173913,0.3333333333,0.641509434,0.5584159107,0.4415840893,0.0004086462498,0.04419068659
"and with this change, 80/80 passed on plinux (CODE & CODE) and 
100/100 passed on xlinux (CODE) when JIT compiled methods are disabled during CODE call.",Testing,True,153,CONTRIBUTOR,False,False,False,1.0,0.2826086957,0.6666666667,0.6477987421,0.5584159107,0.4415840893,0.0004086462498,0.04419068659
I am working on setting up grinder to accept a jitlog file in order to limit the methods to compile.,Task Progress,False,100,CONTRIBUTOR,False,False,False,0.7692307692,0.2173913043,1.0,0.6540880503,0.5584159107,0.4415840893,0.0004086462498,0.04419068659
"With @tajila's suggestion of logging verbose output to trace buffer, the trace log showed that the bytecode frame in DDR of CODE is actually a decompiled frame from JIT.
CODE
after the decompiled finished, VM detected the invalid receiverSlot during first method dispatch via CODE
VM debug output 
CODE

This suggest that either the OSRBuffer data used to reconstruct the interpreter frame is invalid or transition from JIT to interpreter have overwritten the correct value on stack.",Investigation and Exploration,True,489,CONTRIBUTOR,False,False,False,1.0,0.8913043478,0.3333333333,0.6603773585,0.5726999115,0.4273000885,0.04419068659,0.007881921876
I will add a new tracepoint to log the stack slot value during decompile to print value as it is copied from the OSR frame.,Task Progress,False,123,CONTRIBUTOR,False,False,False,0.3048780488,0.2717391304,0.6666666667,0.6666666667,0.5726999115,0.4273000885,0.04419068659,0.007881921876
@nbhuiyan @jdmpapin do you have any insight to how this could happen?,Contribution and Commitment,False,69,CONTRIBUTOR,False,False,False,0.1463414634,0.1304347826,1.0,0.6729559748,0.5726999115,0.4273000885,0.04419068659,0.007881921876
latest grinder (CODE) confirmed that the null receiver on stack comes from OSR frame during decompile.,Investigation and Exploration,True,102,CONTRIBUTOR,False,False,False,0.4848484848,0.1739130435,0.5,0.679245283,0.5752476289,0.4247523711,0.007881921876,0.05054425471
"trace output:
CODE
Stack slots:
CODE
test output:
CODE
I've uploaded the core file to box so JIT members can help with investigating from JIT side",Task Progress,True,152,CONTRIBUTOR,False,False,False,1.0,0.3586956522,1.0,0.6855345912,0.5752476289,0.4247523711,0.007881921876,0.05054425471
Do we know what the current failure rate of this problem is without any debug or diagnostic options?,Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,1.0,0.1956521739,1.0,0.6918238994,0.5915853289,0.4084146711,0.05054425471,0.0007014954103
"https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_ppc64le_linux_Nightly/81
jdk_util_0 CODE
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java

https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_aarch64_linux_Release/7
https://openj9-jenkins.osuosl.org/job/Test_openjdk17_j9_sanity.openjdk_aarch64_linux_Nightly/47
jdk_util_1 CODE
java/util/stream/boottest/java.base/java/util/stream/SpinedBufferTest.java
CODE",Testing,True,482,CONTRIBUTOR,False,False,False,1.0,0.3586956522,1.0,0.6981132075,0.5918120771,0.4081879229,0.0007014954103,0.0005225972985
I have looked into cores generated where CODE method isn't compiled.,Task Progress,True,68,CONTRIBUTOR,False,False,False,0.3055555556,0.1195652174,0.3333333333,0.7044025157,0.5919809991,0.4080190009,0.0005225972985,0.01338731827
In such cases the failure likely is still from OSR frame as the decompile log generated before detecting NPE has outerframe of CODE and CODE is inlined in the call and decompiled.,Investigation and Exploration,True,179,CONTRIBUTOR,False,False,False,0.8888888889,0.347826087,0.6666666667,0.7106918239,0.5919809991,0.4080190009,0.0005225972985,0.01338731827
"Do we know what the current failure rate of this problem is without any debug or diagnostic options?

iirc, last time I run with the OpenJ9 nightly build against CODE and I got 2/100 failures.",Investigation and Exploration,True,194,CONTRIBUTOR,False,False,False,1.0,0.3913043478,1.0,0.7169811321,0.5919809991,0.4080190009,0.0005225972985,0.01338731827
Yesterday I set up the test framework to run with the smallest subset of test cases to reproduce that failure.,Bug Reproduction,False,110,MEMBER,False,False,False,0.625,0.2173913043,0.1666666667,0.7232704403,0.5963082563,0.4036917437,0.01338731827,0.03227550175
"With that, reproducing this failure was a lot easier, going from each test iteration taking over 25 minutes to taking less than a minute.",Bug Reproduction,False,137,MEMBER,False,False,False,0.75,0.2608695652,0.3333333333,0.7295597484,0.5963082563,0.4036917437,0.01338731827,0.03227550175
"I wanted to be able to obtain some compilation logs from a failing run, and this helps with that.",Investigation and Exploration,False,97,MEMBER,False,False,False,0.59375,0.2065217391,0.5,0.7358490566,0.5963082563,0.4036917437,0.01338731827,0.03227550175
I am now able to reliably reproduce the crash in under 20 minutes.,Bug Reproduction,False,66,MEMBER,False,False,False,0.40625,0.1413043478,0.6666666667,0.7421383648,0.5963082563,0.4036917437,0.01338731827,0.03227550175
"Looking at the core files shared by @fengxue-IS , here is the list of inlined calls in CODE
CODE

With CODE, the failure no longer occurs in over 100 iterations.",Investigation and Exploration,True,164,MEMBER,False,False,False,1.0,0.347826087,0.8333333333,0.748427673,0.5963082563,0.4036917437,0.01338731827,0.03227550175
I will work on collecting more JIT logs to try and understand what is happening.,Task Progress,False,80,MEMBER,False,False,False,0.46875,0.1630434783,1.0,0.7547169811,0.5963082563,0.4036917437,0.01338731827,0.03227550175
Since my last update I have worked on collecting some verbose and compilation logs with CODE for CODE.,Task Progress,True,102,MEMBER,False,False,False,0.45,0.1956521739,0.09090909091,0.7610062893,0.6067408459,0.3932591541,0.03227550175,0.06952239071
"However, using the options that we need for diagnosing the problem, the failure was a lot less reproducible.",Investigation and Exploration,False,108,MEMBER,False,False,False,0.45,0.1956521739,0.1818181818,0.7672955975,0.6067408459,0.3932591541,0.03227550175,0.06952239071
"Furthermore, there was no trace of CODEin any of the log files.",Investigation and Exploration,True,63,MEMBER,False,False,False,0.3,0.1304347826,0.2727272727,0.7735849057,0.6067408459,0.3932591541,0.03227550175,0.06952239071
Later I realized they were being deleted by the test itself in various working directories and I needed to have them generated elsewhere.,Investigation and Exploration,False,137,MEMBER,False,False,False,0.575,0.25,0.3636363636,0.7798742138,0.6067408459,0.3932591541,0.03227550175,0.06952239071
"Eventually, I was able to get a compilation log of a failing run.",Task Progress,False,65,MEMBER,False,False,False,0.325,0.1413043478,0.4545454545,0.786163522,0.6067408459,0.3932591541,0.03227550175,0.06952239071
I have not seen anything obviously wrong in the log so far.,Investigation and Exploration,False,59,MEMBER,False,False,False,0.3,0.1304347826,0.5454545455,0.7924528302,0.6067408459,0.3932591541,0.03227550175,0.06952239071
"While the compilation log has some useful info such as where OSR can happen, there were some crucial info I was hoping to get at runtime for when OSR is attempted.",Investigation and Exploration,False,163,MEMBER,False,False,False,0.775,0.3369565217,0.6363636364,0.7987421384,0.6067408459,0.3932591541,0.03227550175,0.06952239071
"However, I could not find the output from that in any of the test output files.",Investigation and Exploration,False,79,MEMBER,False,False,False,0.4,0.1739130435,0.7272727273,0.8050314465,0.6067408459,0.3932591541,0.03227550175,0.06952239071
The runtime OSR tracing log were supposed to have been output to stdout.,Investigation and Exploration,False,72,MEMBER,False,False,False,0.325,0.1413043478,0.8181818182,0.8113207547,0.6067408459,0.3932591541,0.03227550175,0.06952239071
I am currently attempting to reproduce the failure and have the runtime OSR details written to the verbose log.,Task Progress,False,111,MEMBER,False,False,False,0.475,0.2065217391,0.9090909091,0.8176100629,0.6067408459,0.3932591541,0.03227550175,0.06952239071
"I am also running with the option CODE, which will force calling the runtime helper even at points where it could be bypassed through writing  directly to the OSR buffer, ensuring that every OSR attempt is logged at runtime.",Investigation and Exploration,True,224,MEMBER,False,False,False,1.0,0.4347826087,1.0,0.8238993711,0.6067408459,0.3932591541,0.03227550175,0.06952239071
I have since been able to collect runtime OSR logs for a failing run.,Investigation and Exploration,False,69,MEMBER,False,False,False,0.25,0.152173913,0.125,0.8301886792,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
It became clear that the failure was only seen in runs where OSR was induced from CODE.,Investigation and Exploration,True,87,MEMBER,False,False,False,0.3035714286,0.1847826087,0.25,0.8364779874,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
Passing runs normally did not undergo OSR from that method.,Investigation and Exploration,False,59,MEMBER,False,False,False,0.1785714286,0.1086956522,0.375,0.8427672956,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
"Vijay pointed out that we skipped creating HCR guards in CODE  inlined methods, and to check if that could somehow be responsible for setting up the OSR transitions improperly, I ran some tests with the logic skipping HCR guard creation for CODE methods disabled, and the failure was no longer reproducible.",Solution Discussion,True,307,MEMBER,False,False,False,0.9285714286,0.5652173913,0.5,0.8490566038,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
"Vijay also saw some suspicious transformations done in escape analysis which could result in some null objects in the pending push slots, and I tested further to confirm if the failure is reproducible with the option to disable escape analysis that would have prevented that, and can conclude that it is not reproducible with that option.",Solution Discussion,False,338,MEMBER,False,False,False,1.0,0.6086956522,0.625,0.8553459119,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
"@hzongaro, who is familiar with pre-escape analysis through the work he did last year, could provide us with some insights into whether escape analysis was making a wrong decision.",Contribution and Commitment,False,180,MEMBER,False,False,False,0.5357142857,0.3260869565,0.75,0.8616352201,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
Henry wanted to look at a failing log with CODE option.,Contribution and Commitment,True,55,MEMBER,False,False,False,0.1964285714,0.1195652174,0.875,0.8679245283,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
"So far, it seems like adding the CODE option manages to hide the problem.",Solution Discussion,True,73,MEMBER,False,False,False,0.25,0.152173913,1.0,0.8742138365,0.6292129541,0.3707870459,0.06952239071,0.0005499522631
#13978 will temporarily work around this problem.,Workarounds,False,49,MEMBER,False,False,False,0.3888888889,0.07608695652,0.5,0.8805031447,0.6293907182,0.3706092818,0.0005499522631,0.01709802761
I launched some Grinder runs to verify this avoids the problem while we continue investigating the root cause.,Task Progress,False,110,MEMBER,False,False,False,1.0,0.1956521739,1.0,0.8867924528,0.6293907182,0.3706092818,0.0005499522631,0.01709802761
eclipse/omr#6255 is a better temporary workaround than #13978.,Workarounds,False,62,MEMBER,False,False,False,0.2368421053,0.09782608696,0.25,0.893081761,0.6349174086,0.3650825914,0.01709802761,0.01374259717
"In that workaround, we prevent the problem simply by skipping creating an OSR path to take from CODE inlined callee methods, instead of unnecessarily adding HCR guards and also skipping creating the alternate OSR path like in #13978.",Workarounds,True,233,MEMBER,False,False,False,1.0,0.4130434783,0.5,0.8993710692,0.6349174086,0.3650825914,0.01709802761,0.01374259717
Grinder test results with only eclipse/omr#6255: 200/200 iterations of CODE passed.,Testing,True,83,MEMBER,False,False,False,0.3157894737,0.1304347826,0.75,0.9056603774,0.6349174086,0.3650825914,0.01709802761,0.01374259717
"Additionally, ran 200+ iterations locally without being able to reproduce this failure with this patch.",Testing,False,103,MEMBER,False,False,False,0.3947368421,0.1630434783,1.0,0.9119496855,0.6349174086,0.3650825914,0.01709802761,0.01374259717
@nbhuiyan  any perf concerns with the workaround in place?,Workarounds,False,58,NONE,False,False,False,1.0,0.1086956522,1.0,0.9182389937,0.6393595045,0.3606404955,0.01374259717,0.0002725427144
"No, perf is unlikely to be impacted with the workaround.",Workarounds,False,56,MEMBER,False,False,False,0.4347826087,0.1086956522,0.2,0.9245283019,0.6394476,0.3605524,0.0002725427144,0.05549281815
It only affects the slow path by not creating OSR transition points to take on a failed guard for certain methods being inlined.,Workarounds,False,128,MEMBER,False,False,False,1.0,0.25,0.4,0.9308176101,0.6394476,0.3605524,0.0002725427144,0.05549281815
"The instances where these guards can fail are rare, hence the intermittent nature of this problem.",Observed Bug Behaviour,False,98,MEMBER,False,False,False,0.6956521739,0.1739130435,0.6,0.9371069182,0.6394476,0.3605524,0.0002725427144,0.05549281815
The methods being inlined that would be affected by this workaround is also fairly limited.,Workarounds,False,91,MEMBER,False,False,False,0.652173913,0.1630434783,0.8,0.9433962264,0.6394476,0.3605524,0.0002725427144,0.05549281815
Perf runs I conducted locally that heavily utilized CODE methods did not indicate any perf differences compared to the version without the workaround.,Workarounds,True,150,MEMBER,False,False,False,1.0,0.25,1.0,0.9496855346,0.6394476,0.3605524,0.0002725427144,0.05549281815
"@nbhuiyan can you pls cherry pick the change for the 0.29.1 release branch, i.e. https://github.com/eclipse-openj9/openj9-omr/tree/vhttps://github.com/eclipse-openj9/openj9-omr/tree/v0.29.1-release-release",Contribution and Commitment,False,205,CONTRIBUTOR,False,False,False,1.0,0.1630434783,1.0,0.9559748428,0.6573848516,0.3426151484,0.05549281815,9.99e-05
Opened eclipse-openj9/openj9-omr#130,Action on Issue,False,36,MEMBER,False,False,False,1.0,0.05434782609,1.0,0.9622641509,0.657417128,0.342582872,9.99e-05,0.05983688721
"@hzongaro identified the root cause of this issue, which was pre-escape analysis not adding 2 pending push symRefs to the eaEscapeHelper call because it incorrectly determined that they were dead at the bytecodes where they were live

In the code below:

https://github.com/eclipse-openj9/openj9/blob/376e221fec38171c65f7eb5b0190ac74b212c0a1/runtime/compiler/optimizer/EscapeAnalysisTools.cpp#L113-L114",Investigation and Exploration,False,406,MEMBER,False,False,False,0.9,0.4891304348,0.25,0.9685534591,0.6767585371,0.3232414629,0.05983688721,1.0
The last parameter for CODE should be the BitVector containing dead symrefs.,Solution Discussion,True,76,MEMBER,False,False,False,0.24,0.1304347826,0.5,0.9748427673,0.6767585371,0.3232414629,0.05983688721,1.0
"According to Henry, CODE returns the BV containing symRefs that are dead at that point, whereas   CODE returns the pending push symRefs that are live at that point.",Solution Discussion,True,164,MEMBER,False,False,False,0.58,0.3152173913,0.75,0.9811320755,0.6767585371,0.3232414629,0.05983688721,1.0
"Using his fix and without the workaround in  eclipse/omr#6255 in place, 200 iterations of the test passed, and I observed 5 tests iterations where OSR transitions took place at the same bytecode where we previously ran into the crash, confirming that the issue is addressed by Henry's fix.",Solution Discussion,False,289,MEMBER,False,False,False,1.0,0.5434782609,1.0,0.9874213836,0.6767585371,0.3232414629,0.05983688721,1.0
Was this ever fixed?,Social Conversation,False,20,CONTRIBUTOR,False,False,False,1.0,0.04347826087,1.0,0.9937106918,0.9999940872,5.91e-06,1.0,1.83e-05
Yes the fix was merged and this issue can be closed.,Action on Issue,False,52,MEMBER,False,False,True,1.0,0.1195652174,1.0,1.0,1.0,0.0,1.83e-05,0.0
OpenJ9 Java 11 on Windows 10 won't start crashes with segmentation error,Observed Bug Behaviour,False,72,NONE,True,True,False,0.1212121212,0.1212121212,0.2,0.00350877193,0.0,1.0,0.0,0.006553271164
"Sometimes it starts, sometimes it doesn't (mostly it doesn't).",Observed Bug Behaviour,False,62,NONE,True,True,False,0.09090909091,0.09090909091,0.4,0.00701754386,0.0,1.0,0.0,0.006553271164
Restarting my windows VM *sometimes* fixes the problem.,Solution Discussion,False,55,NONE,True,True,False,0.08080808081,0.08080808081,0.6,0.01052631579,0.0,1.0,0.0,0.006553271164
"The message I'm getting is this: 

CODE

Some more details may be found here: https://github.com/spring-projects/sts4/issues/138

It is possible I didn't install it right, though, if I follow the exact same installation procedure to install hotspot openjdk the JVM works just fine.",Observed Bug Behaviour,True,287,NONE,True,True,False,0.4444444444,0.4444444444,0.8,0.01403508772,0.0,1.0,0.0,0.006553271164
"For reference my installation procedure is as follows:

- download zip from here: https://adoptopenjdk.net/installation.html
- unzip it under a folder called CODE or CODE (depending on hotspot versus openj9)
- I do **not** add anything to my path (my path is left set to run oracle JDK 1.8)
- configure Eclipse workspace JRE to point to unzipped installation (exact details on how that Eclipse instance was setup are in the other ticket).
- launch a spring boot app configured to run with JRE 11 (details on how to setup exact same app can be found in the other ticket)",Bug Reproduction,True,575,NONE,True,True,False,1.0,1.0,1.0,0.01754385965,0.0,1.0,0.0,0.006553271164
"@kdvolder When OpenJ9 crashes, it typically creates a CODE file and a system core as well.",Observed Bug Behaviour,True,90,MEMBER,False,False,False,1.0,0.1616161616,0.3333333333,0.02105263158,0.00184916656,0.9981508334,0.006553271164,0.002233056532
Can you share those files from the crash?,Social Conversation,False,41,MEMBER,False,False,False,0.5,0.08080808081,0.6666666667,0.02456140351,0.00184916656,0.9981508334,0.006553271164,0.002233056532
It'll help us to understand what's causing the crash,Social Conversation,False,52,MEMBER,False,False,False,0.5625,0.09090909091,1.0,0.02807017544,0.00184916656,0.9981508334,0.006553271164,0.002233056532
"""That exception code is Entry point not found - something is trying to load a DLL and the DLL cannot find all the DLLs it needs"" https://stackoverflow.com/questions/1649384/c-debugging-exception-c0000139",Investigation and Exploration,False,203,CONTRIBUTOR,False,False,False,1.0,0.2727272727,1.0,0.03157894737,0.002479278356,0.9975207216,0.002233056532,0.3212156581
I will try to see whether it is possible to reproduce it locally.,Task Progress,False,65,CONTRIBUTOR,False,False,False,1.0,0.1313131313,1.0,0.0350877193,0.09311817284,0.9068818272,0.3212156581,0.01583808516
"I would, but I can't find them.",Social Conversation,False,31,NONE,True,False,False,0.1555555556,0.07070707071,0.3333333333,0.03859649123,0.09758727792,0.9024127221,0.01583808516,0.005467138405
"And as always happens... when I tried to reproduce it again today, using the same Windows 10 VM, with the same Eclipse installation, running the same project, with the same installed copy of OpenJ9-JRE... it seems to always launch just fine every single time.",Bug Reproduction,False,259,NONE,True,False,False,1.0,0.4545454545,0.6666666667,0.04210526316,0.09758727792,0.9024127221,0.01583808516,0.005467138405
I'll kick it around some more and see if it happens again and if I can find the coredump files I'll attach them.,Task Progress,False,112,NONE,True,False,False,0.5111111111,0.2323232323,1.0,0.04561403509,0.09758727792,0.9024127221,0.01583808516,0.005467138405
"Okay, so it doesn't actually start fine every single time.",Observed Bug Behaviour,False,58,NONE,True,False,False,0.3225806452,0.101010101,0.09090909091,0.04912280702,0.09912996542,0.9008700346,0.005467138405,0.004133788861
I kept playing around with it switching between JRE/JDK and launching my app and after a few tries it did hit the error again.,Bug Reproduction,False,126,NONE,True,False,False,0.8064516129,0.2525252525,0.1818181818,0.05263157895,0.09912996542,0.9008700346,0.005467138405,0.004133788861
Then the next time it worked again.,Investigation and Exploration,False,35,NONE,True,False,False,0.2258064516,0.07070707071,0.2727272727,0.05614035088,0.09912996542,0.9008700346,0.005467138405,0.004133788861
So I've seen the error already a couple of times today.,Investigation and Exploration,False,55,NONE,True,False,False,0.3870967742,0.1212121212,0.3636363636,0.05964912281,0.09912996542,0.9008700346,0.005467138405,0.004133788861
"But, for some reason, today, more often than not it actually starts up fine.",Investigation and Exploration,False,76,NONE,True,False,False,0.4516129032,0.1414141414,0.4545454545,0.06315789474,0.09912996542,0.9008700346,0.005467138405,0.004133788861
"This seems to be under identical circumstances, literally I just keep hitting the 'run' button repeatedly and sometimes it works fine and then once in a while it gets the segfault.",Bug Reproduction,False,180,NONE,True,False,False,1.0,0.3131313131,0.5454545455,0.06666666667,0.09912996542,0.9008700346,0.005467138405,0.004133788861
This happens both with JRE and JDK I tried both of em.,Observed Bug Behaviour,False,54,NONE,True,False,False,0.3870967742,0.1212121212,0.6363636364,0.0701754386,0.09912996542,0.9008700346,0.005467138405,0.004133788861
I looked for the coredumps anywhere I could think of.,Investigation and Exploration,False,53,NONE,True,False,False,0.3225806452,0.101010101,0.7272727273,0.07368421053,0.09912996542,0.9008700346,0.005467138405,0.004133788861
"In my user home dir, in the tmp dir, in the process working dir.",Investigation and Exploration,False,64,NONE,True,False,False,0.4516129032,0.1414141414,0.8181818182,0.07719298246,0.09912996542,0.9008700346,0.005467138405,0.004133788861
I couldn't find them in any of those places.,Investigation and Exploration,False,44,NONE,True,False,False,0.2903225806,0.09090909091,0.9090909091,0.08070175439,0.09912996542,0.9008700346,0.005467138405,0.004133788861
Where are these dump files supposed to be located?,Investigation and Exploration,False,50,NONE,True,False,False,0.2903225806,0.09090909091,1.0,0.08421052632,0.09912996542,0.9008700346,0.005467138405,0.004133788861
Did you check the location of Eclipse?,Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.5833333333,0.07070707071,0.5,0.08771929825,0.1002964156,0.8997035844,0.004133788861,0.001150976506
Most often core dumps are generated out there if with Eclipse IDE.,Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,1.0,0.1212121212,1.0,0.09122807018,0.1002964156,0.8997035844,0.004133788861,0.001150976506
"Did not check inside Eclipse earlier, but I did just now and can't find them there either.",Task Progress,False,90,NONE,True,False,False,1.0,0.1717171717,1.0,0.09473684211,0.1006211919,0.8993788081,0.001150976506,0.0136252923
"@kdvolder , What version of Eclipse IDE are you using?",Investigation and Exploration,False,54,CONTRIBUTOR,False,False,False,1.0,0.09090909091,1.0,0.09824561404,0.1044659031,0.8955340969,0.0136252923,0.02087158101
It is STS 4 snapshot based on latest Eclipse 4.9 release.,Investigation and Exploration,False,57,NONE,True,False,False,0.6111111111,0.1111111111,0.25,0.101754386,0.1103553327,0.8896446673,0.02087158101,0.006411425468
Also with Java 11 support installed from Eclipse marketplace.,Investigation and Exploration,False,61,NONE,True,False,False,0.5,0.09090909091,0.5,0.1052631579,0.1103553327,0.8896446673,0.02087158101,0.006411425468
The installation procedure I followed for setting it up is burried somewhere in the issue I linked above.,Social Conversation,False,105,NONE,True,False,False,1.0,0.1818181818,0.75,0.1087719298,0.1103553327,0.8896446673,0.02087158101,0.006411425468
More precisely in this comment: https://github.com/spring-projects/sts4/issues/138#issuecomment-440088030,Social Conversation,False,105,NONE,True,False,False,0.3333333333,0.06060606061,1.0,0.1122807018,0.1103553327,0.8896446673,0.02087158101,0.006411425468
I have not yet reproduced the crash you spotted after installing all required softwares/artifacts on Win 10.,Bug Reproduction,False,108,CONTRIBUTOR,False,False,False,0.1935483871,0.1818181818,0.3333333333,0.1157894737,0.112164474,0.887835526,0.006411425468,0.002601855342
"Here's the steps I did:
1) downloaded hotspot JDK8 from https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u192-b12/OpenJDK8U-jdk_x64_windows_hotspot_8u192b12.zip
2) downloaded OpenJ9/OpenJDK11 from  https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.1%2B13/OpenJDK11-jdk_x64_windows_openj9_11.0.1_13.zip
3) downloaded Eclipse 4.9 from http://download.eclipse.org/eclipse/downloads/drops4/R-4.9-201809060745/download.php?dropFile=eclipse-SDK-4.9-win32-x86_64.zip
4) configured eclipse.ini file to jdk8 (Hotspot)
5) installed http://dist.springsource.com/snapshot/TOOLS/sts4/nightly/e4.9 and",Bug Reproduction,False,643,CONTRIBUTOR,False,False,False,0.4301075269,0.404040404,0.6666666667,0.1192982456,0.112164474,0.887835526,0.006411425468,0.002601855342
"Java 11 support for Eclipse 4.9 from the Eclipse marketplace
6) created a demo spring boot project and ran it via jdk8 (Hotspot) as as ""Spring boot app""
7) downloaded the OpenJ9.zip from https://github.com/spring-projects/sts4/files/2578527/OpenJ9.zip
8) imported OpenJ9.zip as an existing project and set up its JRE to jdk11 (OpenJ9) and changed pom.xml to from 1.8 to 11
9) started the OpenJ9 project as ""Spring boot app""

![image] URL 

After switching back and forth between the demo and OpenJ9, I didn't detect any crash in the Eclipse IDE.",Bug Reproduction,False,553,CONTRIBUTOR,False,False,False,1.0,0.9393939394,1.0,0.1228070175,0.112164474,0.887835526,0.006411425468,0.002601855342
"I am not sure whether the demo project actually got started/kept running as follows:
CODECODE | \ \ \ \
 \\/  ___)",Investigation and Exploration,True,116,CONTRIBUTOR,False,False,False,0.7407407407,0.202020202,0.05555555556,0.1263157895,0.1128986515,0.8871013485,0.002601855342,0.003967626759
"Yes, it got started.",Social Conversation,False,20,NONE,True,False,False,0.2222222222,0.0404040404,0.125,0.1894736842,0.1140182149,0.8859817851,0.003967626759,0.002853124861
I'm not sure what 'demo' project this is.,Social Conversation,False,41,NONE,True,False,False,0.4444444444,0.08080808081,0.25,0.1929824561,0.1140182149,0.8859817851,0.003967626759,0.002853124861
"But from the looks of it, it is just a completely empty boot app which basically does nothing.",Investigation and Exploration,False,94,NONE,True,False,False,1.0,0.1818181818,0.375,0.1964912281,0.1140182149,0.8859817851,0.003967626759,0.002853124861
So it basically starts up... does nothing... then shuts down.,Investigation and Exploration,False,61,NONE,True,False,False,0.5555555556,0.101010101,0.5,0.2,0.1140182149,0.8859817851,0.003967626759,0.002853124861
This would be the expected behavior for such an app.,Expected Behaviour,False,52,NONE,True,False,False,0.5555555556,0.101010101,0.625,0.2035087719,0.1140182149,0.8859817851,0.003967626759,0.002853124861
"The 'OpenJ9' app is also rather sparse, but it does run a webserver serving some requests.",Investigation and Exploration,False,90,NONE,True,False,False,0.8888888889,0.1616161616,0.75,0.2070175439,0.1140182149,0.8859817851,0.003967626759,0.002853124861
So its a long running process that won't exit until its told to do so.,Expected Behaviour,False,70,NONE,True,False,False,0.8333333333,0.1515151515,0.875,0.2105263158,0.1140182149,0.8859817851,0.003967626759,0.002853124861
"Anyhow... from the looks of things, it's all working as it should for you.",Expected Behaviour,False,74,NONE,True,False,False,0.7777777778,0.1414141414,1.0,0.2140350877,0.1140182149,0.8859817851,0.003967626759,0.002853124861
"I created another new demo2 application with rest/web service and ran this demo2 before OpenJ9
CODECODE | \ \ \ \
 \\/  ___)",Investigation and Exploration,True,126,CONTRIBUTOR,False,False,False,0.3230769231,0.2121212121,0.03333333333,0.2175438596,0.1148232942,0.8851767058,0.002853124861,0.002074999899
[image] URL,Investigation and Exploration,False,12,CONTRIBUTOR,False,False,False,0.03076923077,0.0202020202,0.9333333333,0.3122807018,0.1148232942,0.8851767058,0.002853124861,0.002074999899
So it seems both demo2 and OpenJ9 remain running in the meantime without anything abnormal.,Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,0.2307692308,0.1515151515,0.9666666667,0.3157894737,0.1148232942,0.8851767058,0.002853124861,0.002074999899
"My understanding is that:
1) the Eclipse IDE is launched with Hotspot JDK8
2) the demo2 application is launched with Hotspot JDK8
3) OpenJ9 application is launched with OpenJ9/JDK11

Given that all these steps are correct in terms of setup and nothing happens from our side, the crash might be triggered by something else instead of simply following the steps.",Investigation and Exploration,False,365,CONTRIBUTOR,False,False,False,1.0,0.6565656566,1.0,0.3192982456,0.1148232942,0.8851767058,0.002853124861,0.002074999899
"@kdvolder , please help to double-check all steps above in case of anything we ignored in between.",Contribution and Commitment,False,98,CONTRIBUTOR,False,False,False,1.0,0.1717171717,1.0,0.3228070175,0.1154088065,0.8845911935,0.002074999899,0.00603452119
There are some differences in the steps though I would surprised if they really mattered.,Investigation and Exploration,False,89,NONE,True,False,False,0.3846153846,0.1515151515,0.25,0.3263157895,0.117111595,0.882888405,0.00603452119,0.003554247873
So it's 'integrated' to my windows environment rather than just a folder on the side somewhere.,Investigation and Exploration,False,95,NONE,True,False,False,0.4102564103,0.1616161616,0.75,0.3333333333,0.117111595,0.882888405,0.00603452119,0.003554247873
- I didn't change the STS.ini file to point JDK 8 but let it pick it up from my path.,Investigation and Exploration,False,85,NONE,True,False,False,0.4871794872,0.1919191919,1.0,0.3368421053,0.117111595,0.882888405,0.00603452119,0.003554247873
I didn't change the STS.ini file to point JDK 8 but let it pick it up from my path.,Social Conversation,False,83,CONTRIBUTOR,False,False,False,0.3454545455,0.1919191919,0.3333333333,0.3403508772,0.1181145134,0.8818854866,0.003554247873,0.004838964607
Me too.,Social Conversation,False,7,CONTRIBUTOR,False,False,False,0.03636363636,0.0202020202,0.6666666667,0.3438596491,0.1181145134,0.8818854866,0.003554247873,0.004838964607
"There is no change on my side in terms of STS.ini (the only change is to modify Eclipse/configure.ini to JDK8 to ensure the workspace is running with JDK8)

Other than that, I don't think there is any fundamental difference as to complete bundles/via installer; otherwise these applications in Eclipse won't work correctly.",Investigation and Exploration,False,325,CONTRIBUTOR,False,False,False,1.0,0.5555555556,1.0,0.3473684211,0.1181145134,0.8818854866,0.003554247873,0.004838964607
"One more potential difference:

> After switching back and forth between the demo and OpenJ9, I didn't detect any crash in the Eclipse ID

I didn't switch back and forth between hotspot and openj9.",Investigation and Exploration,False,201,NONE,True,False,False,0.7142857143,0.3535353535,0.1111111111,0.350877193,0.1194799462,0.8805200538,0.004838964607,0.001815624911
Instead I had both openj9-jdk and openj9-jre configured in the workspace.,Investigation and Exploration,False,73,NONE,True,False,False,0.2653061224,0.1313131313,0.2222222222,0.3543859649,0.1194799462,0.8805200538,0.004838964607,0.001815624911
I edited the OpenJ9 project launch config to switch between these two to try them both.,Investigation and Exploration,False,87,NONE,True,False,False,0.3265306122,0.1616161616,0.3333333333,0.3578947368,0.1194799462,0.8805200538,0.004838964607,0.001815624911
I did not switch between them on every run.,Investigation and Exploration,False,43,NONE,True,False,False,0.1836734694,0.09090909091,0.4444444444,0.3614035088,0.1194799462,0.8805200538,0.004838964607,0.001815624911
I basically just used the 'Boot Dashboard' to launch my app repeatedly by clicking the restart button repeatedly.,Investigation and Exploration,False,113,NONE,True,False,False,0.3673469388,0.1818181818,0.5555555556,0.3649122807,0.1194799462,0.8805200538,0.004838964607,0.001815624911
"Sometimes, I even clicked the button before letting it complete the startup.",Investigation and Exploration,False,76,NONE,True,False,False,0.2448979592,0.1212121212,0.6666666667,0.3684210526,0.1194799462,0.8805200538,0.004838964607,0.001815624911
After doing that for a bit I switched JRE<->JDK and did the same thing again.,Investigation and Exploration,False,77,NONE,True,False,False,0.306122449,0.1515151515,0.7777777778,0.3719298246,0.1194799462,0.8805200538,0.004838964607,0.001815624911
Eventually I experienced the segfault and I have seen it on both JDK/JRE.,Bug Reproduction,False,73,NONE,True,False,False,0.2857142857,0.1414141414,0.8888888889,0.3754385965,0.1194799462,0.8805200538,0.004838964607,0.001815624911
I didn't switch back and forth between hotspot and openj9.,Social Conversation,False,58,CONTRIBUTOR,False,False,False,0.2127659574,0.101010101,0.25,0.3824561404,0.1199922694,0.8800077306,0.001815624911,0.003294872886
"...

Sorry for misconception (this has nothing to do with hotspot jdk8 and openj9 jdk11)",Social Conversation,False,90,CONTRIBUTOR,False,False,False,0.3191489362,0.1515151515,0.5,0.3859649123,0.1199922694,0.8800077306,0.001815624911,0.003294872886
"What I did is:
1) started demo2",Investigation and Exploration,False,32,CONTRIBUTOR,False,False,False,0.170212766,0.08080808081,0.75,0.3894736842,0.1199922694,0.8800077306,0.001815624911,0.003294872886
"(JRE is JDK8) via the boot dashboard
2) then started OpenJ9.zip (JRE is JDK11) via boot dashboard
then stopped both applications and restarted OpenJ9.zip and then demo2

I tried this way a couple of times no matter which application goes first but nothing happened.",Investigation and Exploration,False,269,CONTRIBUTOR,False,False,False,1.0,0.4747474747,1.0,0.3929824561,0.1199922694,0.8800077306,0.001815624911,0.003294872886
I guess if you still want to try some more try just hammering the restart button on the boot dash for a while.,Investigation and Exploration,False,110,NONE,True,False,False,0.5111111111,0.2323232323,0.1428571429,0.3964912281,0.1209219988,0.8790780012,0.003294872886,0.07075263326
Starting the 'OpenJ9' app serveral times in a row.,Investigation and Exploration,False,50,NONE,True,False,False,0.2,0.09090909091,0.2857142857,0.4,0.1209219988,0.8790780012,0.003294872886,0.07075263326
And *then* switch the OpenJ9 runtime on the Openj9 from JRE <-> JDK.,Investigation and Exploration,False,68,NONE,True,False,False,0.2666666667,0.1212121212,0.4285714286,0.4035087719,0.1209219988,0.8790780012,0.003294872886,0.07075263326
"That is basically what I did, which is a little different from your experiment.",Investigation and Exploration,False,79,NONE,True,False,False,0.3111111111,0.1414141414,0.5714285714,0.4070175439,0.1209219988,0.8790780012,0.003294872886,0.07075263326
It probably doesn't matter and likely its something about my VirtualBoxed windows setup that is different between you and me.,Investigation and Exploration,False,125,NONE,True,False,False,0.4444444444,0.202020202,0.7142857143,0.4105263158,0.1209219988,0.8790780012,0.003294872886,0.07075263326
"I'd share the VM somehow, but 

a) its a really big file (as VM images tend to be)
b) I'd have to spend some time to make sure all the secret stuff like github access tokens are removed from it first.",Investigation and Exploration,False,203,NONE,True,False,False,1.0,0.4545454545,0.8571428571,0.4140350877,0.1209219988,0.8790780012,0.003294872886,0.07075263326
"If you think its a good idea, I can probably make it happen somehow.",Social Conversation,False,68,NONE,True,False,False,0.3111111111,0.1414141414,1.0,0.4175438596,0.1209219988,0.8790780012,0.003294872886,0.07075263326
"@kdvolder , I just reviewed the steps you mentioned at https://github.com/spring-projects/sts4/issues/138#issuecomment-440088030 and there is one step I feel confused:

> Running STS with JDK 8 that was installed on my windows VM...

I have no idea what this means as there is no further explanation as to how to run that.",Investigation and Exploration,False,326,CONTRIBUTOR,False,False,False,1.0,0.5151515152,0.3333333333,0.4210526316,0.1408865936,0.8591134064,0.07075263326,0.1924076078
So I randomly created a demo Spring boot project (with JDK8) and launched it via boot dashboard.,Investigation and Exploration,False,96,CONTRIBUTOR,False,False,False,0.3333333333,0.1717171717,0.6666666667,0.4245614035,0.1408865936,0.8591134064,0.07075263326,0.1924076078
Is this what is expected to do ?,Social Conversation,False,32,CONTRIBUTOR,False,False,False,0.137254902,0.07070707071,1.0,0.4280701754,0.1408865936,0.8591134064,0.07075263326,0.1924076078
"To avoid any difference with STS4,  I tried the following steps:

1) downloaded/installed Oracle JDK 8 from https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-windows-x64.exe
![image] URL 
2) downloaded/unzipped STS4 (standalone tool package) from http://download.springsource.com/snapshot/STS4/nightly/dist/e4.9/spring-tool-suite-4-4.0.2.CI-B1369-e4.9.0-win32.win32.x86_64.zip
3) ran SpringToolSuite4.exe to launch STS4 with JDK8 (no changes in SpringToolSuite4.ini) 
4) Installed Java 11 support for Eclipse 4.9 from the Eclipse marketplace
5)",Investigation and Exploration,False,599,CONTRIBUTOR,False,False,False,1.0,0.6262626263,0.3333333333,0.4315789474,0.1951791301,0.8048208699,0.1924076078,0.004535009544
"imported OpenJ9.zip as an existing project
6) changed the workspace JRE to JDK11/OpenJ9
![image] URL 
7) Repeatedly started OpenJ9.zip via boot dashboard
![image] URL 

However, it still ended up with the same outputs as previously and nothing wrong occurred during the execution.",Investigation and Exploration,False,286,CONTRIBUTOR,False,False,False,0.7741935484,0.4848484848,0.6666666667,0.4350877193,0.1951791301,0.8048208699,0.1924076078,0.004535009544
"If every step is exactly the same as described in https://github.com/spring-projects/sts4/issues/138#issuecomment-440088030, then the crash might be triggered by something else.",Investigation and Exploration,False,177,CONTRIBUTOR,False,False,False,0.3225806452,0.202020202,1.0,0.4385964912,0.1951791301,0.8048208699,0.1924076078,0.004535009544
"To clarify what I mean by this:

> Running STS with JDK 8 that was installed on my windows VM.",Social Conversation,False,96,NONE,True,False,False,0.5555555556,0.202020202,0.125,0.4421052632,0.1964587946,0.8035412054,0.004535009544,0.001033447215
"O my windows VirtualBox VM, I have installed Oracle JDK 8 as the 'main' VM.",Investigation and Exploration,False,75,NONE,True,False,False,0.4166666667,0.1515151515,0.25,0.4456140351,0.1964587946,0.8035412054,0.004535009544,0.001033447215
Basically I ran the installer downloaded from Oracle's website.,Investigation and Exploration,False,63,NONE,True,False,False,0.25,0.09090909091,0.375,0.449122807,0.1964587946,0.8035412054,0.004535009544,0.001033447215
"Then I added it to my PATH so that when I'm in a terminal and type'

'java -version' or 'javac -version' it executes one of the Oracle JDK 8 executables.",Investigation and Exploration,False,155,NONE,True,False,False,0.8611111111,0.3131313131,0.5,0.4526315789,0.1964587946,0.8035412054,0.004535009544,0.001033447215
"Similarly when I launch STS (which is really just an Eclipse install with some stuff added on), then, since Eclipse is implemented in Java, the eclipse process will want to find a JVM to execute on.",Investigation and Exploration,False,198,NONE,True,False,False,1.0,0.3636363636,0.625,0.4561403509,0.1964587946,0.8035412054,0.004535009544,0.001033447215
The JVM it finds and executes itself with is also the Oracle JDK 8.,Investigation and Exploration,False,67,NONE,True,False,False,0.3888888889,0.1414141414,0.75,0.4596491228,0.1964587946,0.8035412054,0.004535009544,0.001033447215
"To sumarise when we launch a boot app from STS then there will be two java processes active:

1. the boot app, 
2. the STS/Eclipse process that launched the boot app.",Investigation and Exploration,False,169,NONE,True,False,False,0.9444444444,0.3434343434,0.875,0.4631578947,0.1964587946,0.8035412054,0.004535009544,0.001033447215
"So the boot app is running with OpenJ9-DKD/JRE-11, and the Eclipse process is running with Oracle-JDK-8.",Investigation and Exploration,False,104,NONE,True,False,False,0.5277777778,0.1919191919,1.0,0.4666666667,0.1964587946,0.8035412054,0.004535009544,0.001033447215
"changed the workspace JRE to JDK11/OpenJ9

I did not do that.",Investigation and Exploration,False,63,NONE,True,False,False,0.2954545455,0.1313131313,0.25,0.4701754386,0.1967504071,0.8032495929,0.001033447215,0.001977734278
I only added the JRE and JDK 11 as extra JREs to the workspace.,Investigation and Exploration,False,63,NONE,True,False,False,0.3181818182,0.1414141414,0.5,0.4736842105,0.1967504071,0.8032495929,0.001033447215,0.001977734278
"If the maven project is correctly setup then m2e should properly select the right JRE to use (i.e. it should pick a JRE or JDK 11 if the pom.xml says that is what it should use, this doesn't require changing the default workspace JRE).",Investigation and Exploration,False,235,NONE,True,False,False,1.0,0.4444444444,0.75,0.4771929825,0.1967504071,0.8032495929,0.001033447215,0.001977734278
"That being said, I don't think it matters what the workspace default is, as long as the JRE used for the project is selected as expected.",Investigation and Exploration,False,137,NONE,True,False,False,0.5909090909,0.2626262626,1.0,0.4807017544,0.1967504071,0.8032495929,0.001033447215,0.001977734278
then the crash might be triggered by something else.,Investigation and Exploration,False,52,NONE,True,False,False,0.25,0.09090909091,0.07142857143,0.4842105263,0.1973084735,0.8026915265,0.001977734278,0.003898730278
My gut feeling is saying all these little variations on these steps is probably not what matters.,Investigation and Exploration,False,97,NONE,True,False,False,0.4722222222,0.1717171717,0.1428571429,0.4877192982,0.1973084735,0.8026915265,0.001977734278,0.003898730278
But it is probably something in the OS/environment.,Investigation and Exploration,False,51,NONE,True,False,False,0.25,0.09090909091,0.2142857143,0.4912280702,0.1973084735,0.8026915265,0.001977734278,0.003898730278
As was hinted somewhere the error has something todo with DLL's resolutions.,Investigation and Exploration,False,76,NONE,True,False,False,0.3333333333,0.1212121212,0.2857142857,0.4947368421,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"So that perhaps points in that direction (though I think its strange that it sometimes works and sometimes doesn't, even without me making any changes to my system).",Investigation and Exploration,False,165,NONE,True,False,False,0.7777777778,0.2828282828,0.3571428571,0.498245614,0.1973084735,0.8026915265,0.001977734278,0.003898730278
All I can think of right now to try and help you reproduce it would be to try and package up a sanitised version of my Windows VirtualBox VM and somehow make it available for download.,Investigation and Exploration,False,184,NONE,True,False,False,1.0,0.3636363636,0.4285714286,0.501754386,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"If you have a better idea, let me know.",Social Conversation,False,39,NONE,True,False,False,0.25,0.09090909091,0.5,0.5052631579,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"Also, if you feel like this is probably not a common / reproducible error, and something just 'broken' on my system, then I understand.",Investigation and Exploration,False,135,NONE,True,False,False,0.6388888889,0.2323232323,0.5714285714,0.5087719298,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"You could just table this issue for now, or close it, and wait to see if other reports come in from other folks experiencing the same.",Action on Issue,False,134,NONE,True,False,False,0.7222222222,0.2626262626,0.6428571429,0.5122807018,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"If I'm really the only one running into this, then its probably not worth more of your time right now.",Social Conversation,False,102,NONE,True,False,False,0.5555555556,0.202020202,0.7142857143,0.5157894737,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"What I'm trying to say is, I appreciate all the time you have spend on this already and whatever you choose to do is fine by me.",Social Conversation,False,128,NONE,True,False,False,0.75,0.2727272727,0.7857142857,0.5192982456,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"If you want to investigate more, I will do my best to provide what I can to help.",Contribution and Commitment,False,81,NONE,True,False,False,0.5,0.1818181818,0.8571428571,0.5228070175,0.1973084735,0.8026915265,0.001977734278,0.003898730278
If you decide to close the issue as 'cannot reproduce'.,Social Conversation,False,55,NONE,True,False,False,0.3055555556,0.1111111111,0.9285714286,0.5263157895,0.1973084735,0.8026915265,0.001977734278,0.003898730278
That is fine too.,Social Conversation,False,17,NONE,True,False,False,0.1111111111,0.0404040404,1.0,0.5298245614,0.1973084735,0.8026915265,0.001977734278,0.003898730278
"If the maven project is correctly setup then m2e should properly select the right JRE to use (i.e. it should pick a JRE...

Already tried this way to let maven to chose the JDK11 and OpenJ9 still works good.",Investigation and Exploration,False,209,CONTRIBUTOR,False,False,False,1.0,0.404040404,0.5,0.5368421053,0.1984085961,0.8015914039,0.003898730278,0.003371874835
"I notice you mentioned at https://github.com/spring-projects/sts4/issues/138#issuecomment-440138532
that it only crashed on JDK11 JRE.",Observed Bug Behaviour,False,135,CONTRIBUTOR,False,False,False,0.35,0.1414141414,0.75,0.5403508772,0.1984085961,0.8015914039,0.003898730278,0.003371874835
I need to try it out with this version before deciding whether to move forward.,Investigation and Exploration,False,79,CONTRIBUTOR,False,False,False,0.375,0.1515151515,1.0,0.5438596491,0.1984085961,0.8015914039,0.003898730278,0.003371874835
"that it only crashed on JDK11 JRE

That is not the case.",Investigation and Exploration,False,58,NONE,True,False,False,0.5,0.1313131313,0.1428571429,0.5473684211,0.1993600534,0.8006399466,0.003371874835,0.005835937215
The bug I was investigating there was totally different and (probably) unrelated bug.,Investigation and Exploration,False,85,NONE,True,False,False,0.5,0.1313131313,0.2857142857,0.550877193,0.1993600534,0.8006399466,0.003371874835,0.005835937215
Something to do with JMX connection issues.,Investigation and Exploration,False,43,NONE,True,False,False,0.2692307692,0.07070707071,0.4285714286,0.5543859649,0.1993600534,0.8006399466,0.003371874835,0.005835937215
This bug seems to affect only JRE not JDK and it seems to affect both Hotspot and OpenJ9.,Investigation and Exploration,False,89,NONE,True,False,False,0.6923076923,0.1818181818,0.5714285714,0.5578947368,0.1993600534,0.8006399466,0.003371874835,0.005835937215
However... the segmentation fault is not limited to JRE it happened to me on both Open J9 JRE and Open J9 JDK (but never with Hotspot).,Observed Bug Behaviour,False,135,NONE,True,False,False,1.0,0.2626262626,0.7142857143,0.5614035088,0.1993600534,0.8006399466,0.003371874835,0.005835937215
"Anyhow... yes, I can upload the copy of OpenJRE.",Social Conversation,False,48,NONE,True,False,False,0.3461538462,0.09090909091,0.8571428571,0.5649122807,0.1993600534,0.8006399466,0.003371874835,0.005835937215
"Here it is:

https://app.box.com/s/uwe2kzgo6smck7gu1zxq9f43mntxwsqh",Social Conversation,False,69,NONE,True,False,False,0.1923076923,0.05050505051,1.0,0.5684210526,0.1993600534,0.8006399466,0.003371874835,0.005835937215
"Already tried with JRE (repeatedly starting) and no crash occurs during the run:
![image] URL 

I believe we already run out of all options we have to reproduce the crash except getting the VirtualBox image but everything works good on both JRE11 and JDK11

@DanHeidinga ,  any input at this point?",Investigation and Exploration,False,303,CONTRIBUTOR,False,False,False,1.0,0.5454545455,1.0,0.5719298246,0.2010068066,0.7989931934,0.005835937215,0.01382387628
@kdvolder Can you try to reproduce the issue with the CODE set so that the cores will be captured?,Bug Reproduction,True,98,MEMBER,False,False,False,0.9047619048,0.1919191919,0.3333333333,0.5754385965,0.2049075531,0.7950924469,0.01382387628,0.003692040835
Set CODE to where you want the files written.,Investigation and Exploration,True,45,MEMBER,False,False,False,0.4285714286,0.09090909091,0.6666666667,0.5789473684,0.2049075531,0.7950924469,0.01382387628,0.003692040835
"If you care share the cores and the stderr output from when they're written, we may be dig into this further.",Contribution and Commitment,False,109,MEMBER,False,False,False,1.0,0.2121212121,1.0,0.5824561404,0.2049075531,0.7950924469,0.01382387628,0.003692040835
@ChengJin01 did you try when Hotspot is on the path?,Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,1.0,0.101010101,1.0,0.5859649123,0.2059493532,0.7940506468,0.003692040835,0.0001864257721
@DanHeidinga I set the option but still no dumps.,Investigation and Exploration,False,49,NONE,True,False,False,0.2727272727,0.09090909091,0.1428571429,0.5894736842,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
I think I set the option correctly.,Investigation and Exploration,False,35,NONE,True,False,False,0.2121212121,0.07070707071,0.2857142857,0.5929824561,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
"Like this?

!",Social Conversation,False,15,NONE,True,False,False,0.09090909091,0.0303030303,0.4285714286,0.5964912281,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
"[openj9-launch-conf-vmargs] URL 

Our launcher also adds a few arguments of its own, so this ends up being the 'full' commandline on launch (according to Eclipse debug properties).

CODE",Investigation and Exploration,True,190,NONE,True,False,False,1.0,0.3333333333,0.5714285714,0.6,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
"After 3 restarts I got the crash, but no core dumps.",Investigation and Exploration,False,52,NONE,True,False,False,0.3333333333,0.1111111111,0.7142857143,0.6035087719,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
The output is pretty much the same as what I posted before...,Investigation and Exploration,False,61,NONE,True,False,False,0.3636363636,0.1212121212,0.8571428571,0.6070175439,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
"so this:

CODE

I realise the cores is really what you are after, but I just don't know what it is I should do to get them :-(",Investigation and Exploration,True,130,NONE,True,False,False,0.9090909091,0.303030303,1.0,0.6105263158,0.2060019578,0.7939980422,0.0001864257721,0.003392138506
"did you try when Hotspot is on the path?

@pshipton ,  already tried on both Oracle JDK8 and JDK11 but it ended up the same results as our builds.
![image] URL 

![image] URL ",Investigation and Exploration,False,180,CONTRIBUTOR,False,False,False,1.0,0.3636363636,1.0,0.6140350877,0.2069591331,0.7930408669,0.003392138506,0.002877441266
"@kdvolder Can you try using the path: CODE?

Are you seeing any output like this when the segfault occurs?",Investigation and Exploration,True,108,MEMBER,False,False,False,1.0,0.202020202,0.25,0.6175438596,0.2077710739,0.7922289261,0.002877441266,0.004409374785
"It should show where the files were written
CODE

I also noticed CODE on the commandline.",Investigation and Exploration,True,92,MEMBER,False,False,False,0.9,0.1818181818,0.5,0.6210526316,0.2077710739,0.7922289261,0.002877441266,0.004409374785
Does the app run without that?,Investigation and Exploration,False,30,MEMBER,False,False,False,0.3,0.06060606061,0.75,0.6245614035,0.2077710739,0.7922289261,0.002877441266,0.004409374785
We find that turning the verifier off can lead to strange behaviour for a variety of reasons.,Investigation and Exploration,False,93,MEMBER,False,False,False,0.85,0.1717171717,1.0,0.6280701754,0.2077710739,0.7922289261,0.002877441266,0.004409374785
already tried on both Oracle JDK8 and JDK11 but it ended up the same results as our builds.,Investigation and Exploration,False,91,CONTRIBUTOR,False,False,False,1.0,0.1818181818,0.3333333333,0.6315789474,0.2090152874,0.7909847126,0.004409374785,0.007850146101
This is not what I asked.,Social Conversation,False,25,CONTRIBUTOR,False,False,False,0.3333333333,0.06060606061,0.6666666667,0.6350877193,0.2090152874,0.7909847126,0.004409374785,0.007850146101
Make sure Oracle is on the OS path when you try running with OpenJ9.,Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,0.7777777778,0.1414141414,1.0,0.6385964912,0.2090152874,0.7909847126,0.004409374785,0.007850146101
"Are you seeing any output like this when the segfault occurs ...

No, I pasted the output in its entirety.",Investigation and Exploration,False,108,NONE,True,False,False,1.0,0.202020202,0.5,0.6421052632,0.2112303991,0.7887696009,0.007850146101,0.004198632607
There's nothing like that in it.,Investigation and Exploration,False,32,NONE,True,False,False,0.3,0.06060606061,1.0,0.6456140351,0.2112303991,0.7887696009,0.007850146101,0.004198632607
"Can you try using the path: CODE?

Tried, still no dumps.",Investigation and Exploration,True,59,NONE,True,False,False,0.4615384615,0.1212121212,0.2,0.649122807,0.2124151465,0.7875848535,0.004198632607,0.0008429687088
I also tried launching it using the plain Java launcher (instead of the one specific for boot apps) and not adding any strange options like '-noverify'.,Investigation and Exploration,False,152,NONE,True,False,False,1.0,0.2626262626,0.4,0.6526315789,0.2124151465,0.7875848535,0.004198632607,0.0008429687088
That also didn't help.,Investigation and Exploration,False,22,NONE,True,False,False,0.1538461538,0.0404040404,0.6,0.6561403509,0.2124151465,0.7875848535,0.004198632607,0.0008429687088
Still segfaults after a some tries and still no dumps.,Investigation and Exploration,False,54,NONE,True,False,False,0.3846153846,0.101010101,0.8,0.6596491228,0.2124151465,0.7875848535,0.004198632607,0.0008429687088
"This is the full commandline it now launches with:

CODE",Investigation and Exploration,True,58,NONE,True,False,False,0.4230769231,0.1111111111,1.0,0.6631578947,0.2124151465,0.7875848535,0.004198632607,0.0008429687088
Confirmed with Cheng the Oracle JVM was on the path.,Task Progress,False,52,CONTRIBUTOR,False,False,False,1.0,0.101010101,1.0,0.6666666667,0.2126530108,0.7873469892,0.0008429687088,0.004786279063
"@kdvolder ,  Did you mean it can be directly executed on the command line ?",Investigation and Exploration,False,75,CONTRIBUTOR,False,False,False,0.875,0.1414141414,0.3333333333,0.6701754386,0.2140035771,0.7859964229,0.004786279063,0.001641357342
"If so, one way to get the stacktrace is to debug it via Windbg  URL ",Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,1.0,0.1616161616,0.6666666667,0.6736842105,0.2140035771,0.7859964229,0.004786279063,0.001641357342
"Once it traps in ntdll.dll,  CODEwill show what happens to the stack",Investigation and Exploration,True,68,CONTRIBUTOR,False,False,False,0.8125,0.1313131313,1.0,0.6771929825,0.2140035771,0.7859964229,0.004786279063,0.001641357342
Did you mean it can be directly executed on the command line ?,Investigation and Exploration,False,62,NONE,True,False,False,0.2857142857,0.1212121212,0.125,0.6807017544,0.2144667264,0.7855332736,0.001641357342,0.00438505838
I didn't mean that.,Social Conversation,False,19,NONE,True,False,False,0.09523809524,0.0404040404,0.25,0.6842105263,0.2144667264,0.7855332736,0.001641357342,0.00438505838
"Maybe it could, but I haven't tried that.",Investigation and Exploration,False,41,NONE,True,False,False,0.1904761905,0.08080808081,0.375,0.6877192982,0.2144667264,0.7855332736,0.001641357342,0.00438505838
I launch it from Eclipse.,Investigation and Exploration,False,25,NONE,True,False,False,0.119047619,0.05050505051,0.5,0.6912280702,0.2144667264,0.7855332736,0.001641357342,0.00438505838
I just pasted the full commandline that Eclipse reports in the properties page you can access from the debug perspective (if you right click the process in the debug view and select 'Properties'.,Investigation and Exploration,False,195,NONE,True,False,False,0.7857142857,0.3333333333,0.625,0.6947368421,0.2144667264,0.7855332736,0.001641357342,0.00438505838
This corresponds to the commandline that eclipse used to launch the app.,Investigation and Exploration,False,72,NONE,True,False,False,0.2857142857,0.1212121212,0.75,0.698245614,0.2144667264,0.7855332736,0.001641357342,0.00438505838
"I pasted it to show a pircture of exactly what ends up being passed to the JVM on launch (it can sometimes be hard to figure this out, because various parts of Eclipse or extensions can modify that before it gets launched).",Investigation and Exploration,False,223,NONE,True,False,False,1.0,0.4242424242,0.875,0.701754386,0.2144667264,0.7855332736,0.001641357342,0.00438505838
I will give it a try on commandline.,Investigation and Exploration,False,36,NONE,True,False,False,0.1904761905,0.08080808081,1.0,0.7052631579,0.2144667264,0.7855332736,0.001641357342,0.00438505838
"It can be launched with ""..\bin\java.exe -Dserver.port=8081  -Dcom.sun.management......"" 
(I specified the port number to avoid any conflict in there)
![image] URL ",Investigation and Exploration,False,166,CONTRIBUTOR,False,False,False,1.0,0.2626262626,0.5,0.7087719298,0.2157040785,0.7842959215,0.00438505838,0.001276611266
But I am not sure how to repeatedly start it (probably just kill it with ctrl+c and restart),Investigation and Exploration,False,92,CONTRIBUTOR,False,False,False,0.6923076923,0.1818181818,1.0,0.7122807018,0.2157040785,0.7842959215,0.00438505838,0.001276611266
I tried launching it on CLI just now.,Investigation and Exploration,False,37,NONE,True,False,False,0.25,0.08080808081,0.1111111111,0.7157894737,0.2160643057,0.7839356943,0.001276611266,0.001471142506
"I repeated it quite a few times, maybe 20 times or so.",Investigation and Exploration,False,54,NONE,True,False,False,0.375,0.1212121212,0.2222222222,0.7192982456,0.2160643057,0.7839356943,0.001276611266,0.001471142506
Got no segfaults.,Investigation and Exploration,False,17,NONE,True,False,False,0.09375,0.0303030303,0.3333333333,0.7228070175,0.2160643057,0.7839356943,0.001276611266,0.001471142506
I couldn't use the commandline exactly the same.,Investigation and Exploration,False,48,NONE,True,False,False,0.25,0.08080808081,0.4444444444,0.7263157895,0.2160643057,0.7839356943,0.001276611266,0.001471142506
Launching from terminal using java.exe seems to work fine.,Investigation and Exploration,False,58,NONE,True,False,False,0.28125,0.09090909091,0.6666666667,0.7333333333,0.2160643057,0.7839356943,0.001276611266,0.001471142506
BTW: To repeatedly start it,Social Conversation,False,27,NONE,True,False,False,0.15625,0.05050505051,0.7777777778,0.7368421053,0.2160643057,0.7839356943,0.001276611266,0.001471142506
I just press CTRL-C which stops the process.,Investigation and Exploration,False,44,NONE,True,False,False,0.28125,0.09090909091,0.8888888889,0.7403508772,0.2160643057,0.7839356943,0.001276611266,0.001471142506
Then 'arrow up' to get command history and press 'enter' to run again.,Investigation and Exploration,False,70,NONE,True,False,False,0.40625,0.1313131313,1.0,0.7438596491,0.2160643057,0.7839356943,0.001276611266,0.001471142506
"When I use 'javaw.exe'... looks like perhaps it does launch, but I can't see the output anywhere so its kind of impossible to see what's going on.",Investigation and Exploration,False,146,CONTRIBUTOR,False,False,False,1.0,0.2727272727,0.25,0.7473684211,0.2164794247,0.7835205753,0.001471142506,0.02954037942
It does launch.,Investigation and Exploration,False,15,CONTRIBUTOR,False,False,False,0.1111111111,0.0303030303,0.5,0.750877193,0.2164794247,0.7835205753,0.001471142506,0.02954037942
"You can see the JDK via Task Manager.
![image] URL 

Given that it runs on the command line.",Investigation and Exploration,False,95,CONTRIBUTOR,False,False,False,0.7407407407,0.202020202,0.75,0.7543859649,0.2164794247,0.7835205753,0.001471142506,0.02954037942
I believe it can be debugged via Windbg as long as it crashes with javaw.exe,Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,0.5555555556,0.1515151515,1.0,0.7578947368,0.2164794247,0.7835205753,0.001471142506,0.02954037942
"I believe it can be debugged via Windbg as long as it crashes with javaw.exe

I don't know if it crashes, but I'll try that tomorrow.",Investigation and Exploration,False,135,NONE,True,False,False,1.0,0.2727272727,1.0,0.7614035088,0.224814969,0.775185031,0.02954037942,0.2876671246
Tried for a bit to launch from terminal but don't seem to be getting the crash.,Investigation and Exploration,False,79,NONE,True,False,False,1.0,0.1616161616,0.5,0.7649122807,0.30598732,0.69401268,0.2876671246,0.001414404228
Still getting it when launching from within Eclipse.,Investigation and Exploration,False,52,NONE,True,False,False,0.5,0.08080808081,1.0,0.7684210526,0.30598732,0.69401268,0.2876671246,0.001414404228
@kdvolder The best way forward may be to create the VM image and share it with us as we've had no luck reproducing the crash.,Investigation and Exploration,False,125,MEMBER,False,False,False,1.0,0.2626262626,0.5,0.7719298246,0.3063864289,0.6936135711,0.001414404228,1.0
"If there's an issue with storage, I'm sure we can find some temporary space for you to upload to.",Investigation and Exploration,False,97,MEMBER,False,False,False,0.7307692308,0.1919191919,1.0,0.7754385965,0.3063864289,0.6936135711,0.001414404228,1.0
I've cleaned up the VM of stuff like github tokens etc.,Investigation and Exploration,False,55,NONE,True,False,False,0.5714285714,0.1212121212,0.2,0.7789473684,0.5885610122,0.4114389878,1.0,0.002646435418
And I've exported it from my VirtualBox into a '.ova' file.,Investigation and Exploration,False,59,NONE,True,False,False,0.5714285714,0.1212121212,0.4,0.7824561404,0.5885610122,0.4114389878,1.0,0.002646435418
I've uploaded it to google drive.,Task Progress,False,33,NONE,True,False,False,0.3333333333,0.07070707071,0.6,0.7859649123,0.5885610122,0.4114389878,1.0,0.002646435418
"I can share a link to it via private email, I don't think I should share this in a public forum.",Social Conversation,False,96,NONE,True,False,False,1.0,0.2121212121,0.8,0.7894736842,0.5885610122,0.4114389878,1.0,0.002646435418
Can I send the link to one of you?,Social Conversation,False,34,NONE,True,False,False,0.4285714286,0.09090909091,1.0,0.7929824561,0.5885610122,0.4114389878,1.0,0.002646435418
"@kdvolder , please send it to jincheng@ca.ibm.com if you can.",Social Conversation,False,61,CONTRIBUTOR,False,False,False,1.0,0.09090909091,1.0,0.7964912281,0.589307769,0.410692231,0.002646435418,0.03204496914
Sent link in private email.,Social Conversation,False,27,NONE,True,False,False,1.0,0.05050505051,1.0,0.8,0.5983500448,0.4016499552,0.03204496914,0.374152472
"By copying the STS4 along with the workspace out of the VM image,  I managed to reproduce the crash locally.",Bug Reproduction,False,108,CONTRIBUTOR,False,False,False,1.0,0.2121212121,0.3333333333,0.8035087719,0.7039263627,0.2960736373,0.374152472,0.3518178539
The behavior seems to be weird.,Observed Bug Behaviour,False,31,CONTRIBUTOR,False,False,False,0.2857142857,0.06060606061,0.6666666667,0.8070175439,0.7039263627,0.2960736373,0.374152472,0.3518178539
So still double-checking all settings to see what triggered the crash.,Investigation and Exploration,False,70,CONTRIBUTOR,False,False,False,0.5714285714,0.1212121212,1.0,0.8105263158,0.7039263627,0.2960736373,0.374152472,0.3518178539
"Investigation shows there are two ways to launch OpenJ9.zip from STS4:
[1] no changes in SpringToolSuite4.ini (JRE for STS4 is set up to Java 8 by default)

<1> directly launch SpringToolSuite4.exe (no Java 8 gets started) 
 <2> then start OpenJ9.zip (set to Java 11) at boot dash which gets Java 11 started.",Investigation and Exploration,False,312,CONTRIBUTOR,False,False,False,1.0,0.5555555556,0.08333333333,0.8140350877,0.803200419,0.196799581,0.3518178539,0.2306492075
"In such case, there is only Java VM on the machine: Java 11 for OpenJ9.zip

Repeatedly starting will trigger segment fault (not really crash/just stuck in ntdll.dll/windbg still works)",Investigation and Exploration,False,186,CONTRIBUTOR,False,False,False,0.5636363636,0.3131313131,0.1666666667,0.8175438596,0.803200419,0.196799581,0.3518178539,0.2306492075
[STS4_windbg_java11_jre_Xint.txt] URL,Investigation and Exploration,False,38,CONTRIBUTOR,False,False,False,0.03636363636,0.0202020202,0.25,0.8210526316,0.803200419,0.196799581,0.3518178539,0.2306492075
"[2] add ""-vm C:/Program Files/Java/jdk1.8.0_191/bin/javaw.exe"" to explicitly specify the location of Java 8 for STS4.",Investigation and Exploration,False,117,CONTRIBUTOR,False,False,False,0.3454545455,0.1919191919,0.3333333333,0.8245614035,0.803200419,0.196799581,0.3518178539,0.2306492075
<1> directly launch SpringToolSuite4.exe (will gets Java 8 started at the same time),Investigation and Exploration,False,84,CONTRIBUTOR,False,False,False,0.2363636364,0.1313131313,0.4166666667,0.8280701754,0.803200419,0.196799581,0.3518178539,0.2306492075
<2> then start OpenJ9.zip (set to Java 11) at boot dash which gets Java 11 started.,Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,0.2909090909,0.1616161616,0.5,0.8315789474,0.803200419,0.196799581,0.3518178539,0.2306492075
"In such case, there are two Javas VM on the machine:",Investigation and Exploration,False,52,CONTRIBUTOR,False,False,False,0.2,0.1111111111,0.5833333333,0.8350877193,0.803200419,0.196799581,0.3518178539,0.2306492075
"Java 8 for STS4 and Java 11 for OpenJ9.zip 
[STS4_windbg_java8_jre.txt] URL 
[STS4_windbg_java11_jre_Xint2.txt] URL 
No segment fault was detected in this way.",Investigation and Exploration,False,162,CONTRIBUTOR,False,False,False,0.4363636364,0.2424242424,0.6666666667,0.8385964912,0.803200419,0.196799581,0.3518178539,0.2306492075
"Comparison of these windbg results indicates:
Java 11 VM loaded java.dll from Java 8 because the path includes Java 8 as follows: (from STS4_windbg_java11_jre_Xint.txt)
CODECODE425f0000 00007ff7CODE11db0000 00007ffdCODE10130000 00007ffdCODEf5530000 00007ffcCODEf8dc0000 00007ffcCODE5d880000 00000000CODECODE",Investigation and Exploration,True,309,CONTRIBUTOR,False,False,False,0.6,0.3333333333,0.75,0.8421052632,0.803200419,0.196799581,0.3518178539,0.2306492075
So it seems  OpenJ9 VM (Java 11) loaded the Oracle dll (java.dll) as Oracle VM (Java 8) was on the path.,Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.4,0.2222222222,0.8333333333,0.8456140351,0.803200419,0.196799581,0.3518178539,0.2306492075
"However, this segment fault is only triggered by the STS4 (sts-4.0.2.CI-B1362) from the VM image instead of sts-4.0.2.CI-B1373.",Investigation and Exploration,False,127,CONTRIBUTOR,False,False,False,0.3636363636,0.202020202,0.9166666667,0.849122807,0.803200419,0.196799581,0.3518178539,0.2306492075
"We never reproduced this problem partially because we were using the recent version of STS4 (sts-4.0.2.CI-B1373) (the older one was already removed on the downloading site)

@kdvolder ,  could you please try with the latest version of STS4 to see whether the issue is reproducible on your VM image?",Bug Reproduction,False,300,CONTRIBUTOR,False,False,False,0.9272727273,0.5151515152,1.0,0.8526315789,0.803200419,0.196799581,0.3518178539,0.2306492075
@ChengJin01 It might be worth checking what changed between sts-4.0.2.CI-B1362 & sts-4.0.2.CI-B1373 to see if there's something we should be guarding against in the VM to prevent this kind of issue in the future.,Investigation and Exploration,False,212,MEMBER,False,False,False,1.0,0.3535353535,1.0,0.8561403509,0.868283763,0.131716237,0.2306492075,0.1143762639
"I went through all java path related settings (installed JRE/Java compiler, etc) but didn't detect anything different in comparing STS4 B1362 with STS4 B1373.",Investigation and Exploration,False,158,CONTRIBUTOR,False,False,False,0.3246753247,0.2525252525,0.125,0.8596491228,0.9005578376,0.09944216237,0.1143762639,0.00534555638
So I installed B1373 & followed the same steps before to import/launch OpenJ9.zip on both a new fyre Windows machine and the original VM image.,Investigation and Exploration,False,143,CONTRIBUTOR,False,False,False,0.3246753247,0.2525252525,0.25,0.8631578947,0.9005578376,0.09944216237,0.1143762639,0.00534555638
It is interesting that the segment fault occurred on both of them.,Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,0.1558441558,0.1212121212,0.375,0.8666666667,0.9005578376,0.09944216237,0.1143762639,0.00534555638
Repeating the same steps on the previous Windows machine but nothing wrong happened (suspect the setting with STS4 got messed up by the existing maven setting in that machine).,Investigation and Exploration,False,176,CONTRIBUTOR,False,False,False,0.3766233766,0.2929292929,0.5,0.8701754386,0.9005578376,0.09944216237,0.1143762639,0.00534555638
So the problem has nothing to with the version of STS4.,Investigation and Exploration,False,55,CONTRIBUTOR,False,False,False,0.1428571429,0.1111111111,0.625,0.8736842105,0.9005578376,0.09944216237,0.1143762639,0.00534555638
"The following windbg log shows removing the Java 8 from the Installed JRE (Only keeping Java 11) doesn't stop the segment fault
!",Investigation and Exploration,False,130,CONTRIBUTOR,False,False,False,0.2987012987,0.2323232323,0.75,0.8771929825,0.9005578376,0.09944216237,0.1143762639,0.00534555638
"[image] URL 

[sts4_windbg_java11_b1362_NOK_remove_java8_from_instaledJRE.txt] URL 
because the Java 8 bin path was still out there.
CODE",Investigation and Exploration,True,141,CONTRIBUTOR,False,False,False,0.2337662338,0.1818181818,0.875,0.8807017544,0.9005578376,0.09944216237,0.1143762639,0.00534555638
"My understanding is,  if all steps are allowed and logically correct to launch the project (specifically, there is no way to remove the java 8 bin from the path in STS4/Eclipse according to the windbg results), we might need to look at our code with library loading to see where should be modified to accommodate STS4/Eclipse (to stop loading java.dll from Java 8 even when the Java 8 bin is added to the path)",Solution Discussion,False,410,CONTRIBUTOR,False,False,False,1.0,0.7777777778,1.0,0.8842105263,0.9005578376,0.09944216237,0.1143762639,0.00534555638
Is there something that STS could do in its Boot App launcher to avoid this problem?,Solution Discussion,False,84,NONE,True,False,False,0.7272727273,0.1616161616,0.25,0.8877192982,0.9020662178,0.09793378223,0.00534555638,0.002496484253
Maybe somekind of cleaning of the environment that the launcher could do?,Solution Discussion,False,73,NONE,True,False,False,0.5454545455,0.1212121212,0.5,0.8912280702,0.9020662178,0.09793378223,0.00534555638,0.002496484253
Not sure its a good idea.,Social Conversation,False,25,NONE,True,False,False,0.2727272727,0.06060606061,0.75,0.8947368421,0.9020662178,0.09793378223,0.00534555638,0.002496484253
But if its hard to make OpenJ9 run correctly with 'wacky' stuff in its environment then perhaps it might be an option.,Workarounds,False,118,NONE,True,False,False,1.0,0.2222222222,1.0,0.898245614,0.9020662178,0.09793378223,0.00534555638,0.002496484253
"The only way around for the moment is to explicitly add the following line to SpringToolSuite4.ini
CODE
which will start Java 8 separately.",Workarounds,True,141,CONTRIBUTOR,False,False,False,1.0,0.2525252525,0.3333333333,0.901754386,0.9027706622,0.09722933782,0.002496484253,0.002703173696
"As a result, there is no Java 8 bin on the path when launching OpenJ9.zip.",Solution Discussion,False,74,CONTRIBUTOR,False,False,False,0.6,0.1515151515,0.6666666667,0.9052631579,0.9027706622,0.09722933782,0.002496484253,0.002703173696
But this won't be the final solution until we figure out everything underlying that.,Solution Discussion,False,84,CONTRIBUTOR,False,False,False,0.56,0.1414141414,1.0,0.9087719298,0.9027706622,0.09722933782,0.002496484253,0.002703173696
I was thinking more along the lines of controlling/cleaning the environment at the point where STS launches a boot app (i.e. inside the launch configration delegate for boot apps which basically kicks of the boot app when user presses 'start' button).,Solution Discussion,False,251,NONE,True,False,False,1.0,0.4242424242,0.2,0.9122807018,0.9035334291,0.09646657091,0.002703173696,0.005495507544
"I think, in theory, that delegate could modify the environment if it wanted to.",Solution Discussion,False,79,NONE,True,False,False,0.3333333333,0.1414141414,0.4,0.9157894737,0.9035334291,0.09646657091,0.002703173696,0.005495507544
I'm not keen on that sort of 'hackery'.,Social Conversation,False,39,NONE,True,False,False,0.1904761905,0.08080808081,0.6,0.9192982456,0.9035334291,0.09646657091,0.002703173696,0.005495507544
It probably be better if OpenJ9 could avoid the problem somehow by itself.,Solution Discussion,False,74,NONE,True,False,False,0.3095238095,0.1313131313,0.8,0.9228070175,0.9035334291,0.09646657091,0.002703173696,0.005495507544
"But if that looks to be infeasible, then maybe this 'hackery' is still a viable solution (at least as far as launching boot apps from STS is concerned).",Workarounds,False,152,NONE,True,False,False,0.6666666667,0.2828282828,1.0,0.9263157895,0.9035334291,0.09646657091,0.002703173696,0.005495507544
"I think, in theory, that delegate could modify the environment if it wanted to...

The suggested fix above functionally works from boot app perspective.",Solution Discussion,False,154,CONTRIBUTOR,False,False,False,1.0,0.2525252525,0.5,0.9298245614,0.9050841216,0.09491587836,0.005495507544,0.008713378481
So it is possible that something else in setting might change in such case.,Solution Discussion,False,75,CONTRIBUTOR,False,False,False,0.56,0.1414141414,1.0,0.9333333333,0.9050841216,0.09491587836,0.005495507544,0.008713378481
I tried with a locally compiled build (with the latest changes) on the same failing Window machine with everything unmodified and nothing wrong happened when repeatedly launching many times.,Solution Discussion,False,190,CONTRIBUTOR,False,False,False,1.0,0.2929292929,0.5,0.9368421053,0.9075428156,0.09245718442,0.008713378481,0.001248242127
I am wondering whether there is anything different in config/setting during compilation as compared to the JDK generated from AdoptOpenJDK.,Solution Discussion,False,139,CONTRIBUTOR,False,False,False,0.724137931,0.2121212121,1.0,0.9403508772,0.9075428156,0.09245718442,0.008713378481,0.001248242127
@ChengJin01 what causes java.dll to get loaded in the failure case?,Investigation and Exploration,False,67,CONTRIBUTOR,False,False,False,0.44,0.1111111111,0.2,0.9438596491,0.9078950378,0.09210496222,0.001248242127,0.002277636608
"I see a couple of spots in the VM that load it, these could be changed to load from a particular location, similar to #3650.",Investigation and Exploration,False,124,CONTRIBUTOR,False,False,False,1.0,0.2525252525,0.4,0.9473684211,0.9078950378,0.09210496222,0.001248242127,0.002277636608
However these may not be the places that cause the wrong java.dll to get loaded.,Investigation and Exploration,False,80,CONTRIBUTOR,False,False,False,0.6,0.1515151515,0.6,0.950877193,0.9078950378,0.09210496222,0.001248242127,0.002277636608
You can also check the com.ibm.oti.vm.bootstrap.library.path system property when the failure occurs.,Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,0.48,0.1212121212,0.8,0.9543859649,0.9078950378,0.09210496222,0.001248242127,0.002277636608
"It would be interesting to understand why the problem is intermittent.

https://github.com/eclipse/openj9/blob/15fc57c3ef1673fe144b9786b5fb6517c92493a3/runtime/jcl/common/stdinit.c#L274

https://github.com/eclipse/openj9/blob/15fc57c3ef1673fe144b9786b5fb6517c92493a3/runtime/jcl/common/vm_scar.c#L325",Investigation and Exploration,False,304,CONTRIBUTOR,False,False,False,0.6,0.1515151515,1.0,0.9578947368,0.9078950378,0.09210496222,0.001248242127,0.002277636608
"Possibly this issue was already fixed by #3650, in which case it should not occur with a nightly build from Adopt.",Solution Discussion,False,114,CONTRIBUTOR,False,False,False,1.0,0.2121212121,1.0,0.9614035088,0.9085377289,0.09146227106,0.002277636608,0.0001094238228
Let me try a nightly build to see what happens.,Task Progress,False,47,CONTRIBUTOR,False,False,False,1.0,0.101010101,1.0,0.9649122807,0.9085686056,0.09143139443,0.0001094238228,0.006460058278
"Already tried with the latest nightly build at https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk11u-2018-11-29-02-58/OpenJDK11U-jdk_x64_windows_openj9_2018-11-29-02-58.zip and no segment fault occurred after repeatedly launching the project over 20 times 
CODE
[sts4_windbg_java11_nightly.txt] URL ",Testing,True,323,CONTRIBUTOR,False,False,False,1.0,0.2727272727,0.25,0.9684210526,0.9103914698,0.08960853018,0.006460058278,0.07945790628
The windbg results java.dll from Java 8 didn't get loaded even though Java 8 bin was added to the path.,Investigation and Exploration,False,103,CONTRIBUTOR,False,False,False,0.7407407407,0.202020202,0.5,0.9719298246,0.9103914698,0.08960853018,0.006460058278,0.07945790628
So it is highly likely that we already fixed the issue via #3650.,Solution Discussion,False,65,CONTRIBUTOR,False,False,False,0.4814814815,0.1313131313,0.75,0.9754385965,0.9103914698,0.08960853018,0.006460058278,0.07945790628
I need to double-check later on the original VM image to see whether it still works.,Task Progress,False,84,CONTRIBUTOR,False,False,False,0.6296296296,0.1717171717,1.0,0.9789473684,0.9103914698,0.08960853018,0.006460058278,0.07945790628
"Already checked STS4 B1362 on the original VM image as follows:
1) set the project JRE to the previous JDK11 build and hit segment fault intermittently
2) set the project JRE to the latest **nightly** build & repeated launching the OpenJ9 project over 20 times
   and no thing wrong was detected.",Testing,False,299,CONTRIBUTOR,False,False,False,1.0,0.5353535354,0.25,0.9824561404,0.9328124714,0.06718752859,0.07945790628,0.2381062384
3) set the project JRE back to the previous JDK11 build and segment fault occurred after a couple of runs.,Testing,False,106,CONTRIBUTOR,False,False,False,0.3773584906,0.202020202,0.5,0.9859649123,0.9328124714,0.06718752859,0.07945790628,0.2381062384
"Based on the investigation above, I believe the issue with java.dll was fixed by #3650 (the fix to set up the absolute path for libjava.so coincidentally addressed the problem here).",Solution Discussion,False,182,CONTRIBUTOR,False,False,False,0.5660377358,0.303030303,0.75,0.9894736842,0.9328124714,0.06718752859,0.07945790628,0.2381062384
It also explains why the java.dll from Java 8 got loaded when launching Java 11 (because it loaded the library based on a relative path in which case there is no way to tell whether it is from Java 11 or from Java 8).,Investigation and Exploration,False,217,CONTRIBUTOR,False,False,False,0.8301886792,0.4444444444,1.0,0.9929824561,0.9328124714,0.06718752859,0.07945790628,0.2381062384
Thanks @ChengJin01 for all your work in investigating this.,Social Conversation,False,59,CONTRIBUTOR,False,False,True,1.0,0.09090909091,0.5,0.9964912281,1.0,0.0,0.2381062384,0.0
I'll go ahead and close it.,Action on Issue,False,27,CONTRIBUTOR,False,False,True,0.6666666667,0.06060606061,1.0,1.0,1.0,0.0,0.2381062384,0.0
Agent support for exception catch information,Motivation,False,45,CONTRIBUTOR,True,True,False,0.1276595745,0.09375,0.25,0.007092198582,0.0,1.0,0.0,0.0002548603798
This Epic tracks the work to enable agents to request exception catch information without the JVM going into Full Speed Debug (FSD) mode.,Motivation,False,137,CONTRIBUTOR,True,True,False,0.4893617021,0.359375,0.5,0.01418439716,0.0,1.0,0.0,0.0002548603798
Most of the work here is on the VM side but there are JIT portions as well to ensure we have a stack map at the start of every exception catch block and to ensure we don't enable throw to goto transformations when this mode is enabled.,Motivation,False,235,CONTRIBUTOR,True,True,False,1.0,0.734375,0.75,0.02127659574,0.0,1.0,0.0,0.0002548603798
"Other than the obvious desire to enable as many features as possible without going into FSD, the motivation behind this work is the upcoming cooperation with OverOps - their agent needs to get exception events, but can not tolerate the overhead of FSD being imposed on production systems.",Motivation,False,288,CONTRIBUTOR,True,True,False,1.0,0.734375,1.0,0.02836879433,0.0,1.0,0.0,0.0002548603798
@gacholio I've opened up the Epic to track the work but I'm not too familiar with the VM portion or the high level.,Social Conversation,False,115,CONTRIBUTOR,True,False,False,1.0,0.375,0.1666666667,0.03546099291,4.6e-05,0.9999539836,0.0002548603798,0.003714710253
I've written down what I could,Social Conversation,False,30,CONTRIBUTOR,True,False,False,0.2916666667,0.109375,0.3333333333,0.04255319149,4.6e-05,0.9999539836,0.0002548603798,0.003714710253
but I encourage you to add some more detail here if possible.,Contribution and Commitment,False,61,CONTRIBUTOR,True,False,False,0.5,0.1875,0.5,0.04964539007,4.6e-05,0.9999539836,0.0002548603798,0.003714710253
I'll open up the JIT issues for us to tackle against this Epic.,Task Progress,False,63,CONTRIBUTOR,True,False,False,0.5416666667,0.203125,0.6666666667,0.05673758865,4.6e-05,0.9999539836,0.0002548603798,0.003714710253
I've also tagged it for 0.12.0 as I asumme the work will be done for the next release.,Action on Issue,False,86,CONTRIBUTOR,True,False,False,0.7916666667,0.296875,0.8333333333,0.06382978723,4.6e-05,0.9999539836,0.0002548603798,0.003714710253
@pshipton FYI.,Contribution and Commitment,False,14,CONTRIBUTOR,True,False,False,0.08333333333,0.03125,1.0,0.07092198582,4.6e-05,0.9999539836,0.0002548603798,0.003714710253
The main issue I ran into when doing the VM side of the work  was that bytecode PC information is stored in the JIT exception handler data only in FSD mode.,Observed Bug Behaviour,False,156,CONTRIBUTOR,False,False,False,0.5,0.5,0.09090909091,0.0780141844,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"- jitExceptionHandlerSearch updates userData1 with the bytecode PC if present
- getJitPCOffsetFromExceptionHandler assumes the bytecode PC data is there

Both of the above are used in the JVMTI Exception event (i.e. exception throw) to identify the catching location.",Investigation and Exploration,False,270,CONTRIBUTOR,False,False,False,0.59375,0.59375,0.1818181818,0.08510638298,0.000716727624,0.9992832724,0.003714710253,0.00734286415
The JVMTI ExceptionCatch event already relies on the stack map at the catch point and gets the bytecode PC information from getCurrentByteCodeIndexAndIsSameReceiver.,Investigation and Exploration,False,165,CONTRIBUTOR,False,False,False,0.34375,0.34375,0.2727272727,0.09219858156,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"This works in FSD, but not in normal mode.",Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.140625,0.140625,0.3636363636,0.09929078014,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"https://github.com/eclipse/openj9/pull/3368 changes the VM to always use the stack map approach, obviating the need for bytecode PC information in the JIT handler data completely.",Solution Discussion,False,179,CONTRIBUTOR,False,False,False,0.375,0.375,0.4545454545,0.1063829787,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"getJitPCOffsetFromExceptionHandler is no longer called from anywhere in the codebase, and the userData1 value from jitExceptionHandlerSearch is ignored.",Solution Discussion,False,152,CONTRIBUTOR,False,False,False,0.28125,0.28125,0.5454545455,0.1134751773,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"The above change is safe to make today, given that ExceptionCatch forces FSD.",Solution Discussion,False,77,CONTRIBUTOR,False,False,False,0.203125,0.203125,0.6363636364,0.1205673759,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"I modified the JIT not to force FSD for ExceptionCatch, and ran into the two issues that need to be addressed in the JIT:

1) Platform-dependent code tests FSD mode before generating stack maps at catch points (J9TreeEvalutator -> VMgenerateCatchBlockBBStartPrologue on X, unsure of other platforms)

2) Common code tests FSD mode and merges stack maps with different bytecode PCs (MetaData.cpp -> mapsAreIdentical)",Solution Discussion,False,419,CONTRIBUTOR,False,False,False,1.0,1.0,0.7272727273,0.1276595745,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"Forcing the FSD test to true for both of the above gives me the results I want, but we don't need to completely stop merging stack maps.",Solution Discussion,False,136,CONTRIBUTOR,False,False,False,0.421875,0.421875,0.8181818182,0.134751773,0.000716727624,0.9992832724,0.003714710253,0.00734286415
All I require is that I can always (regardless of FSD) locate an accurate stack map at the catch point which contains the correct bytecode PC.,Solution Discussion,False,142,CONTRIBUTOR,False,False,False,0.40625,0.40625,0.9090909091,0.1418439716,0.000716727624,0.9992832724,0.003714710253,0.00734286415
"Once the above changes are made on all platforms, I will commit the change to J9Options.cpp to prevent ExceptionCatch forcing FSD (and another related change to initialize a required function pointer in the jitConfig).",Task Progress,False,218,CONTRIBUTOR,False,False,False,0.53125,0.53125,1.0,0.1489361702,0.000716727624,0.9992832724,0.003714710253,0.00734286415
Thank you very much for the detailed writeup @gacholio.,Social Conversation,False,55,CONTRIBUTOR,True,False,False,1.0,0.140625,0.3333333333,0.1560283688,0.002042521787,0.9979574782,0.00734286415,0.06695374525
It's great to see a design forging.,Social Conversation,False,35,CONTRIBUTOR,True,False,False,0.7777777778,0.109375,0.6666666667,0.1631205674,0.002042521787,0.9979574782,0.00734286415,0.06695374525
@andrewcraik @gita-omr @0dvictor FYI GAC's comment above.,Contribution and Commitment,False,57,CONTRIBUTOR,True,False,False,0.8888888889,0.125,1.0,0.170212766,0.002042521787,0.9979574782,0.00734286415,0.06695374525
#3389 can be used to test the JIT changes.,Testing,False,42,CONTRIBUTOR,False,False,False,0.4736842105,0.140625,0.3333333333,0.1773049645,0.01413138559,0.9858686144,0.06695374525,0.5770832432
"Once #3386 has been merged, the decomp003-NON-FSD test will fail if the JIT changes are not correct.",Investigation and Exploration,False,100,CONTRIBUTOR,False,False,False,1.0,0.296875,0.6666666667,0.1843971631,0.01413138559,0.9858686144,0.06695374525,0.5770832432
"To run it:

CODE",Investigation and Exploration,True,18,CONTRIBUTOR,False,False,False,0.2631578947,0.078125,1.0,0.1914893617,0.01413138559,0.9858686144,0.06695374525,0.5770832432
"If we want to completely remove any impact on normal production builds, the changes need only apply if the exception catch/throw events are hooked.",Solution Discussion,False,147,CONTRIBUTOR,False,False,False,1.0,0.390625,0.5,0.1985815603,0.118326912,0.881673088,0.5770832432,0.0003654601672
An easy way to determine this is to check TR_DisableThrowToGoto instead of TR_FullSpeedDebug.,Solution Discussion,False,93,CONTRIBUTOR,False,False,False,0.52,0.203125,1.0,0.2056737589,0.118326912,0.881673088,0.5770832432,0.0003654601672
@gacholio Is there an API on the VM we can query - TR_disableThrowToGoto is used to control opt and there are Xjit options to enable/disable that opt which should not change the GC Map layout in cases where throwToGoto may be turned off for debug in a non-FSD mode?,Solution Discussion,False,265,CONTRIBUTOR,False,False,False,1.0,0.78125,1.0,0.2127659574,0.1183928978,0.8816071022,0.0003654601672,0.004712512683
"You could query the hook status (See #3389), or we could add a field in the JITConfig and set it where we disable throwToGoto.",Solution Discussion,False,126,CONTRIBUTOR,False,False,False,0.8275862069,0.375,0.5,0.219858156,0.1192437677,0.8807562323,0.004712512683,0.1929437336
"The check suggested above is a bit hacky, I agree, though I'm not sure there's any real scenario where throwToGoto would be disabled other than the hooks being active.",Solution Discussion,False,167,CONTRIBUTOR,False,False,False,1.0,0.453125,1.0,0.2269503546,0.1192437677,0.8807562323,0.004712512683,0.1929437336
I'd really like to have this closed out this week.,Social Conversation,False,50,CONTRIBUTOR,False,False,False,1.0,0.171875,0.5,0.2340425532,0.1540808109,0.8459191891,0.1929437336,0.6410820506
Any comments on the above strategies?,Contribution and Commitment,False,37,CONTRIBUTOR,False,False,False,0.5454545455,0.09375,1.0,0.2411347518,0.1540808109,0.8459191891,0.1929437336,0.6410820506
#3462 and #3463 introduce the support of this Issue for X86 CodeGen and common infrastructure.,Solution Discussion,False,94,CONTRIBUTOR,False,False,False,0.7142857143,0.234375,0.5,0.2482269504,0.269831671,0.730168329,0.6410820506,1.0
This first draft queries CODE for whether to preserve bytecode info; it will be updated once we decide the proper API.,Solution Discussion,True,118,CONTRIBUTOR,False,False,False,1.0,0.328125,1.0,0.2553191489,0.269831671,0.730168329,0.6410820506,1.0
@andrewcraik - can you please comment on the new field in the jitConfig?,Contribution and Commitment,False,72,CONTRIBUTOR,False,False,False,0.75,0.1875,0.25,0.2624113475,0.4503871241,0.5496128759,1.0,0.0283808672
I'd like to fix this and get t he changs from @0dvictor updated and merged.,Contribution and Commitment,False,75,CONTRIBUTOR,False,False,False,1.0,0.25,0.5,0.2695035461,0.4503871241,0.5496128759,1.0,0.0283808672
@0dvictor,Contribution and Commitment,False,9,CONTRIBUTOR,False,False,False,0.0625,0.015625,0.75,0.2765957447,0.4503871241,0.5496128759,1.0,0.0283808672
I'm heavily in favor of not going the CODE route.,Solution Discussion,True,49,CONTRIBUTOR,True,False,False,0.7142857143,0.15625,0.3333333333,0.2978723404,0.5284483563,0.4715516437,0.4039585107,0.04023187486
The information is already available via the J9 hooks as was done in #3389.,Solution Discussion,False,75,CONTRIBUTOR,True,False,False,1.0,0.21875,0.6666666667,0.304964539,0.5284483563,0.4715516437,0.4039585107,0.04023187486
I don't think we should duplicate the information.,Social Conversation,False,50,CONTRIBUTOR,True,False,False,0.5714285714,0.125,1.0,0.3120567376,0.5284483563,0.4715516437,0.4039585107,0.04023187486
"What about introducing a query in CODE, namely CODE?",Solution Discussion,True,52,CONTRIBUTOR,False,False,False,1.0,0.140625,1.0,0.3191489362,0.5357124407,0.4642875593,0.04023187486,0.1839370639
"Agreed, since there is no need to externalize this outside of the JIT codebase, a TR_ option or equivalent seems sensible, and can be set in the hook disable code.",Solution Discussion,False,163,CONTRIBUTOR,False,False,False,1.0,0.46875,1.0,0.3262411348,0.5689232806,0.4310767194,0.1839370639,0.4569382132
Changes are in https://github.com/eclipse/openj9/pull/3463/files~,Action on Issue,False,65,CONTRIBUTOR,False,False,False,0.1739130435,0.0625,1.0,0.3404255319,0.6514259667,0.3485740333,0.4569382132,0.5748015215
"Many thanks to everyone who pushed this along, particularly @0dvictor for the common stack map code and initial prototype on X, and @fjeremic for the greatly-simplified platform code and general diligence throughout this process.",Social Conversation,False,229,CONTRIBUTOR,False,False,False,1.0,0.546875,1.0,0.3475177305,0.7552095159,0.2447904841,0.5748015215,0.01563784821
I don't see a reason why it wouldn't fail on plinux given they share the same code.,Investigation and Exploration,False,83,CONTRIBUTOR,True,False,False,1.0,0.265625,0.5,0.3687943262,0.7581593427,0.2418406573,0.0006996638728,0.0002861168415
@gita-omr FYI in case we need help to take a look.,Contribution and Commitment,False,50,CONTRIBUTOR,True,False,False,0.7058823529,0.1875,0.75,0.3758865248,0.7581593427,0.2418406573,0.0006996638728,0.0002861168415
The common piece of code was delivered in #3598.,Action on Issue,False,48,CONTRIBUTOR,True,False,False,0.5294117647,0.140625,1.0,0.3829787234,0.7581593427,0.2418406573,0.0006996638728,0.0002861168415
"I'll keep an eye out for similar failures, and maybe improve the test a bit (I've done exactly what I always complain about - hidden any useful debug information when the test fails).",Contribution and Commitment,False,183,CONTRIBUTOR,False,False,False,1.0,0.515625,1.0,0.390070922,0.7582110027,0.2417889973,0.0002861168415,0.002764994686
"At a guess, the problem would most likely be that a catch map got merged away.",Investigation and Exploration,False,78,CONTRIBUTOR,False,False,False,1.0,0.25,0.5,0.3971631206,0.7587102376,0.2412897624,0.002764994686,0.005380920094
I'm not clear on what was done to prevent that.,Social Conversation,False,47,CONTRIBUTOR,False,False,False,0.625,0.15625,1.0,0.4042553191,0.7587102376,0.2412897624,0.002764994686,0.005380920094
The code @0dvictor delivered as part of #3463 and more specifically the line in [1] checks the same query used to generate the stack map as delivered in #3598.,Solution Discussion,False,159,CONTRIBUTOR,True,False,False,1.0,0.453125,0.25,0.4113475177,0.759681792,0.240318208,0.005380920094,0.001158893425
So _in theory_,Social Conversation,False,14,CONTRIBUTOR,True,False,False,0.1034482759,0.046875,0.5,0.4184397163,0.759681792,0.240318208,0.005380920094,0.001158893425
we should not have merged GC maps belonging to catch blocks.,Solution Discussion,False,60,CONTRIBUTOR,True,False,False,0.3793103448,0.171875,0.75,0.4255319149,0.759681792,0.240318208,0.005380920094,0.001158893425
[1] https://github.com/eclipse/openj9/pull/3463/files#diff-4e3b1a3c145fc0a879cf6bd655b245ffR1336,Solution Discussion,False,96,CONTRIBUTOR,True,False,False,0.06896551724,0.03125,1.0,0.4326241135,0.759681792,0.240318208,0.005380920094,0.001158893425
#3463 allows merging the catch map if the previous one has identical bytecode info and GC info.,Solution Discussion,False,95,CONTRIBUTOR,False,False,False,1.0,0.265625,0.3333333333,0.4397163121,0.7598910366,0.2401089634,0.001158893425,0.0002837124983
Would that cause any issue?,Solution Discussion,False,27,CONTRIBUTOR,False,False,False,0.2941176471,0.078125,0.6666666667,0.4468085106,0.7598910366,0.2401089634,0.001158893425,0.0002837124983
"You can remove CODE from following line to rule it out.
https://github.com/eclipse/openj9/blob/22e0009fda531be602d728ea128f4ad9b4d289fd/runtime/compiler/runtime/MetaData.cpp#L706",Solution Discussion,True,179,CONTRIBUTOR,False,False,False,0.7647058824,0.203125,1.0,0.4539007092,0.7598910366,0.2401089634,0.001158893425,0.0002837124983
"I don't think that should cause an issue - if I can locate a map with the correct BCI using the catch address (well, catch address + 1 techinically), then we're fine.",Solution Discussion,False,166,CONTRIBUTOR,False,False,False,1.0,0.46875,0.5,0.4609929078,0.7599422624,0.2400577376,0.0002837124983,0.01003572854
"I assume when merging maps, the merged map will certainly cover all of the instructions covered by both maps.",Solution Discussion,False,109,CONTRIBUTOR,False,False,False,0.6333333333,0.296875,1.0,0.4680851064,0.7599422624,0.2400577376,0.0002837124983,0.01003572854
"Yes, since the two maps are merged only if they have identical bytecode info and GC info.",Solution Discussion,False,89,CONTRIBUTOR,False,False,False,1.0,0.265625,1.0,0.475177305,0.7617542679,0.2382457321,0.01003572854,0.1671307049
Yes map merging just eliminates one of the two maps to allow one map to cover a larger range.,Solution Discussion,False,93,CONTRIBUTOR,False,False,False,0.7307692308,0.296875,0.3333333333,0.4822695035,0.7919306281,0.2080693719,0.1671307049,0.004342243829
Since the BCI is being considered as part of the comparison I believe it should suit the purpose fine.,Solution Discussion,False,102,CONTRIBUTOR,False,False,False,0.7307692308,0.296875,0.6666666667,0.4893617021,0.7919306281,0.2080693719,0.1671307049,0.004342243829
You will get the info you need and be none the wiser how the JIT chose to deliver that information to you (eg by map merging).,Social Conversation,False,126,CONTRIBUTOR,False,False,False,1.0,0.40625,1.0,0.4964539007,0.7919306281,0.2080693719,0.1671307049,0.004342243829
@gacholio were you able to reproduce the AIX failure above?,Bug Reproduction,False,59,CONTRIBUTOR,False,False,False,1.0,0.15625,1.0,0.5035460993,0.7927146439,0.2072853561,0.004342243829,0.01235591973
I can only  see setReportByteCodeInfoAtCatchBlock under FSD.,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.7272727273,0.125,0.25,0.5106382979,0.7949455725,0.2050544275,0.01235591973,0.01296902725
Was not the idea to enable it without FSD?,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,0.8181818182,0.140625,0.5,0.5177304965,0.7949455725,0.2050544275,0.01235591973,0.01296902725
"Also, I think we wanted to disable throw->goto optimizations.",Solution Discussion,False,61,CONTRIBUTOR,False,False,False,0.8181818182,0.140625,0.75,0.524822695,0.7949455725,0.2050544275,0.01235591973,0.01296902725
I am not sure I seen that in all the commits.,Social Conversation,False,45,CONTRIBUTOR,False,False,False,1.0,0.171875,1.0,0.5319148936,0.7949455725,0.2050544275,0.01235591973,0.01296902725
"10K runs on AMD64 with no errors - will try some on P.

@gita-omr Look in #3389",Testing,False,81,CONTRIBUTOR,False,False,False,1.0,0.296875,1.0,0.5390070922,0.7972872011,0.2027127989,0.01296902725,0.009819337652
Was looking at slightly older code...,Task Progress,False,37,CONTRIBUTOR,False,False,False,1.0,0.09375,1.0,0.5531914894,0.7990601361,0.2009398639,0.009819337652,0.1984352534
10K runs on Linux PPC LE with no issues.,Testing,False,40,CONTRIBUTOR,False,False,False,1.0,0.15625,0.5,0.5602836879,0.8348887032,0.1651112968,0.1984352534,0.07112047202
15 failures in 10K runs on AIX.,Testing,False,31,CONTRIBUTOR,False,False,False,0.8,0.125,1.0,0.5673758865,0.8348887032,0.1651112968,0.1984352534,0.07112047202
The failure rate is low enough that the results can't really be trusted.,Testing,False,72,CONTRIBUTOR,False,False,False,0.5909090909,0.203125,0.5,0.5744680851,0.8477298922,0.1522701078,0.07112047202,0.0001851344268
I'll instrument the test to gather core at the point of failure so we can see what the stack maps look like.,Testing,False,108,CONTRIBUTOR,False,False,False,1.0,0.34375,1.0,0.5815602837,0.8477298922,0.1522701078,0.07112047202,0.0001851344268
"One question occurs - the way @0dvictor detects the unmergeable maps - is it possible that the stack map might migrate during optimizations, and would not be detected in the unmergeable map test?",Solution Discussion,False,195,CONTRIBUTOR,False,False,False,1.0,0.484375,1.0,0.5886524823,0.8477633193,0.1522366807,0.0001851344268,0.1571286372
It's a good question.,Social Conversation,False,21,CONTRIBUTOR,False,False,False,0.2222222222,0.0625,0.3333333333,0.5957446809,0.8761337515,0.1238662485,0.1571286372,0.171061806
"Even without merging, how accurate BCI info really is in GC maps, especially in non-FSD mode?",Solution Discussion,False,93,CONTRIBUTOR,False,False,False,0.9444444444,0.265625,0.6666666667,0.6028368794,0.8761337515,0.1238662485,0.1571286372,0.171061806
"I think we get BCI from JIT instruction's node, which might be absent or not accurate at all.",Solution Discussion,False,93,CONTRIBUTOR,False,False,False,1.0,0.28125,1.0,0.609929078,0.8761337515,0.1238662485,0.1571286372,0.171061806
"FYI, there is an outstanding OMR Issue about the inaccuracy of a node's bytecode info: https://github.com/eclipse/omr/issues/3153",Social Conversation,False,129,CONTRIBUTOR,False,False,False,1.0,0.25,1.0,0.6170212766,0.9070198934,0.09298010658,0.171061806,0.002108608991
"But even if a node has a correct BCI, it can be moved around or eliminated.",Solution Discussion,False,75,CONTRIBUTOR,False,False,False,1.0,0.25,1.0,0.6241134752,0.9074006143,0.09259938572,0.002108608991,0.02309852518
Note that eclipse/omr#3153 is looking at a slightly different angle on the correctness issue.,Investigation and Exploration,False,93,CONTRIBUTOR,False,False,False,1.0,0.234375,1.0,0.6382978723,0.9129455943,0.08705440575,0.007612150589,0.1782796443
"Instrumented the test - the problem is at the throw, not the catch:

 [ERR] throw: 10021b00de0 0 catch: 10021b00de0 6

The thrower has detected the wrong catch PC.",Investigation and Exploration,False,167,CONTRIBUTOR,False,False,False,1.0,0.453125,0.5,0.6453900709,0.9451349562,0.05486504379,0.1782796443,0.003207393836
"The code to determine the catching method and pc is at:

https://github.com/eclipse/openj9/blob/master/runtime/codert_vm/CodertVMHelpers.cpp#L323

The method is correct, but getCurrentByteCodeIndexAndIsSameReceiver is not returning the correct location.",Investigation and Exploration,False,257,CONTRIBUTOR,False,False,False,0.8965517241,0.40625,1.0,0.6524822695,0.9451349562,0.05486504379,0.1782796443,0.003207393836
"The particular failure in this case is in jitTest1, which throws from an inlined frame to a catch in the outer frame.",Testing,False,117,CONTRIBUTOR,False,False,False,1.0,0.34375,1.0,0.6595744681,0.9457140687,0.05428593134,0.003207393836,0.007145708007
we need to make sure we mark the throw map as requiring the BCI to match for merging then to make sure both sides show the right bytecode info if I read this right...,Solution Discussion,False,166,CONTRIBUTOR,False,False,False,1.0,0.53125,1.0,0.6666666667,0.9470042652,0.0529957348,0.007145708007,0.001327197449
Not quite - the throw event reports the method/pc of both the thrower and the likely catcher - I'm only testing the catcher information (ensuring the throw and catch events report the same catch point).,Solution Discussion,False,202,CONTRIBUTOR,False,False,False,1.0,0.53125,1.0,0.6737588652,0.9472438979,0.05275610206,0.001327197449,0.005275128993
"The test code:

https://github.com/eclipse/openj9/blob/master/runtime/tests/jvmtitests/src/com/ibm/jvmti/tests/decompResolveFrame/decomp003.c
https://github.com/eclipse/openj9/blob/master/test/functional/cmdLineTests/jvmtitests/src/com/ibm/jvmti/tests/decompResolveFrame/decomp003.java",Testing,False,288,CONTRIBUTOR,False,False,False,1.0,0.109375,1.0,0.6808510638,0.9481963512,0.05180364876,0.005275128993,0.001656592469
At this point I think we'll need a log for further investigation.,Investigation and Exploration,False,65,CONTRIBUTOR,True,False,False,0.3076923077,0.1875,0.3333333333,0.6879432624,0.948495458,0.05150454195,0.001656592469,8.9e-05
"Given the above test it seems only one method is being compiled and as I understand the test runs very quickly at CODE, so the compilation will be synchronous and deterministic, meaning logging won't affect failure rate (in theory).",Testing,True,232,CONTRIBUTOR,True,False,False,1.0,0.609375,0.6666666667,0.695035461,0.948495458,0.05150454195,0.001656592469,8.9e-05
"My suggestion is to attempt to reproduce the problem while logging the method via 

CODE",Bug Reproduction,True,90,CONTRIBUTOR,True,False,False,0.4102564103,0.25,1.0,0.7021276596,0.948495458,0.05150454195,0.001656592469,8.9e-05
"I'm trying with this:

CODE",Task Progress,True,29,CONTRIBUTOR,False,False,False,1.0,0.09375,1.0,0.7092198582,0.9485115204,0.05148847961,8.9e-05,0.0001586866516
"I believe the CODE has to be part of a method regex, so this would be the correct way:

CODE",Solution Discussion,True,94,CONTRIBUTOR,True,False,False,1.0,0.328125,1.0,0.7163120567,0.9485401721,0.05145982787,0.0001586866516,0.0002524560366
I've updated the command line and will grind the test.,Task Progress,False,54,CONTRIBUTOR,False,False,False,1.0,0.171875,1.0,0.7234042553,0.9485857544,0.05141424556,0.0002524560366,0.02679880937
@andrewcraik @gita-omr Failures with logs provided in the interlock slack.,Investigation and Exploration,False,74,CONTRIBUTOR,False,False,False,0.2682926829,0.171875,0.2,0.7304964539,0.9534244256,0.04657557439,0.02679880937,0.0005193381324
"The symptom seems the same - in the failing tests, every throw in the test gets the correct method, but 0 for the bytecode index for the catcher.",Investigation and Exploration,False,145,CONTRIBUTOR,False,False,False,0.6585365854,0.421875,0.4,0.7375886525,0.9534244256,0.04657557439,0.02679880937,0.0005193381324
The catcher itself has the correct information.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,0.1707317073,0.109375,0.6,0.7446808511,0.9534244256,0.04657557439,0.02679880937,0.0005193381324
I dumped internal stack traces at throw and catch which seem reasonable.,Task Progress,False,72,CONTRIBUTOR,False,False,False,0.2926829268,0.1875,0.8,0.7517730496,0.9534244256,0.04657557439,0.02679880937,0.0005193381324
"At the catch point, the index is correct, so this may be down to how the code I use to find the catcher in the throw event differs from the stack walker (which is where the catch event retrieves its data).",Investigation and Exploration,False,205,CONTRIBUTOR,False,False,False,1.0,0.640625,1.0,0.7588652482,0.9534244256,0.04657557439,0.02679880937,0.0005193381324
@andrewcraik @0dvictor,Social Conversation,False,22,CONTRIBUTOR,False,False,False,0.08333333333,0.03125,0.25,0.7659574468,0.9535181949,0.04648180506,0.0005193381324,0.01198084219
"Further to our phone discussion, the BCI of the stack map at any throw point also needs to be correct (even outside of FSD).",Solution Discussion,False,124,CONTRIBUTOR,False,False,False,1.0,0.375,0.5,0.7730496454,0.9535181949,0.04648180506,0.0005193381324,0.01198084219
"This includes explicit throws via the athrow bytecode, and any implicitly-thrown exceptions from NPE traps, resolves, etc.",Solution Discussion,False,122,CONTRIBUTOR,False,False,False,0.75,0.28125,0.75,0.780141844,0.9535181949,0.04648180506,0.0005193381324,0.01198084219
I'm going to reopen this item while we investigate.,Action on Issue,False,51,CONTRIBUTOR,False,False,False,0.375,0.140625,1.0,0.7872340426,0.9535181949,0.04648180506,0.0005193381324,0.01198084219
Both return catcher’s method and location.,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,0.5384615385,0.109375,0.3333333333,0.8014184397,0.9556814013,0.04431859867,0.01198084219,0.01558254832
We are tying to test if they are the same.,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,0.7692307692,0.15625,0.5,0.8085106383,0.9556814013,0.04431859867,0.01198084219,0.01558254832
"They are not, but which one is incorrect?",Solution Discussion,False,41,CONTRIBUTOR,False,False,False,0.6153846154,0.125,0.6666666667,0.8156028369,0.9556814013,0.04431859867,0.01198084219,0.01558254832
The catch location returned by cbException?,Solution Discussion,False,43,CONTRIBUTOR,False,False,False,0.4615384615,0.09375,0.8333333333,0.8226950355,0.9556814013,0.04431859867,0.01198084219,0.01558254832
Does cbException use GC maps as well?,Solution Discussion,False,37,CONTRIBUTOR,False,False,False,0.5384615385,0.109375,1.0,0.829787234,0.9556814013,0.04431859867,0.01198084219,0.01558254832
This is (I believe) explained in the comments above.,Solution Discussion,False,52,CONTRIBUTOR,False,False,False,0.3333333333,0.140625,0.3333333333,0.8368794326,0.9584949154,0.0415050846,0.01558254832,0.006489322312
"Exception (e.g. throw) is incorrect, ExceptionCatch is correct.",Solution Discussion,False,63,CONTRIBUTOR,False,False,False,0.2962962963,0.125,0.6666666667,0.8439716312,0.9584949154,0.0415050846,0.01558254832,0.006489322312
"Both use the JIT metadata to get the locations, but for some reason, the throw version of the code is not getting the correct info - see https://github.com/eclipse/openj9/issues/3373#issuecomment-438381311.",Investigation and Exploration,False,206,CONTRIBUTOR,False,False,False,1.0,0.421875,1.0,0.8510638298,0.9584949154,0.0415050846,0.01558254832,0.006489322312
"I've reviewed the code, and it seems reasonable.",Task Progress,False,48,CONTRIBUTOR,False,False,False,0.1475409836,0.140625,0.5,0.8581560284,0.9596665979,0.04033340207,0.006489322312,0.1158821295
"I'd welcome some volunteers to see if my simplified exception code in:

https://github.com/eclipse/openj9/blob/master/runtime/codert_vm/CodertVMHelpers.cpp#L323

called from:

https://github.com/eclipse/openj9/blob/master/runtime/jvmti/jvmtiHook.c#L1314

should be equivalent to the stack walk code in:

https://github.com/eclipse/openj9/blob/master/runtime/codert_vm/jswalk.c#L200

called from:

https://github.com/eclipse/openj9/blob/master/runtime/jvmti/jvmtiHook.c#L1886

@DanHeidinga @andrewcraik @fjeremic 

Note the magic +1 for the handler PC is taken care of in the stackwalk case by:

https://github.com/eclipse/openj9/blob/master/runtime/codert_vm/jswalk.c#L376",Contribution and Commitment,False,692,CONTRIBUTOR,False,False,False,1.0,0.953125,1.0,0.865248227,0.9596665979,0.04033340207,0.006489322312,0.1158821295
The jvmtiHook.c and jswalk.c implementations look identical to me.,Solution Discussion,False,66,CONTRIBUTOR,True,False,False,1.0,0.140625,1.0,0.8723404255,0.9805897483,0.01941025168,0.1158821295,0.01226695903
The old code uses CODE & CODE to loop over the inlined call sites.,Solution Discussion,True,66,MEMBER,False,False,False,1.0,0.203125,0.6666666667,0.8865248227,0.9828046147,0.01719538533,0.01226695903,0.000432781777
"The new code only uses the CODE with no loop.  

Intentional?",Solution Discussion,True,63,MEMBER,False,False,False,0.9230769231,0.1875,1.0,0.8936170213,0.9828046147,0.01719538533,0.01226695903,0.000432781777
"@DanHeidinga Yes, the catch code is only interested in the top method in the map, since that will be the catcher.",Solution Discussion,False,113,CONTRIBUTOR,False,False,False,1.0,0.328125,0.5,0.9007092199,0.9828827558,0.01711724422,0.000432781777,0.0004808686411
The stack walker needs to treat all of the methods in the map.,Solution Discussion,False,62,CONTRIBUTOR,False,False,False,0.619047619,0.203125,1.0,0.9078014184,0.9828827558,0.01711724422,0.000432781777,0.0004808686411
Won't the method returned by https://github.com/eclipse/openj9/blob/82275daf0c7145f8ce63878ca43961b8b2e17039/runtime/codert_vm/CodertVMHelpers.cpp#L340 potentially be wrong?,Solution Discussion,False,173,MEMBER,False,False,False,1.0,0.140625,1.0,0.914893617,0.9829695792,0.01703042077,0.0004808686411,0.0003967166289
I don't believe so - it's the location that's causing issues.,Investigation and Exploration,False,61,CONTRIBUTOR,False,False,False,1.0,0.15625,1.0,0.9219858156,0.9830412086,0.01695879142,0.0003967166289,0.0008896069861
"If the catcher isn't the first inline, then we're returning the wrong method to the callback.",Solution Discussion,False,93,MEMBER,False,False,False,0.8888888889,0.25,1.0,0.9361702128,0.983201832,0.01679816803,0.0008896069861,0.000151473622
"The catcher is necessarily the first inline, assuming the map I get back based on the catcher PC is correct.",Solution Discussion,False,108,CONTRIBUTOR,False,False,False,1.0,0.3125,1.0,0.9432624113,0.9832291814,0.01677081864,0.000151473622,0.0004760599547
The stackwalk isn't walking inlines so this line https://github.com/eclipse/openj9/blob/82275daf0c7145f8ce63878ca43961b8b2e17039/runtime/codert_vm/CodertVMHelpers.cpp#L334 should return the data for the method that has inlined the catcher?,Solution Discussion,False,239,MEMBER,False,False,False,1.0,0.328125,0.5,0.9503546099,0.9833151366,0.01668486342,0.0004760599547,0.0005409772213
"The new code should have to loop through the inlines to find the appropriate one, no?",Solution Discussion,False,85,MEMBER,False,False,False,0.7619047619,0.25,1.0,0.9574468085,0.9833151366,0.01668486342,0.0004760599547,0.0005409772213
"Interesting - the catch hook is not walking inlines, as you say, which would seem to be a bug, thought it passes the test.",Social Conversation,False,122,CONTRIBUTOR,False,False,False,1.0,0.359375,0.5,0.9645390071,0.983412813,0.01658718703,0.0005409772213,0.02022533505
I'll look into this.,Contribution and Commitment,False,20,CONTRIBUTOR,False,False,False,0.1739130435,0.0625,1.0,0.9716312057,0.983412813,0.01658718703,0.0005409772213,0.02022533505
"Stop confusing me - inlines are walked by default, and the catch code is not disabling them, so that's why it works.",Solution Discussion,False,116,CONTRIBUTOR,False,False,False,1.0,0.328125,1.0,0.9787234043,0.9870646075,0.0129353925,0.02022533505,0.0716422145
"50K runs on AIX with no issues, so I believe #3687 fixes this.",Testing,False,62,CONTRIBUTOR,False,False,True,0.5185185185,0.21875,0.3333333333,0.9858156028,1.0,0.0,0.0716422145,0.0
Thanks to @gita-omr and @andrewcraik for the quick analysis of the data once I managed to gather it.,Social Conversation,False,100,CONTRIBUTOR,False,False,True,0.7037037037,0.296875,0.6666666667,0.9929078014,1.0,0.0,0.0716422145,0.0
Special thanks to Andrew for being able to detect the difference in the stack walk and catch code that the rest of us managed to repeatedly miss.,Social Conversation,False,145,CONTRIBUTOR,False,False,True,1.0,0.421875,1.0,1.0,1.0,0.0,0.0716422145,0.0
JVM sometimes hangs when calling kill -QUIT <javapid>,Observed Bug Behaviour,False,53,NONE,True,True,False,0.2666666667,0.1066666667,0.1,0.005649717514,0.0,1.0,0.0,4.66e-05
"Java -version output
--------------------

Output from CODE.
CODE

Summary of problem
------------------",Observed Bug Behaviour,True,111,NONE,True,True,False,0.5666666667,0.2266666667,0.2,0.01129943503,0.0,1.0,0.0,4.66e-05
We have a tomcat instance that randomly hangs.,Observed Bug Behaviour,False,46,NONE,True,True,False,0.2666666667,0.1066666667,0.3,0.01694915254,0.0,1.0,0.0,4.66e-05
"We narrowed this down to when our docker health check is failing, which in turn does a CODE so that we could diagnose _why_ our health checks were getting stuck.",Investigation and Exploration,True,161,NONE,True,True,False,1.0,0.4,0.4,0.02259887006,0.0,1.0,0.0,4.66e-05
"However, it appears that sometimes when doing this the JVM just freezes, and nothing happens anymore. CODE gives no results.",Observed Bug Behaviour,True,124,NONE,True,True,False,0.6666666667,0.2666666667,0.5,0.02824858757,0.0,1.0,0.0,4.66e-05
"We can force this to occur with the following:

CODE",Bug Reproduction,True,54,NONE,True,True,False,0.3666666667,0.1466666667,0.6,0.03389830508,0.0,1.0,0.0,4.66e-05
"Typically this does within a few hundred thread dumps, although I have had it once generate almost 3000.",Bug Reproduction,False,104,NONE,True,True,False,0.6,0.24,0.7,0.0395480226,0.0,1.0,0.0,4.66e-05
I have never had this not fail within about 10 minutes.,Bug Reproduction,False,55,NONE,True,True,False,0.3666666667,0.1466666667,0.8,0.04519774011,0.0,1.0,0.0,4.66e-05
"Diagnostic files
----------------

There is no crash, nor is there any output.",Investigation and Exploration,False,81,NONE,True,True,False,0.4666666667,0.1866666667,0.9,0.05084745763,0.0,1.0,0.0,4.66e-05
"Given that we _can_ reproduce this 100%, we can test and/or retrieve information that might help to diagnose the issue.",Investigation and Exploration,False,119,NONE,True,True,False,0.6666666667,0.2666666667,1.0,0.05649717514,0.0,1.0,0.0,4.66e-05
fyi @babsingh,Contribution and Commitment,False,13,MEMBER,False,False,False,1.0,0.02666666667,1.0,0.06214689266,2.9e-05,0.9999709945,4.66e-05,0.001749406635
"FWIW, we are also able to reproduce this behaviour with 11.0.9 as well.",Bug Reproduction,False,71,NONE,True,False,False,1.0,0.1733333333,0.5,0.06779661017,0.001117731832,0.9988822682,0.001749406635,0.001144827456
I have not tried older versions.,Bug Reproduction,False,32,NONE,True,False,False,0.4615384615,0.08,1.0,0.07344632768,0.001117731832,0.9988822682,0.001749406635,0.001144827456
"@pwagland CODE sends a CODE, which generates a CODE.",Investigation and Exploration,True,52,CONTRIBUTOR,False,False,False,0.12,0.12,0.3333333333,0.0790960452,0.00183020417,0.9981697958,0.001144827456,0.0001509806852
The title mentions that the CODE.,Investigation and Exploration,True,33,CONTRIBUTOR,False,False,False,0.08,0.08,0.6666666667,0.08474576271,0.00183020417,0.9981697958,0.001144827456,0.0001509806852
"I have a few questions in order to better understand the hang.
- Can you confirm if the hang happens only when CODE is raised a few 100 times? 
- Does CODE terminate the JVM correctly when CODE is not raised?
- Can you generate **core files after the JVM hangs**, and provide them to us for diagnosing the hang? CODE (CODE) will generate a CODE, CODE and few other files before terminating the JVM.",Social Conversation,True,401,CONTRIBUTOR,False,False,False,1.0,1.0,1.0,0.09039548023,0.00183020417,0.9981697958,0.001144827456,0.0001509806852
@babsingh - Gah!,Social Conversation,False,16,NONE,True,False,False,0.1428571429,0.02666666667,0.1428571429,0.09604519774,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
"You are right, it is a CODE, not a CODE!",Social Conversation,True,40,NONE,True,False,False,0.7142857143,0.1333333333,0.2857142857,0.1016949153,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
1. It is only guaranteed after a few hundred (thousand?) times.,Bug Reproduction,False,63,NONE,True,False,False,0.7857142857,0.1466666667,0.4285714286,0.1073446328,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
I have seen it occur after only 6 occurrences.,Bug Reproduction,False,46,NONE,True,False,False,0.6428571429,0.12,0.5714285714,0.1129943503,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
I have seen it take ~2800 kills to trigger the hang.,Bug Reproduction,False,52,NONE,True,False,False,0.7857142857,0.1466666667,0.7142857143,0.1186440678,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
"2. I have not tried this, I will run the test again and see.",Investigation and Exploration,False,60,NONE,True,False,False,1.0,0.1866666667,0.8571428571,0.1242937853,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
"3. I have not tried this, I will run the test again and see.",Investigation and Exploration,False,60,NONE,True,False,False,1.0,0.1866666667,1.0,0.1299435028,0.001924165545,0.9980758345,0.0001509806852,0.0002669513564
"@babsingh 

1. In production, where we see this in about 4-5% of our docker stacks, this happens with <10 kills.",Observed Bug Behaviour,False,114,NONE,True,False,False,1.0,0.2933333333,0.25,0.1355932203,0.002090300149,0.9979096999,0.0002669513564,0.000160608439
2. CODE does nothing once java has hung.,Observed Bug Behaviour,True,40,NONE,True,False,False,0.3636363636,0.1066666667,0.5,0.1412429379,0.002090300149,0.9979096999,0.0002669513564,0.000160608439
3. CODE kills the process and creates four files.,Observed Bug Behaviour,True,49,NONE,True,False,False,0.4090909091,0.12,0.75,0.1468926554,0.002090300149,0.9979096999,0.0002669513564,0.000160608439
"With respect to 3. What _is_ interesting, is that this causes two thread dumps to be created, the one that it was hung on, and a new one for shutting down.

CODE

There is not javacore CODE, and 245 is the (I suspect anyway) the one that it was trying to generate when it hung.",Investigation and Exploration,True,281,NONE,True,False,False,1.0,0.76,0.1428571429,0.1581920904,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
I have attached both javacore files.,Task Progress,False,36,NONE,True,False,False,0.1052631579,0.08,0.2857142857,0.1638418079,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
"I still have the core file, if you need this, then I'll need to get somewhere to upload it, as it is 66M compressed.",Social Conversation,False,116,NONE,True,False,False,0.4385964912,0.3333333333,0.4285714286,0.1694915254,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
[javacore.20210316.184647.7.0245.txt.gz] URL,Investigation and Exploration,False,45,NONE,True,False,False,0.0350877193,0.02666666667,0.5714285714,0.1751412429,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
[javacore.20210316.184837.7.0247.txt.gz] URL,Investigation and Exploration,False,45,NONE,True,False,False,0.0350877193,0.02666666667,0.7142857143,0.1807909605,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
[jitdump.20210316.184837.7.0249.dmp.gz] URL,Investigation and Exploration,False,44,NONE,True,False,False,0.0350877193,0.02666666667,0.8571428571,0.186440678,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
[Snap.20210316.184837.7.0248.trc.gz] URL,Investigation and Exploration,False,41,NONE,True,False,False,0.0350877193,0.02666666667,1.0,0.1920903955,0.002190253264,0.9978097467,0.000160608439,0.0006595011379
The CODE don't have function names for the native stack.,Investigation and Exploration,True,56,CONTRIBUTOR,False,False,False,0.5882352941,0.1333333333,0.2,0.197740113,0.002600687443,0.9973993126,0.0006595011379,0.00112141451
"So, I will need the core file to study the native stack in CODE.",Investigation and Exploration,True,64,CONTRIBUTOR,False,False,False,0.8235294118,0.1866666667,0.4,0.2033898305,0.002600687443,0.9973993126,0.0006595011379,0.00112141451
https://ibm.ent.box.com/f/6400941f71d8467b89239b383afddbb2:,Social Conversation,False,59,CONTRIBUTOR,False,False,False,0.05882352941,0.01333333333,0.6,0.209039548,0.002600687443,0.9973993126,0.0006595011379,0.00112141451
Does this link allow you to upload files?,Social Conversation,False,41,CONTRIBUTOR,False,False,False,0.4705882353,0.1066666667,0.8,0.2146892655,0.002600687443,0.9973993126,0.0006595011379,0.00112141451
I will also need the CODE (CODE executable) to open the core file in CODE with symbols.,Social Conversation,True,87,CONTRIBUTOR,False,False,False,1.0,0.2266666667,1.0,0.2203389831,0.002600687443,0.9973993126,0.0006595011379,0.00112141451
"@babsingh, maybe you already have a notification, but I have uploaded the files to this container.",Social Conversation,False,98,NONE,True,False,False,0.9411764706,0.2133333333,0.5,0.2259887006,0.003298588959,0.996701411,0.00112141451,0.0004813876919
"I have included CODE as well, but to the best of my knowledge, this is just https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9_openj9-0.24.0/OpenJDK11U-jdk_x64_linux_openj9_11.0.10_9_openj9-0.24.0.tar.gz",Social Conversation,True,237,NONE,True,False,False,1.0,0.2266666667,1.0,0.2316384181,0.003298588959,0.996701411,0.00112141451,0.0004813876919
@pwagland Thanks for providing the core file.,Social Conversation,False,45,CONTRIBUTOR,False,False,False,0.21875,0.09333333333,0.25,0.2372881356,0.003598175951,0.996401824,0.0004813876919,5.86e-05
"Unfortunately, I am unable to read the native stack in the core file:
CODE
I will have to view the core file on the same machine where it gets generated.",Social Conversation,True,155,CONTRIBUTOR,False,False,False,1.0,0.4266666667,0.5,0.2429378531,0.003598175951,0.996401824,0.0004813876919,5.86e-05
Can you provide me the instructions to reproduce the hang?,Bug Reproduction,False,58,CONTRIBUTOR,False,False,False,0.3125,0.1333333333,0.75,0.2485875706,0.003598175951,0.996401824,0.0004813876919,5.86e-05
I will try to generate and view core files on my local machine.,Social Conversation,False,63,CONTRIBUTOR,False,False,False,0.40625,0.1733333333,1.0,0.2542372881,0.003598175951,0.996401824,0.0004813876919,5.86e-05
We use CODE to obtain the system libraries from the original machine so the core can be viewed on other machines.,Bug Reproduction,True,113,CONTRIBUTOR,False,False,False,1.0,0.28,0.3333333333,0.2598870056,0.003634671094,0.9963653289,5.86e-05,0.002021828306
"https://www.eclipse.org/openj9/docs/tool_jextract/

Also note the debug image is available, containing additional debug symbols.",Social Conversation,False,130,CONTRIBUTOR,False,False,False,0.619047619,0.1733333333,0.6666666667,0.2655367232,0.003634671094,0.9963653289,5.86e-05,0.002021828306
https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9_openj9-0.24.0/OpenJDK11U-debugimage_x64_linux_openj9_11.0.10_9_openj9-0.24.0.tar.gz,Investigation and Exploration,False,168,CONTRIBUTOR,False,False,False,0.04761904762,0.01333333333,1.0,0.2711864407,0.003634671094,0.9963653289,5.86e-05,0.002021828306
"@babsingh, @pshipton, I will look at this tomorrow.",Contribution and Commitment,False,51,NONE,True,False,False,0.2962962963,0.1066666667,0.2,0.2768361582,0.00489293646,0.9951070635,0.002021828306,0.009446358204
A different GC setting maybe?,Investigation and Exploration,False,29,NONE,True,False,False,0.1851851852,0.06666666667,0.6,0.2881355932,0.00489293646,0.9951070635,0.002021828306,0.009446358204
"Anyway, I can reproduce, and extract the core tomorrow.",Task Progress,False,55,NONE,True,False,False,0.3333333333,0.12,0.8,0.2937853107,0.00489293646,0.9951070635,0.002021828306,0.009446358204
"Let me know if would be more useful to do this with the debug image, and I will try to reproduce with that, and see what happens.",Social Conversation,False,129,NONE,True,False,False,1.0,0.36,1.0,0.2994350282,0.00489293646,0.9951070635,0.002021828306,0.009446358204
"@pwagland you just need to run jextract on any core file you already have, and it will zip up the system libraries and the jvm libraries, and the core.",Social Conversation,False,151,CONTRIBUTOR,False,False,False,1.0,0.3866666667,0.3333333333,0.3050847458,0.01077178648,0.9892282135,0.009446358204,0.007066552505
You could remove the core file itself from the zip if Babneet already has it.,Social Conversation,False,77,CONTRIBUTOR,False,False,False,0.5172413793,0.2,0.6666666667,0.3107344633,0.01077178648,0.9892282135,0.009446358204,0.007066552505
"The debug image can be added by Babneet before running gdb on the core, to make additional debug symbols available in gdb.",Social Conversation,False,122,CONTRIBUTOR,False,False,False,0.7586206897,0.2933333333,1.0,0.3163841808,0.01077178648,0.9892282135,0.009446358204,0.007066552505
@pshipton thanks for the clarification!,Social Conversation,False,39,NONE,True,False,False,0.4166666667,0.06666666667,0.5,0.3220338983,0.01516958734,0.9848304127,0.007066552505,0.01017150312
@babsingh I have added core.20210316.184837.7.0246.dmp.zip to the aforementioned share that you gave.,Social Conversation,False,101,NONE,True,False,False,1.0,0.16,1.0,0.3276836158,0.01516958734,0.9848304127,0.007066552505,0.01017150312
java 15 version.,Observed Bug Behaviour,False,16,NONE,False,False,False,0.1153846154,0.04,0.6666666667,0.3389830508,0.02149972431,0.9785002757,0.01017150312,9.93e-05
it seems like a regression made in last few months...,Investigation and Exploration,False,53,NONE,False,False,False,0.3846153846,0.1333333333,1.0,0.3446327684,0.02149972431,0.9785002757,0.01017150312,9.93e-05
"it's easy to reproduce, but I am not sure gdb can provide something useful.

CODE

CODE",Social Conversation,True,91,NONE,False,False,False,1.0,0.24,1.0,0.3502824859,0.02156154817,0.9784384518,9.93e-05,2.65e-05
"based on logs, maybe the process of dumping does not have a proper lock and two are triggered at a time, deadlocking each other?
also, cpu usage is 0% if that matters",Investigation and Exploration,False,167,NONE,False,False,False,1.0,0.44,1.0,0.3559322034,0.02157802546,0.9784219745,2.65e-05,0.01898374244
I have added core.20210316.184837.7.0246.dmp.zip to the aforementioned share that you gave.,Social Conversation,False,91,CONTRIBUTOR,False,False,False,0.4583333333,0.1466666667,0.125,0.3615819209,0.03339237467,0.9666076253,0.01898374244,2.23e-05
I was able to read the core file.,Social Conversation,False,33,CONTRIBUTOR,False,False,False,0.3333333333,0.1066666667,0.25,0.3672316384,0.03339237467,0.9666076253,0.01898374244,2.23e-05
"But, it contained native stack for only one thread. CODE showed 38 threads.",Investigation and Exploration,True,75,CONTRIBUTOR,False,False,False,0.5416666667,0.1733333333,0.375,0.3728813559,0.03339237467,0.9666076253,0.01898374244,2.23e-05
This core file was created using CODE.,Social Conversation,True,38,CONTRIBUTOR,False,False,False,0.2916666667,0.09333333333,0.5,0.3785310734,0.03339237467,0.9666076253,0.01898374244,2.23e-05
@pshipton How to get native stack for all threads?,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.375,0.12,0.625,0.384180791,0.03339237467,0.9666076253,0.01898374244,2.23e-05
Will CODE (CODE) create a core file with native stack for all threads?,Investigation and Exploration,True,70,CONTRIBUTOR,False,False,False,0.5416666667,0.1733333333,0.75,0.3898305085,0.03339237467,0.9666076253,0.01898374244,2.23e-05
or Do we need to live debug to acquire native stack for all threads (CODE)?,Investigation and Exploration,True,75,CONTRIBUTOR,False,False,False,0.625,0.2,0.875,0.395480226,0.03339237467,0.9666076253,0.01898374244,2.23e-05
"Also, I couldn't recreate the hang using a simple CODE micro-test, which was sent CODE 1000 times in 0.5 second intervals.

CODE",Bug Reproduction,True,130,CONTRIBUTOR,False,False,False,1.0,0.32,1.0,0.4011299435,0.03339237467,0.9666076253,0.01898374244,2.23e-05
@babsingh easiest repro I think is to use +ExitOnOutOfMemoryError and make code that would trigger out of memory more than one time,Bug Reproduction,False,131,NONE,False,False,False,1.0,0.2933333333,1.0,0.406779661,0.03340626461,0.9665937354,2.23e-05,0.0003240614417
"not sure if that's the same issue

More diagnostic information is required to confirm that the CODE and CODE hangs are the same.",Investigation and Exploration,True,130,CONTRIBUTOR,False,False,False,0.4,0.32,0.1428571429,0.4124293785,0.03360794113,0.9663920589,0.0003240614417,0.001877193186
"when I get OutOfMemory error and openj9 starts preparing the dumps of everything, very often it hangs forever.

CODE thread is waiting on a CODE to be notified: https://github.com/eclipse/openj9/blob/1eaf33671f61004ff201e88f687e935424b430dc/runtime/vm/jniinv.c#L320

If only the three threads shown in https://github.com/eclipse/openj9/issues/12224#issuecomment-801809036 are remaining in the JVM, then the CODE thread won't receive a notification, and the JVM would stay suspended during termination.",Investigation and Exploration,True,505,CONTRIBUTOR,False,False,False,1.0,0.8,0.4285714286,0.4237288136,0.03360794113,0.9663920589,0.0003240614417,0.001877193186
"+ExitOnOutOfMemoryError and make code that would trigger out of memory more than one time

CODE hangs were seen in the past:",Investigation and Exploration,True,126,CONTRIBUTOR,False,False,False,0.3666666667,0.2933333333,0.5714285714,0.4293785311,0.03360794113,0.9663920589,0.0003240614417,0.001877193186
"++Owner: @theresa-m, for insights.",Contribution and Commitment,False,34,CONTRIBUTOR,False,False,False,0.08333333333,0.06666666667,0.8571428571,0.4406779661,0.03360794113,0.9663920589,0.0003240614417,0.001877193186
++@gacholio: for insights + updated CODE last ([history] URL .,Contribution and Commitment,True,62,CONTRIBUTOR,False,False,False,0.1333333333,0.1066666667,1.0,0.4463276836,0.03360794113,0.9663920589,0.0003240614417,0.001877193186
How to get native stack for all threads?,Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,0.2424242424,0.1066666667,0.3333333333,0.4519774011,0.03477619422,0.9652238058,0.001877193186,1.99e-05
"When it's hung, use CODE to generate the core file.",Investigation and Exploration,True,51,CONTRIBUTOR,False,False,False,0.303030303,0.1333333333,0.6666666667,0.4576271186,0.03477619422,0.9652238058,0.001877193186,1.99e-05
"This won't take exclusive access and the GC/VM/JIT structures may not be in a good state for reading java stacks, object heap, etc, but all the native stacks should be available.",Investigation and Exploration,False,178,CONTRIBUTOR,False,False,False,1.0,0.44,1.0,0.4632768362,0.03477619422,0.9652238058,0.001877193186,1.99e-05
"I suggest using gcore, and then wait one minute and then use gcore again to create a second core, so we can compare the thread states between them.",Investigation and Exploration,False,147,CONTRIBUTOR,False,False,False,1.0,0.3733333333,1.0,0.4689265537,0.03478858623,0.9652114138,1.99e-05,0.001645470656
The destroy is waiting for the current thread to be the only non-daemon thread left in the VM.,Observed Bug Behaviour,False,94,CONTRIBUTOR,False,False,False,1.0,0.2533333333,0.5,0.4745762712,0.03581262904,0.964187371,0.001645470656,0.00168726386
This is spec behaviour.,Observed Bug Behaviour,False,23,CONTRIBUTOR,False,False,False,0.2105263158,0.05333333333,1.0,0.4802259887,0.03581262904,0.964187371,0.001645470656,0.00168726386
@pwagland @ninja-,Social Conversation,False,17,CONTRIBUTOR,False,False,False,0.09523809524,0.02666666667,0.5,0.4858757062,0.03686268144,0.9631373186,0.00168726386,0.001119226384
"Requesting two core files each for the CODE and CODE hangs using **CODE** (https://github.com/eclipse/openj9/issues/12224#issuecomment-802832341, https://github.com/eclipse/openj9/issues/12224#issuecomment-802833337) and processed with **CODE** (https://github.com/eclipse/openj9/issues/12224#issuecomment-800639061, https://github.com/eclipse/openj9/issues/12224#issuecomment-801043170).",Social Conversation,True,388,CONTRIBUTOR,False,False,False,1.0,0.28,1.0,0.4915254237,0.03686268144,0.9631373186,0.00168726386,0.001119226384
Note only one jextract is required per machine/JVM.,Investigation and Exploration,False,51,CONTRIBUTOR,False,False,False,0.375,0.12,0.5,0.4971751412,0.0375592212,0.9624407788,0.001119226384,1.62e-05
"If you've already run jextract on the same machine with the same JVM and provided those files, we don't need a second copy.",Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,1.0,0.32,1.0,0.5028248588,0.0375592212,0.9624407788,0.001119226384,1.62e-05
"Well, maybe if you were running a different workload then different libraries could be referenced that weren't already collected by the earlier jextract.",Investigation and Exploration,False,153,CONTRIBUTOR,False,False,False,1.0,0.3066666667,1.0,0.5084745763,0.03756929822,0.9624307018,1.62e-05,0.04024904373
"@babsingh, @pshipton, where do we find gcore?",Investigation and Exploration,False,45,NONE,True,False,False,0.4375,0.09333333333,0.5,0.5141242938,0.0626179028,0.9373820972,0.04024904373,0.003794429075
"It isn't in the binaries downloaded from: https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9_openj9-0.24.0/OpenJDK11U-jdk_x64_linux_openj9_11.0.10_9_openj9-0.24.0.tar.gz , nor is it in the debug build: https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.10%2B9_openj9-0.24.0/OpenJDK11U-debugimage_x64_linux_openj9_11.0.10_9_openj9-0.24.0.tar.gz",Investigation and Exploration,False,404,NONE,True,False,False,1.0,0.2133333333,1.0,0.5197740113,0.0626179028,0.9373820972,0.04024904373,0.003794429075
@pwagland I suspect it's part of the gdb package (it invokes gdb to create the cores).,Investigation and Exploration,False,86,CONTRIBUTOR,False,False,False,1.0,0.2133333333,1.0,0.5254237288,0.06497932918,0.9350206708,0.003794429075,0.007120161589
"Ya sorry, it's a Linux tool, not a Java tool.
https://man7.org/linux/man-pages/man1/gcore.1.html",Social Conversation,False,97,CONTRIBUTOR,False,False,False,1.0,0.16,1.0,0.5310734463,0.06941049314,0.9305895069,0.007120161589,0.002460766356
I have uploaded a number of core files from a reproduction that I made today.,Task Progress,False,77,NONE,True,False,False,1.0,0.2,0.25,0.5367231638,0.07094192738,0.9290580726,0.002460766356,0.02133685301
Five core files with about 10-15s between them.,Task Progress,False,47,NONE,True,False,False,0.6,0.12,0.5,0.5423728814,0.07094192738,0.9290580726,0.002460766356,0.02133685301
"I ran CODE on the first core file, and attached that zip here as well.",Task Progress,True,70,NONE,True,False,False,1.0,0.2,0.75,0.5480225989,0.07094192738,0.9290580726,0.002460766356,0.02133685301
Names are all similar to CODE.,Task Progress,True,30,NONE,True,False,False,0.4,0.08,1.0,0.5536723164,0.07094192738,0.9290580726,0.002460766356,0.02133685301
I looked at the core files.,Investigation and Exploration,False,27,CONTRIBUTOR,False,False,False,0.1333333333,0.08,0.1,0.5593220339,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
All five core files have the same backtrace for all threads.,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.2444444444,0.1466666667,0.2,0.5649717514,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
I believe that the hang happens due to CODE.,Investigation and Exploration,True,44,CONTRIBUTOR,False,False,False,0.2,0.12,0.3,0.5706214689,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
"OpenJ9 GC policies: https://www.eclipse.org/openj9/docs/xgcpolicy/. 

@amicic Can you confirm if the below analysis is correct?

### Java options
CODE

### Diagnostic Information

CODE

### Analysis

Across the five core files, the CODE keeps invoking CODE from CODE with a 1 millisecond timeout.",Solution Discussion,True,309,CONTRIBUTOR,False,False,False,1.0,0.6,0.5,0.581920904,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
It seems to be stuck in a recursive loop.,Investigation and Exploration,False,41,CONTRIBUTOR,False,False,False,0.2,0.12,0.6,0.5875706215,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
It also owns VM Access.,Investigation and Exploration,False,23,CONTRIBUTOR,False,False,False,0.1111111111,0.06666666667,0.7,0.593220339,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
All other threads have halted for CODE.,Investigation and Exploration,True,39,CONTRIBUTOR,False,False,False,0.1555555556,0.09333333333,0.8,0.5988700565,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
"Until CODE releases VM Access, the JVM would stay hung.",Investigation and Exploration,True,55,CONTRIBUTOR,False,False,False,0.2222222222,0.1333333333,0.9,0.604519774,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
"### Suspect Code

- CODE: https://github.com/eclipse/omr/blob/165a4a81709504806f14bd8e540d97962cafe5f5/gc/base/standard/Scavenger.cpp#L2483
- CODE: https://github.com/eclipse/omr/blob/165a4a81709504806f14bd8e540d97962cafe5f5/gc/base/standard/Scavenger.cpp#L2304
- CODE: https://github.com/eclipse/omr/blob/165a4a81709504806f14bd8e540d97962cafe5f5/gc/base/standard/Scavenger.cpp#L2208",Investigation and Exploration,True,387,CONTRIBUTOR,False,False,False,0.2444444444,0.1466666667,1.0,0.6101694915,0.08422071227,0.9157792877,0.02133685301,0.0006255851869
This is a correct analysis.,Social Conversation,False,27,CONTRIBUTOR,False,False,False,0.1923076923,0.06666666667,0.25,0.615819209,0.08461003919,0.9153899608,0.0006255851869,1.66e-05
"That GC thread is supposed to yield and release VM access, if there is an external exclusive VM access request (such as for generation of javacore).",Investigation and Exploration,False,148,CONTRIBUTOR,False,False,False,1.0,0.3466666667,0.5,0.6214689266,0.08461003919,0.9153899608,0.0006255851869,1.66e-05
"To yield, we look both at thread's HALT_EXCLUSIVE being set (seems to be the case) and exclusiveAccessState being PENDING (please, check what the value is).",Investigation and Exploration,False,156,CONTRIBUTOR,False,False,False,0.9615384615,0.3333333333,0.75,0.6271186441,0.08461003919,0.9153899608,0.0006255851869,1.66e-05
"If indeed are both set, I don't know why we are still looping - needs to be debugged...",Investigation and Exploration,False,87,CONTRIBUTOR,False,False,False,0.6538461538,0.2266666667,1.0,0.6327683616,0.08461003919,0.9153899608,0.0006255851869,1.66e-05
"As mentioned, removing -Xgc:concurrentScavenge will likely resolve the problem.",Solution Discussion,False,79,CONTRIBUTOR,False,False,False,1.0,0.1333333333,1.0,0.6384180791,0.08462038856,0.9153796114,1.66e-05,3e-05
I wonder if we hit a timing hole (or bad assumption) related to handoff.,Investigation and Exploration,False,72,CONTRIBUTOR,False,False,False,1.0,0.1866666667,1.0,0.6440677966,0.08463904466,0.9153609553,3e-05,2.54e-05
What is the value of exclusiveAccessState?,Investigation and Exploration,False,42,CONTRIBUTOR,False,False,False,0.75,0.08,0.5,0.6497175141,0.08465484106,0.9153451589,2.54e-05,0.0003606031438
I don't think safe point is involved here.,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,1.0,0.1066666667,1.0,0.6553672316,0.08465484106,0.9153451589,2.54e-05,0.0003606031438
"What is the value of exclusiveAccessState?

CODE is set to CODE (CODE) across all five core files.
CODE",Investigation and Exploration,True,106,CONTRIBUTOR,False,False,False,1.0,0.2666666667,1.0,0.6610169492,0.08487925895,0.915120741,0.0003606031438,3.46e-05
Which means someone is holding exclusive already - presumably the GC master thread (the only one in the VM with VM access).,Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,1.0,0.28,1.0,0.6666666667,0.08490077475,0.9150992253,3.46e-05,0.000178113446
The thread holding exclusive will have CODE.,Investigation and Exploration,True,44,CONTRIBUTOR,False,False,False,1.0,0.09333333333,0.5,0.6723163842,0.08501162193,0.9149883781,0.000178113446,9.19e-06
Which thread is that?,Investigation and Exploration,False,21,CONTRIBUTOR,False,False,False,0.5714285714,0.05333333333,1.0,0.6779661017,0.08501162193,0.9149883781,0.000178113446,9.19e-06
"Yeah, that's quite possible.",Social Conversation,False,28,CONTRIBUTOR,False,False,False,0.1739130435,0.05333333333,0.3333333333,0.6836158192,0.08501734132,0.9149826587,9.19e-06,0.0001249419873
"The stack trace indicates that we think we are running concurrently, while we actually might be in STW (holding exclusive).",Investigation and Exploration,False,123,CONTRIBUTOR,False,False,False,0.8695652174,0.2666666667,0.6666666667,0.6892655367,0.08501734132,0.9149826587,9.19e-06,0.0001249419873
"That would explain why we are looping, but still need to understand how we may end up in this concurrent/STW mixed scenario...",Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,1.0,0.3066666667,1.0,0.6949152542,0.08501734132,0.9149826587,9.19e-06,0.0001249419873
The thread holding exclusive will have vmThread-omrVMThread-exclusiveCount !,Investigation and Exploration,False,76,CONTRIBUTOR,False,False,False,1.0,0.12,0.3333333333,0.7005649718,0.08509509776,0.9149049022,0.0001249419873,0.0001794263215
It is set to 0 for all threads.,Investigation and Exploration,False,31,CONTRIBUTOR,False,False,False,0.8888888889,0.1066666667,1.0,0.7118644068,0.08509509776,0.9149049022,0.0001249419873,0.0001794263215
"I think that means that CODE was used to acquire it (seems metronome only), the GC is internally manipulating the field or someone is releasing exclusive (the count is decremented before the release takes place).",Investigation and Exploration,True,212,CONTRIBUTOR,False,False,False,1.0,0.4666666667,1.0,0.7175141243,0.08520676201,0.914793238,0.0001794263215,2.91e-05
The rasdump code is potentially using the external thread exclusive.,Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,1.0,0.1333333333,0.5,0.7231638418,0.0852248734,0.9147751266,2.91e-05,3.85e-05
That certainly may be involved here.,Investigation and Exploration,False,36,CONTRIBUTOR,False,False,False,0.6,0.08,1.0,0.7288135593,0.0852248734,0.9147751266,2.91e-05,3.85e-05
... or it could be that the thread that acquired exclusive (for GC or not) terminated before releasing it?,Investigation and Exploration,False,106,CONTRIBUTOR,False,False,False,1.0,0.24,0.5,0.7344632768,0.08524884036,0.9147511596,3.85e-05,0.0002577612278
@pwagland could we get verbose GC logs (matching the core files provided)?,Investigation and Exploration,False,74,CONTRIBUTOR,False,False,False,0.6666666667,0.16,1.0,0.7401129944,0.08524884036,0.9147511596,3.85e-05,0.0002577612278
"Yes, wondering if the SIGQUIT thread was attached, got exlusive via external, and ended before releasing.",Investigation and Exploration,False,105,CONTRIBUTOR,False,False,False,1.0,0.2133333333,0.5,0.7457627119,0.08540925558,0.9145907444,0.0002577612278,2.19e-06
This is the only way I can explain every thread having the HALT_EXCLUSIVE bit set.,Investigation and Exploration,False,82,CONTRIBUTOR,False,False,False,0.9375,0.2,1.0,0.7514124294,0.08540925558,0.9145907444,0.0002577612278,2.19e-06
@amicic I can probably do one better.,Social Conversation,False,37,NONE,True,False,False,0.1707317073,0.09333333333,0.2,0.7570621469,0.08541061734,0.9145893827,2.19e-06,2.98e-05
"Hereby my reproduction case:

You need three terminals, then in terminal:
1. Run CODE
2. Run CODE
3. Run CODE

Once the output from terminal 2 stops, the hang has been hit.",Bug Reproduction,True,179,NONE,True,False,False,0.9024390244,0.4933333333,0.4,0.7627118644,0.08541061734,0.9145893827,2.19e-06,2.98e-05
"For me this typically happens really quickly, between 2-40 core dumps get created before it hangs.",Bug Reproduction,False,98,NONE,True,False,False,0.4146341463,0.2266666667,0.6,0.7683615819,0.08541061734,0.9145893827,2.19e-06,2.98e-05
"I tried using this as a basis for my prior reproduction case, however I didn't have the CODE flag, and without that flag, it doesn't hang, or at the very least it produces thousands of thread dumps, instead of very few.",Bug Reproduction,True,219,NONE,True,False,False,1.0,0.5466666667,0.8,0.7740112994,0.08541061734,0.9145893827,2.19e-06,2.98e-05
"So with this test, I can also confirm that CODE is the most likely suspect, or, at the very least, does something which causes something else to fail.",Investigation and Exploration,True,150,NONE,True,False,False,0.6829268293,0.3733333333,1.0,0.7796610169,0.08541061734,0.9145893827,2.19e-06,2.98e-05
@pwagland Are the requested dumps generated before the hang?,Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,1.0,0.12,1.0,0.7853107345,0.08542913726,0.9145708627,2.98e-05,2.47e-05
@gacholio yes.,Social Conversation,False,14,NONE,True,False,False,0.1,0.02666666667,0.3333333333,0.790960452,0.08544452514,0.9145554749,2.47e-05,1.77e-05
In my three tests I got to see between 2 and 41 dumps before the hang.,Testing,False,70,NONE,True,False,False,0.8,0.2133333333,0.6666666667,0.7966101695,0.08544452514,0.9145554749,2.47e-05,1.77e-05
Without CODE I let it get up to 1124 dumps before I decided it was probably going to continue working.,Solution Discussion,True,102,NONE,True,False,False,1.0,0.2666666667,1.0,0.802259887,0.08544452514,0.9145554749,2.47e-05,1.77e-05
"Sorry, my question wasn't clear (and you may not be able to answer it easily) - in the case when the hang occurs, are the dumps generated first (presumably you get lots of dumps from non-hang situations)?",Social Conversation,False,204,CONTRIBUTOR,False,False,False,1.0,0.4933333333,1.0,0.8079096045,0.08545555538,0.9145444446,1.77e-05,3.24e-05
"@gacholio, right.",Social Conversation,False,17,NONE,True,False,False,0.05555555556,0.02666666667,0.2,0.813559322,0.08547570942,0.9145242906,3.24e-05,0.0002356611565
"When the hang occurs, you no longer get any dumps.

~If I do a CODE at that point, then I get two additional dumps.",Observed Bug Behaviour,True,117,NONE,True,False,False,0.6944444444,0.3333333333,0.4,0.8192090395,0.08547570942,0.9145242906,3.24e-05,0.0002356611565
"The one that it appears to have hung on, and the one from the CODE.~

edit:
In my original testing, If I do a CODE at that point, then I get two additional dumps.",Testing,True,165,NONE,True,False,False,1.0,0.48,0.6,0.8248587571,0.08547570942,0.9145242906,3.24e-05,0.0002356611565
"The one that it appears to have hung on, and the one from the CODE.",Testing,True,67,NONE,True,False,False,0.4166666667,0.2,0.8,0.8305084746,0.08547570942,0.9145242906,3.24e-05,0.0002356611565
"In this docker container, it seems to ignore the CODE :-/",Testing,True,57,NONE,True,False,False,0.3055555556,0.1466666667,1.0,0.8361581921,0.08547570942,0.9145242906,3.24e-05,0.0002356611565
"@gacholio - right and now I think that the answer is _probably_ that the when the hang occurs, it occurs before the dump is generated.",Investigation and Exploration,False,134,NONE,True,False,False,0.6153846154,0.32,0.25,0.8418079096,0.08562237087,0.9143776291,0.0002356611565,6.35e-05
"This is based on the fact that when I do the CODE then whatever lock is taken appears to be released, and I suspect that is why I end up getting two additional thread dumps when the CODE happens.",Investigation and Exploration,True,195,NONE,True,False,False,1.0,0.52,0.5,0.8474576271,0.08562237087,0.9143776291,0.0002356611565,6.35e-05
"In a [previous comment](https://github.com/eclipse/openj9/issues/12224#issuecomment-800525378), you can see that I got:
CODE

So you can see that the ""245"" dump turns up two minutes later than the file timestamp indicates that it should.",Investigation and Exploration,True,240,NONE,True,False,False,0.9487179487,0.4933333333,0.75,0.8531073446,0.08562237087,0.9143776291,0.0002356611565,6.35e-05
"This is the ""extra"" javacore that I am referring to.",Investigation and Exploration,False,52,NONE,True,False,False,0.2564102564,0.1333333333,1.0,0.8587570621,0.08562237087,0.9143776291,0.0002356611565,6.35e-05
"Once we're able to reproduce this here, we can try instrumenting the VM to see if the external case gets used.",Investigation and Exploration,False,110,CONTRIBUTOR,False,False,False,1.0,0.28,1.0,0.8644067797,0.08566186188,0.9143381381,6.35e-05,7.46e-05
I hope that the docker test helps the reproduction!,Social Conversation,False,51,NONE,True,False,False,0.6428571429,0.12,0.5,0.8700564972,0.08570829787,0.9142917021,7.46e-05,0.3961122692
Please let me know if there is anything I can do to help further.,Contribution and Commitment,False,65,NONE,True,False,False,1.0,0.1866666667,1.0,0.8757062147,0.08570829787,0.9142917021,7.46e-05,0.3961122692
Has there been any progress on this issue?,Task Progress,False,42,NONE,True,False,False,0.5714285714,0.1066666667,0.5,0.8813559322,0.3322249522,0.6677750478,0.3961122692,0.0006376198792
Is there anything that we can do to help diagnose what is going wrong?,Contribution and Commitment,False,70,NONE,True,False,False,1.0,0.1866666667,1.0,0.8870056497,0.3322249522,0.6677750478,0.3961122692,0.0006376198792
"I had tried to reproduce it, albeit not with docker and tomcat, but still with fairly frequent GC cycles (that would exercise MM_Scavenger::shouldDoFinalNotify path), running for a few hours generating a few thousands for javacores but no luck.",Bug Reproduction,False,244,CONTRIBUTOR,False,False,False,1.0,0.5066666667,0.5,0.8926553672,0.3326217688,0.6673782312,0.0006376198792,1.25e-05
"I guess, we have to try harder to reproduce it...",Social Conversation,False,49,CONTRIBUTOR,False,False,False,0.2631578947,0.1333333333,1.0,0.8983050847,0.3326217688,0.6673782312,0.0006376198792,1.25e-05
@amcic don't you want to start with my much easier variant with ExitOnOutOfMemory?,Testing,False,82,NONE,False,False,False,1.0,0.1733333333,1.0,0.9039548023,0.3326295309,0.6673704691,1.25e-05,0.0005378413394
"@amicic were these tests also with CODE flag, as in my testing this was required to make it fail… note that I have not tested this outside of docker, as that is a more complicated environment for me to setup.",Testing,True,208,NONE,True,False,False,1.0,0.5466666667,1.0,0.9096045198,0.3329642512,0.6670357488,0.0005378413394,0.05174676994
"Still no luck to reproduce this, but based on analysis around stack trace seen from https://github.com/eclipse/openj9/issues/12224#issuecomment-805125591 I have made an attempt to fix Concurrent Scavenger aspect of it (but could be more than just that).",Solution Discussion,False,253,CONTRIBUTOR,False,False,False,1.0,0.4666666667,0.5,0.9152542373,0.365168355,0.634831645,0.05174676994,0.005131592796
"I have a custom build based on recent head, if you want to give it a try: 
https://ibm.box.com/s/jilhvm2laj5fmw5h6kqv7sooknktkfso",Social Conversation,False,130,CONTRIBUTOR,False,False,False,0.5428571429,0.2533333333,1.0,0.9209039548,0.365168355,0.634831645,0.05174676994,0.005131592796
Some good news for the weekend.,Social Conversation,False,31,NONE,True,False,False,0.2142857143,0.08,0.25,0.9265536723,0.3683619523,0.6316380477,0.005131592796,0.01360883005
"I downloaded the java, and it gives:
CODE",Task Progress,True,42,NONE,True,False,False,0.3214285714,0.12,0.5,0.9322033898,0.3683619523,0.6316380477,0.005131592796,0.01360883005
Running the test in https://github.com/eclipse/openj9/issues/12224#issuecomment-805239891 I was able to reproduce the issue with the old java very quickly.,Testing,False,155,NONE,True,False,False,0.6428571429,0.24,0.75,0.9378531073,0.3683619523,0.6316380477,0.005131592796,0.01360883005
"With the new java I am up to 500 core files… I will let this run overnight, but at least the initial few minutes are very promising!",Task Progress,False,132,NONE,True,False,False,1.0,0.3733333333,1.0,0.9435028249,0.3683619523,0.6316380477,0.005131592796,0.01360883005
"I left it running overnight, and it made 222889 dumps, and was still going strong, so whatever changes it was that you made they appear to have helped fix this issue, or at least make it non-reproducible in my test.",Task Progress,False,215,NONE,True,False,False,1.0,0.5466666667,0.3333333333,0.9491525424,0.3768312766,0.6231687234,0.01360883005,0.0001899293257
"Just for kicks I reran the old test again, and it failed after only 24 dumps, so it's not quite a factor of 10,000, but it's pretty close!",Task Progress,False,138,NONE,True,False,False,0.6829268293,0.3733333333,0.6666666667,0.9548022599,0.3768312766,0.6231687234,0.01360883005,0.0001899293257
"I'm happy enough to say that at least this reproduction case is eliminated, or at worst made much more unlikely, by a significant margin.",Task Progress,False,137,NONE,True,False,False,0.5853658537,0.32,1.0,0.9604519774,0.3768312766,0.6231687234,0.01360883005,0.0001899293257
The change  URL  has been merged.,Action on Issue,False,33,CONTRIBUTOR,False,False,False,0.25,0.1066666667,0.3333333333,0.9661016949,0.3769494772,0.6230505228,0.0001899293257,0.001141107642
"It has yet to pass nightly regression testing, which may take a couple of days.",Social Conversation,False,79,CONTRIBUTOR,False,False,False,0.46875,0.2,0.6666666667,0.9717514124,0.3769494772,0.6230505228,0.0001899293257,0.001141107642
"If does pass, it will  show up in a nightly build at https://adoptopenjdk.net/. I can let you know when, but of course, the safest is to wait for the next release.",Social Conversation,False,163,CONTRIBUTOR,False,False,False,1.0,0.4266666667,1.0,0.9774011299,0.3769494772,0.6230505228,0.0001899293257,0.001141107642
@amicic Thanks!,Social Conversation,False,15,NONE,True,False,False,0.09090909091,0.02666666667,0.3333333333,0.9830508475,0.3776596346,0.6223403654,0.001141107642,1.0
Seems this was fixed so closing.,Action on Issue,False,32,CONTRIBUTOR,False,False,True,1.0,0.08,1.0,1.0,1.0,0.0,1.0,0.0
Investigate cmdLineTester_jvmtitests_debug_5 failure in JITServer mode,Investigation and Exploration,False,70,CONTRIBUTOR,True,True,False,0.1276595745,0.03174603175,0.3333333333,0.005714285714,0.0,1.0,0.0,7.04e-06
"While doing PR testing for another commit I had CODE test fail with the following message:
CODE

This is the first time I am seeing this failure and I don't know if it's intermittent or not, or whether it is specific to JITServer or not.",Testing,True,240,CONTRIBUTOR,True,True,False,1.0,0.2486772487,0.6666666667,0.01142857143,0.0,1.0,0.0,7.04e-06
The mode seems to be metronomegc plus FSD.,Observed Bug Behaviour,False,42,CONTRIBUTOR,True,True,False,0.170212766,0.04232804233,1.0,0.01714285714,0.0,1.0,0.0,7.04e-06
Attn: @harryyu1994,Contribution and Commitment,False,18,CONTRIBUTOR,True,False,False,1.0,0.01058201058,1.0,0.02285714286,3.51e-06,0.9999964948,7.04e-06,0.0001585168452
"It looks like it's the same intermittent issue as this one https://github.com/eclipse/openj9/issues/6714

We have an intermittent bug with redefineClasses it seems.",Investigation and Exploration,False,166,CONTRIBUTOR,False,False,False,1.0,0.1164021164,0.5,0.02857142857,8.25e-05,0.9999175247,0.0001585168452,0.2625556309
150 runs in so far no failure.,Testing,False,30,CONTRIBUTOR,False,False,False,0.3181818182,0.03703703704,1.0,0.03428571429,8.25e-05,0.9999175247,0.0001585168452,0.2625556309
"How about this one:

CODE
produces a crash (when JITServer is enabled)",Bug Reproduction,True,73,CONTRIBUTOR,True,False,False,0.9333333333,0.07407407407,0.5,0.04,0.130882812,0.869117188,0.2625556309,0.001685327921
"withe the following stack trace:
CODE
The crash is intermittent, 1/10 or so.",Observed Bug Behaviour,True,78,CONTRIBUTOR,True,False,False,1.0,0.07936507937,1.0,0.04571428571,0.130882812,0.869117188,0.2625556309,0.001685327921
"In another crash in CODE the stack trace is:

CODE
If we go to frame 19 we find that the objectPointer, which is the first parameter, is NULL",Observed Bug Behaviour,True,144,CONTRIBUTOR,True,False,False,1.0,0.1587301587,1.0,0.05142857143,0.1317224111,0.8682775889,0.001685327921,0.002813570532
Running with a debug build makes the problem go away.,Solution Discussion,False,53,CONTRIBUTOR,True,False,False,0.9090909091,0.05291005291,0.3333333333,0.05714285714,0.1331240796,0.8668759204,0.002813570532,0.001175011289
Definitely some timing issue.,Investigation and Exploration,False,29,CONTRIBUTOR,True,False,False,0.3636363636,0.02116402116,0.6666666667,0.06285714286,0.1331240796,0.8668759204,0.002813570532,0.001175011289
I wonder is this test does some class unloading or redefinition.,Investigation and Exploration,False,64,CONTRIBUTOR,True,False,False,1.0,0.0582010582,1.0,0.06857142857,0.1331240796,0.8668759204,0.002813570532,0.001175011289
"I managed to get a crash with a debug build:
CODE",Bug Reproduction,True,50,CONTRIBUTOR,True,False,False,1.0,0.06349206349,1.0,0.07428571429,0.1337094484,0.8662905516,0.001175011289,0.0004416122032
"Server is asking for CODE
CODE looks strange to me
It's coming from CODE
where fieldName=""type"" and fieldSignature=""Ljava/lang/invoke/MethodType;""

The crash happens when executing
CODE
objectHederSizeInBytes is 4 for compressedrefs because this is the class pointer",Investigation and Exploration,True,273,CONTRIBUTOR,True,False,False,1.0,0.2328042328,1.0,0.08,0.1339294514,0.8660705486,0.0004416122032,0.0001924551776
"Looking at the object:
CODE
CODE should be J9Class in which case we should find the eye catcher 99669966:
CODE
There is no eye catcher which means that our object was bogus.",Investigation and Exploration,True,177,CONTRIBUTOR,True,False,False,1.0,0.1904761905,1.0,0.08571428571,0.134025329,0.865974671,0.0001924551776,0.0001651389588
"The client is executing this code:
CODE

with the CODE received from the server.",Investigation and Exploration,True,83,CONTRIBUTOR,True,False,False,1.0,0.08465608466,0.5,0.09142857143,0.1341075982,0.8658924018,0.0001651389588,5.38e-05
"This methodhandle is the object passed to 
CODE",Investigation and Exploration,True,48,CONTRIBUTOR,True,False,False,0.5625,0.04761904762,1.0,0.09714285714,0.1341075982,0.8658924018,0.0001651389588,5.38e-05
"The only hooks that are firing at the client are:
CODE",Investigation and Exploration,True,55,CONTRIBUTOR,True,False,False,1.0,0.06349206349,1.0,0.1028571429,0.1341344027,0.8658655973,5.38e-05,7.12e-05
"The server is executing this piece of code:
CODE",Investigation and Exploration,True,49,CONTRIBUTOR,True,False,False,1.0,0.05291005291,1.0,0.1085714286,0.1341698671,0.8658301329,7.12e-05,0.01391637181
"@harryyu1994 If you have some time, please continue the investigation above or look into this one which I see fairly often:
CODE",Contribution and Commitment,True,129,CONTRIBUTOR,True,False,False,1.0,0.1216931217,1.0,0.1142857143,0.1411027449,0.8588972551,0.01391637181,0.2308646783
"Going to check if CODE is true or false here, I suspect it's false and walkReferenceChain returned a bad methodHandle.",Investigation and Exploration,True,118,CONTRIBUTOR,False,False,False,0.9090909091,0.1058201058,0.5,0.12,0.2561152379,0.7438847621,0.2308646783,0.03555330036
"(as receiverHandle was dereferenced at the client and didn't crash client I'd assume it's valid.)
CODE

CODE

CODE",Investigation and Exploration,True,119,CONTRIBUTOR,False,False,False,1.0,0.1164021164,1.0,0.1257142857,0.2561152379,0.7438847621,0.2308646783,0.03555330036
"Trying limiting to just compiling one method
CODE
Can no longer reproduce it limiting to one method
So the issue is probably not due to this specific method.",Investigation and Exploration,True,160,CONTRIBUTOR,False,False,False,1.0,0.164021164,1.0,0.1314285714,0.2738272315,0.7261727685,0.03555330036,0.0006121316294
@harryyu1994 You may want to rebase just in case the fix from #8186 fixed it,Solution Discussion,False,76,CONTRIBUTOR,True,False,False,1.0,0.07936507937,1.0,0.1428571429,0.3016620432,0.6983379568,0.05526071054,0.0004358178538
"I already did, and i think the comment in #8186 was suggesting this issue is still present?",Task Progress,False,91,CONTRIBUTOR,False,False,False,1.0,0.08994708995,1.0,0.1485714286,0.3018791596,0.6981208404,0.0004358178538,0.0001241646307
j9vm.test.arraylets.,Testing,False,20,CONTRIBUTOR,False,False,False,0.3333333333,0.005291005291,0.5,0.1542857143,0.3019410161,0.6980589839,0.0001241646307,0.01265320363
"ArrayletAllocateTest

CODE",Testing,True,28,CONTRIBUTOR,False,False,False,1.0,0.01587301587,1.0,0.16,0.3019410161,0.6980589839,0.0001241646307,0.01265320363
"Although the issue is intermittent, JITClient always crash at the same method.",Bug Reproduction,False,78,CONTRIBUTOR,False,False,False,0.5714285714,0.06349206349,0.1666666667,0.1657142857,0.308244607,0.691755393,0.01265320363,0.0005070055754
Sounds to me like there's a race condition somewhere.,Investigation and Exploration,False,53,CONTRIBUTOR,False,False,False,0.4285714286,0.04761904762,0.3333333333,0.1714285714,0.308244607,0.691755393,0.01265320363,0.0005070055754
"We always need two remote messages to complete the ""runFEMacro_invokeILGenMacrosInvokeExactAndFixup"" request.",Investigation and Exploration,False,109,CONTRIBUTOR,False,False,False,0.5238095238,0.0582010582,0.5,0.1771428571,0.308244607,0.691755393,0.01265320363,0.0005070055754
I wonder if that's causing a race condition.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.380952381,0.04232804233,0.6666666667,0.1828571429,0.308244607,0.691755393,0.01265320363,0.0005070055754
"One scenario, GC happened and we are supposed to fail the compilation but somehow 
CODE we didn't get into here.",Investigation and Exploration,True,113,CONTRIBUTOR,False,False,False,1.0,0.1111111111,0.8333333333,0.1885714286,0.308244607,0.691755393,0.01265320363,0.0005070055754
"JITClient
CODE

JITServer
CODE


GC Counter related things

CODE
CODE
CODE
CODE",Investigation and Exploration,True,91,CONTRIBUTOR,False,False,False,0.9523809524,0.1058201058,1.0,0.1942857143,0.308244607,0.691755393,0.01265320363,0.0005070055754
Minimum set of options to reproduce the bug.,Bug Reproduction,False,44,CONTRIBUTOR,False,False,False,0.5714285714,0.04232804233,0.25,0.2,0.3084971878,0.6915028122,0.0005070055754,0.000545910493
"-Xgcpolicy:balanced
 -Xms65m -Xmx65m
were needed to reproduce the bug.",Bug Reproduction,False,72,CONTRIBUTOR,False,False,False,1.0,0.07407407407,0.5,0.2057142857,0.3084971878,0.6915028122,0.0005070055754,0.000545910493
"Which suggests that it's highly likely to be related to GC.
CODE",Investigation and Exploration,True,65,CONTRIBUTOR,False,False,False,0.9285714286,0.06878306878,0.75,0.2114285714,0.3084971878,0.6915028122,0.0005070055754,0.000545910493
Now i just need to find a way to prove my theory.,Investigation and Exploration,False,49,CONTRIBUTOR,False,False,False,0.8571428571,0.06349206349,1.0,0.2171428571,0.3084971878,0.6915028122,0.0005070055754,0.000545910493
"Scenario:

1. CODE called (CODE), say now CODE = 2 
2. CODE called (GC happened) which increments CODE to 3
3. another CODE called (CODE), so now CODE = 3
4. CODE called and since 3 == 3 we don't fail the compilation.",Investigation and Exploration,True,222,CONTRIBUTOR,False,False,False,1.0,0.2328042328,0.5,0.2228571429,0.3087691503,0.6912308497,0.000545910493,0.007901423216
"I'm not sure if step 3 could happen.





CODE",Investigation and Exploration,True,52,CONTRIBUTOR,False,False,False,0.2272727273,0.05291005291,1.0,0.2285714286,0.3087691503,0.6912308497,0.000545910493,0.007901423216
"CODE
- Ruled out GC
- Ruled out CODE
- The problem can only come from 
CODE
- potentially invalid _handleRef
CODE
CODE

Next step is to trace how CODE got initialized.",Investigation and Exploration,True,176,CONTRIBUTOR,False,False,False,1.0,0.1904761905,1.0,0.2342857143,0.3127054925,0.6872945075,0.007901423216,0.02292741294
"This portion of code in routine TR:CompilationInfo::compilationEnd() might be worth a look: especially CODE

CODE",Investigation and Exploration,True,115,CONTRIBUTOR,False,False,False,1.0,0.08994708995,1.0,0.24,0.3241275036,0.6758724964,0.02292741294,0.002117006954
"-Xjit:verbose={methodHandleDetails}

It doesn't look like the handleRef that caused the crash was ever deleted.",Investigation and Exploration,False,113,CONTRIBUTOR,False,False,False,0.5333333333,0.08465608466,0.3333333333,0.2457142857,0.3251821571,0.6748178429,0.002117006954,0.0005752961223
So it probably never was a valid handleRef.,Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.2666666667,0.04232804233,0.6666666667,0.2514285714,0.3251821571,0.6748178429,0.002117006954,0.0005752961223
"Some methodHandleDetails verbose log prior to the crash

CODE

- pointer that caused the crash
CODE

- the receiver handle should be 0xFE501B50  but it's 0xfc39a860 instead.",Investigation and Exploration,True,180,CONTRIBUTOR,False,False,False,1.0,0.1587301587,1.0,0.2571428571,0.3251821571,0.6748178429,0.002117006954,0.0005752961223
"Here's the code path of the #MHd output above:
CODE",Investigation and Exploration,True,52,CONTRIBUTOR,False,False,False,1.0,0.0582010582,1.0,0.2628571429,0.325468759,0.674531241,0.0005752961223,0.001309936854
"The next step is to check when the object pointer value changed, now that we know which routine generates it and what the value should be.",Investigation and Exploration,False,138,CONTRIBUTOR,False,False,False,1.0,0.1375661376,1.0,0.2685714286,0.3261213452,0.6738786548,0.001309936854,0.001859572286
"The content of the pointer (CODE) changed from CODE to CODE

CODE is the valid object pointer and CODE is bogus.",Investigation and Exploration,True,114,CONTRIBUTOR,False,False,False,0.7333333333,0.1164021164,0.3333333333,0.2742857143,0.3270477495,0.6729522505,0.001859572286,0.0999392835
"When JITClient was still handling CODE, the pointer was still fine.",Investigation and Exploration,True,67,CONTRIBUTOR,False,False,False,0.3666666667,0.0582010582,0.6666666667,0.28,0.3270477495,0.6729522505,0.001859572286,0.0999392835
"Once it gets to CODE, the object pointer turned bad.

CODE

JITClient
CODE

Next step is to figure out what happened in between runFEMacro_derefUintptrjPtr &  VM_createMethodHandleArchetypeSpecimen.",Investigation and Exploration,True,205,CONTRIBUTOR,False,False,False,1.0,0.1587301587,1.0,0.2857142857,0.3270477495,0.6729522505,0.001859572286,0.0999392835
"-  VM_createMethodHandleArchetypeSpecimen is called here on the server (wrappedCompile)

CODE

Code Path on JITClient
- vm calls CODE
- leads to CODE
- which leads to CODE
- leads to CODE
- leads to CODE
- leads to CODE
- then one of the compilation thread pop it off the compilation queue and initiate a remote compilation.",Investigation and Exploration,True,335,CONTRIBUTOR,False,False,False,1.0,0.3121693122,0.1666666667,0.2914285714,0.3768356435,0.6231643565,0.0999392835,0.03439401659
"- details info is generated on JITClient and sent to JITServer

Code Path on JITServer
- CODE
- create the compilee, if CODE then CODE
- mainline code looks like this
CODE

- comparing it to JITServer code
CODE

- the runFEMacro_derefUintptrjPtr was called in Remote::processEntry.",Investigation and Exploration,True,292,CONTRIBUTOR,False,False,False,0.813559322,0.253968254,0.3333333333,0.2971428571,0.3768356435,0.6231643565,0.0999392835,0.03439401659
(this is debug code that I added).,Investigation and Exploration,False,34,CONTRIBUTOR,False,False,False,0.1186440678,0.03703703704,0.5,0.3028571429,0.3768356435,0.6231643565,0.0999392835,0.03439401659
As the actual CODE calls would be called much later and no use to us.,Investigation and Exploration,True,69,CONTRIBUTOR,False,False,False,0.2542372881,0.07936507937,0.6666666667,0.3085714286,0.3768356435,0.6231643565,0.0999392835,0.03439401659
"- this is when JITServer has just received  the CODE generated and sent by JITClient
- this debug message is to make sure that JITServer received the correct CODE and cloned it correctly.",Investigation and Exploration,True,188,CONTRIBUTOR,False,False,False,0.5593220339,0.1746031746,0.8333333333,0.3142857143,0.3768356435,0.6231643565,0.0999392835,0.03439401659
"Which it did.
CODE",Investigation and Exploration,True,19,CONTRIBUTOR,False,False,False,0.08474576271,0.02645502646,1.0,0.32,0.3768356435,0.6231643565,0.0999392835,0.03439401659
"Debugging message and output
CODE
The uintptrj_t* address received from JITServer looks wrong, and its content is bogus. 
CODE",Observed Bug Behaviour,True,129,CONTRIBUTOR,False,False,False,1.0,0.1164021164,0.5,0.3257142857,0.3939701035,0.6060298965,0.03439401659,0.005060536466
"Some output on JITServer
CODE




JITServer:
CODE

JITClient:
CODE",Observed Bug Behaviour,True,76,CONTRIBUTOR,False,False,False,0.6363636364,0.07407407407,1.0,0.3314285714,0.3939701035,0.6060298965,0.03439401659,0.005060536466
"Freshly new observations:
On JITClient (output)
CODE

Comments:
- CODE(methodHandleLocation) contains a bad methodHandle
- the last bad value that caused the crash was 0xfec5f090
- before that 0x7f55b43b2a70 also contained another bad value 0xfec00870",Investigation and Exploration,True,258,CONTRIBUTOR,False,False,False,0.7307692308,0.2010582011,0.1666666667,0.3371428571,0.3964911687,0.6035088313,0.005060536466,0.02642430283
"(I didnt find a methodHandle with this address)
- then go back even further, we see that CODE was used to store another methodHandle (CODE) which is a valid methodHandle.",Investigation and Exploration,True,171,CONTRIBUTOR,False,False,False,0.5961538462,0.164021164,0.3333333333,0.3428571429,0.3964911687,0.6035088313,0.005060536466,0.02642430283
It was later deleted after the compilation.,Investigation and Exploration,False,43,CONTRIBUTOR,False,False,False,0.1346153846,0.03703703704,0.5,0.3485714286,0.3964911687,0.6035088313,0.005060536466,0.02642430283
"- information on the valid methodHandle
CODE

A couple of things confuses me that I need to figure out.",Investigation and Exploration,True,106,CONTRIBUTOR,False,False,False,0.3846153846,0.1058201058,0.6666666667,0.3542857143,0.3964911687,0.6035088313,0.005060536466,0.02642430283
"1. How come these two different compilations are sharing the same methodHandleLocation, or CODE
2. When and where do details get created and its methodHandleLocation assigned
3. It looks like since wrappedCompile is called both on the Server and the Client, we are doing CODE twice, is this even valid?",Investigation and Exploration,True,304,CONTRIBUTOR,False,False,False,1.0,0.2751322751,0.8333333333,0.36,0.3964911687,0.6035088313,0.005060536466,0.02642430283
"Both JITServer and JITClient outputs this, so the server one would be a remote call and the client one is a local call, both using the same methodHandleLocation as well.
CODE

details should be created in CODE
CODE",Investigation and Exploration,True,218,CONTRIBUTOR,False,False,False,0.7884615385,0.2169312169,1.0,0.3657142857,0.3964911687,0.6035088313,0.005060536466,0.02642430283
"Source code for j9jni_createGlobalRef
CODE",Investigation and Exploration,True,43,CONTRIBUTOR,False,False,False,1.0,0.03174603175,1.0,0.3714285714,0.4096552654,0.5903447346,0.02642430283,0.0008687385329
"I've noticed 3 different kind of crashes, but i think they will lead to the same problem.",Investigation and Exploration,False,89,CONTRIBUTOR,False,False,False,0.4736842105,0.09523809524,0.5,0.3828571429,0.4100880548,0.5899119452,0.0008687385329,0.003375208545
This one it's with CODE.,Investigation and Exploration,True,24,CONTRIBUTOR,False,False,False,0.1315789474,0.02645502646,0.75,0.3885714286,0.4100880548,0.5899119452,0.0008687385329,0.003375208545
"Output on JITClient
where CODE is a valid object pointer then it was changed to CODE
CODE

Output on JITServer
CODE
- when it was received on JITServer, it was already the wrong value",Observed Bug Behaviour,True,189,CONTRIBUTOR,False,False,False,1.0,0.2010582011,1.0,0.3942857143,0.4100880548,0.5899119452,0.0008687385329,0.003375208545
"The other crash: CODE that i was originally chasing:

This is a long output, I'll summarize what happens:
- j9jni_createGlobalRef stores object pointer CODE at CODE
- we compile CODE and in the end deleteMethodHandleRef at CODE
- j9jni_createGlobalRef then stores object pointer CODE at CODE
CODE
- we compile CODE
CODE
- after these moves, we strangely request for another compile with the same methodHandle!
- note that the first time the compilation request is CODE
- there is a theory here: since the compilation is queued, we don't have it ready so we requested a new one.
CODE
- then j9jni_createGlobalRef at CODE for CODE
- though we already have CODE at CODE
- so at this point it seems that CODE already contains bogus information
- and we perform a deleteMethodHandleRef on CODE
- note that the deletion is on another vmthread CODE instead of CODE
CODE

- after that we proceed to use CODE again for a new object pointer
CODE
- then after a series of moves, we arrive at a bad object pointer at CODE
CODE",Investigation and Exploration,True,1037,CONTRIBUTOR,False,False,False,1.0,1.0,1.0,0.4,0.411769521,0.588230479,0.003375208545,0.002068168866
"Another thing that confuses me is this:
CODE
It doesn't matter if it's queued or not, startPC is always 0..",Investigation and Exploration,True,109,CONTRIBUTOR,False,False,False,1.0,0.1216931217,0.25,0.4057142857,0.4127998443,0.5872001557,0.002068168866,0.001724646721
So basically the compile request keeps failing and it keeps requesting.,Investigation and Exploration,False,71,CONTRIBUTOR,False,False,False,0.4782608696,0.0582010582,0.5,0.4114285714,0.4127998443,0.5872001557,0.002068168866,0.001724646721
That's why the same methodHandle gets requested multiple times.,Investigation and Exploration,False,63,CONTRIBUTOR,False,False,False,0.3913043478,0.04761904762,0.75,0.4171428571,0.4127998443,0.5872001557,0.002068168866,0.001724646721
"For a nonJITServer run, only one of the startPC isn't NULL
CODE",Investigation and Exploration,True,64,CONTRIBUTOR,False,False,False,0.5652173913,0.06878306878,1.0,0.4228571429,0.4127998443,0.5872001557,0.002068168866,0.001724646721
"Another different behavior but much easier to explain:
- CODE the valid object pointer at CODE
- JITClient
CODE

- JITServer
CODE",Investigation and Exploration,True,135,CONTRIBUTOR,False,False,False,1.0,0.126984127,1.0,0.4285714286,0.4136590312,0.5863409688,0.001724646721,0.0007909286976
"CODE
^ both directly dereferenced CODE on JITServer.",Investigation and Exploration,True,53,CONTRIBUTOR,False,False,False,1.0,0.04232804233,0.3333333333,0.4342857143,0.4140530572,0.5859469428,0.0007909286976,0.001985392445
This will need to be fixed.,Social Conversation,False,27,CONTRIBUTOR,False,False,False,0.75,0.03174603175,0.6666666667,0.44,0.4140530572,0.5859469428,0.0007909286976,0.001985392445
However not related to this issue.,Social Conversation,False,34,CONTRIBUTOR,False,False,False,0.75,0.03174603175,1.0,0.4457142857,0.4140530572,0.5859469428,0.0007909286976,0.001985392445
"JITClient
CODE
- It has to be some other thread that changed the address
- As this thread is in the CODE loop, there's no way for it to do anything else.",Investigation and Exploration,True,156,CONTRIBUTOR,False,False,False,1.0,0.1746031746,0.5,0.4514285714,0.4150421428,0.5849578572,0.001985392445,0.06246846736
"JITServer
CODE",Investigation and Exploration,True,15,CONTRIBUTOR,False,False,False,0.09090909091,0.01587301587,1.0,0.4571428571,0.4150421428,0.5849578572,0.001985392445,0.06246846736
"- each time when we do CODE, we create a ""global reference"" using CODE.",Investigation and Exploration,True,71,CONTRIBUTOR,False,False,False,0.2203389831,0.06878306878,0.1111111111,0.4628571429,0.4461627725,0.5538372275,0.06246846736,0.001023944321
I'm assuming what it's trying to do is simply storing the methodHandle object pointer inside the address location returned by CODE.,Investigation and Exploration,True,131,CONTRIBUTOR,False,False,False,0.3559322034,0.1111111111,0.2222222222,0.4685714286,0.4461627725,0.5538372275,0.06246846736,0.001023944321
"However, during my debugging of this issue, I've noticed that the content of the global reference has been constantly changing during a compilation (so before the global reference gets deleted).  
CODE
As an example:
CODE
- the global reference in this case is CODE, and it's content has been constantly changing within the same compilation.",Investigation and Exploration,True,345,CONTRIBUTOR,False,False,False,1.0,0.3121693122,0.3333333333,0.4742857143,0.4461627725,0.5538372275,0.06246846736,0.001023944321
"I kind of ran out of ideas of why this is happening, @cathyzhyi @liqunl since I see you guys work on JSR292 related things, I have a question for you guys, is the content of a ""global reference"" which stores a method handle object pointer supposed to change during a compilation?",Contribution and Commitment,False,279,CONTRIBUTOR,False,False,False,0.8644067797,0.2698412698,0.4444444444,0.48,0.4461627725,0.5538372275,0.06246846736,0.001023944321
"If not, does this sound like a synchronization problem?",Investigation and Exploration,False,55,CONTRIBUTOR,False,False,False,0.1525423729,0.04761904762,0.5555555556,0.4857142857,0.4461627725,0.5538372275,0.06246846736,0.001023944321
where multiple compilation threads got assigned with the same global reference.,Investigation and Exploration,False,79,CONTRIBUTOR,False,False,False,0.186440678,0.0582010582,0.6666666667,0.4914285714,0.4461627725,0.5538372275,0.06246846736,0.001023944321
It seems like it started out with a valid method handle then overtime it got changed to some bogus value though.,Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,0.3559322034,0.1111111111,0.7777777778,0.4971428571,0.4461627725,0.5538372275,0.06246846736,0.001023944321
"You guys can ignore my previous 20+ comments, I have summarized everything in this comment.",Social Conversation,False,91,CONTRIBUTOR,False,False,False,0.2542372881,0.07936507937,0.8888888889,0.5028571429,0.4461627725,0.5538372275,0.06246846736,0.001023944321
Thanks in advance!!,Social Conversation,False,19,CONTRIBUTOR,False,False,False,0.05084745763,0.01587301587,1.0,0.5085714286,0.4461627725,0.5538372275,0.06246846736,0.001023944321
It is not supposed to change during a compilation.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,1.0,0.04761904762,0.3333333333,0.5142857143,0.4466728826,0.5533271174,0.001023944321,0.001615795728
What did you print out?,Social Conversation,False,23,CONTRIBUTOR,False,False,False,0.5555555556,0.02645502646,0.6666666667,0.52,0.4466728826,0.5533271174,0.001023944321,0.001615795728
Could you share the code that does the printing?,Social Conversation,False,48,CONTRIBUTOR,False,False,False,1.0,0.04761904762,1.0,0.5257142857,0.4466728826,0.5533271174,0.001023944321,0.001615795728
"@liqunl 
This issue only happens for JITServer and it's an intermittent bug.",Investigation and Exploration,False,77,CONTRIBUTOR,False,False,False,0.2708333333,0.06878306878,0.05882352941,0.5314285714,0.447477842,0.552522158,0.001615795728,8.48e-05
"As this is most likely not an issue with any of your implementations and mostly JITServer related things, it may be a little difficult to explain and give you the whole picture but I'll try my best.",Social Conversation,False,198,CONTRIBUTOR,False,False,False,0.7708333333,0.1957671958,0.1176470588,0.5371428571,0.447477842,0.552522158,0.001615795728,8.48e-05
"The output above was my own debugging messages, I can provide you with my repo later if you need it.",Social Conversation,False,100,CONTRIBUTOR,False,False,False,0.4166666667,0.1058201058,0.1764705882,0.5428571429,0.447477842,0.552522158,0.001615795728,8.48e-05
Hopefully I can explain this well enough to not get to that point.,Social Conversation,False,66,CONTRIBUTOR,False,False,False,0.2708333333,0.06878306878,0.2352941176,0.5485714286,0.447477842,0.552522158,0.001615795728,8.48e-05
JITClient runs the application and JITServer does the compilations for JITClient.,Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.2291666667,0.0582010582,0.2941176471,0.5542857143,0.447477842,0.552522158,0.001615795728,8.48e-05
"The global reference is always created on JITClient, and JITServer uses that reference remotely as well.",Investigation and Exploration,False,104,CONTRIBUTOR,False,False,False,0.3333333333,0.08465608466,0.3529411765,0.56,0.447477842,0.552522158,0.001615795728,8.48e-05
"Whenever JITServer needs to access the object pointer for compilation, it will send back the global reference and the dereferencing happens on JITClient, then the content (which is the object pointer) will be sent back to JITServer for compilation.",Investigation and Exploration,False,248,CONTRIBUTOR,False,False,False,0.8125,0.2063492063,0.4117647059,0.5657142857,0.447477842,0.552522158,0.001615795728,8.48e-05
Now the content of this reference sometimes change to bogus values.,Investigation and Exploration,False,67,CONTRIBUTOR,False,False,False,0.2291666667,0.0582010582,0.4705882353,0.5714285714,0.447477842,0.552522158,0.001615795728,8.48e-05
I also found out that it can happen at any time during the compilation,Investigation and Exploration,False,70,CONTRIBUTOR,False,False,False,0.2916666667,0.07407407407,0.5294117647,0.5771428571,0.447477842,0.552522158,0.001615795728,8.48e-05
"Here are some of the code that does the printing:

On JITClient:
JITClient is handling requests from JITServer, CODE is equivalent to CODE for regular JIT compilation.

CODE

On JITServer
CODE

The change in value can happen any time.",Investigation and Exploration,True,244,CONTRIBUTOR,False,False,False,0.9375,0.2380952381,0.5882352941,0.5828571429,0.447477842,0.552522158,0.001615795728,8.48e-05
Something like CODE is basically just a remote message from JITServer to JITClient to ask JITClient to perform CODE,Investigation and Exploration,True,115,CONTRIBUTOR,False,False,False,0.3958333333,0.1005291005,0.6470588235,0.5885714286,0.447477842,0.552522158,0.001615795728,8.48e-05
"This output on JITClient may show you what I mean, as it contains some CODE output that you are familiar with, mixed with my own debugging messages:
CODE
- in the CODE routine, CODE method is called.",Investigation and Exploration,True,201,CONTRIBUTOR,False,False,False,0.7916666667,0.2010582011,0.7058823529,0.5942857143,0.447477842,0.552522158,0.001615795728,8.48e-05
So methodHandle CODE is stored at global reference CODE.,Investigation and Exploration,True,56,CONTRIBUTOR,False,False,False,0.1875,0.04761904762,0.7647058824,0.6,0.447477842,0.552522158,0.001615795728,8.48e-05
"- the compilation returned, the compilation was queued.",Investigation and Exploration,False,55,CONTRIBUTOR,False,False,False,0.1458333333,0.03703703704,0.8235294118,0.6057142857,0.447477842,0.552522158,0.001615795728,8.48e-05
"- it was put in the queue, so JITClient requests a remote compilation to JITServer
- methodHandle was still there when we first entered CODE
- we can tell that from CODE this output message
- then CODE we see that the content has been changed.",Investigation and Exploration,True,246,CONTRIBUTOR,False,False,False,0.9375,0.2380952381,0.8823529412,0.6114285714,0.447477842,0.552522158,0.001615795728,8.48e-05
"- ^this is the output where JITServer requests to dereference CODE and received CODE and it's supposed to be CODE. 
- In this case JITServer dereferenced it right after it received the compilation request and tried to dereference CODE and it happened to have changed in values on JITClient.",Investigation and Exploration,True,291,CONTRIBUTOR,False,False,False,1.0,0.253968254,0.9411764706,0.6171428571,0.447477842,0.552522158,0.001615795728,8.48e-05
Note that it doesn't always happen here.,Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,0.1458333333,0.03703703704,1.0,0.6228571429,0.447477842,0.552522158,0.001615795728,8.48e-05
I'm trying to minimize the information you need to know to be able to answer the question but it's pretty difficult to do LOL.,Social Conversation,False,126,CONTRIBUTOR,False,False,False,1.0,0.126984127,0.3333333333,0.6285714286,0.4475201106,0.5524798894,8.48e-05,3.48e-05
Do you think it has something to do with the compileMethodHandleThunk request being queued instead of compiling synchronously?,Investigation and Exploration,False,126,CONTRIBUTOR,False,False,False,0.75,0.09523809524,0.6666666667,0.6342857143,0.4475201106,0.5524798894,8.48e-05,3.48e-05
"In case you need to know where these debugging messages happens, you can grep them in my repo here: https://github.com/harryyu1994/openj9/tree/debug.",Social Conversation,False,149,CONTRIBUTOR,False,False,False,0.8333333333,0.1058201058,1.0,0.64,0.4475201106,0.5524798894,8.48e-05,3.48e-05
and i'll continue to investigate and hopefully I can come up with better questions for you to answer...,Social Conversation,False,103,CONTRIBUTOR,False,False,False,1.0,0.09523809524,1.0,0.6457142857,0.4475374304,0.5524625696,3.48e-05,0.001020633264
The value in the globalreference will change anytime a GC occurs on the client.,Investigation and Exploration,False,79,MEMBER,False,False,False,0.7777777778,0.07407407407,0.5,0.6514285714,0.4480458909,0.5519541091,0.001020633264,0.0003017200526
Does the JITServer do something to get vmaccess on the client before attempting to read the globalreference's value?,Investigation and Exploration,False,116,MEMBER,False,False,False,1.0,0.09523809524,1.0,0.6571428571,0.4480458909,0.5519541091,0.001020633264,0.0003017200526
Sorry my answer is wrong.,Social Conversation,False,25,CONTRIBUTOR,False,False,False,0.3846153846,0.02645502646,0.3333333333,0.6628571429,0.4481962023,0.5518037977,0.0003017200526,0.0006369645556
"Yes, it may change during GC, and GC can occur during a compilation.",Social Conversation,False,68,CONTRIBUTOR,False,False,False,1.0,0.06878306878,0.6666666667,0.6685714286,0.4481962023,0.5518037977,0.0003017200526,0.0006369645556
We need to acquire vmaccess to read the globalreference's content.,Investigation and Exploration,False,66,CONTRIBUTOR,False,False,False,0.7692307692,0.05291005291,1.0,0.6742857143,0.4481962023,0.5518037977,0.0003017200526,0.0006369645556
"On the client, before we read the globalreference's value we do acquire vmaccess.",Investigation and Exploration,False,81,CONTRIBUTOR,False,False,False,0.2096774194,0.06878306878,0.25,0.68,0.4485135262,0.5514864738,0.0006369645556,0.0001183702813
"However, for CODE I did notice that JITServer has split it into two remote messages:
In regular JIT, we acquire vmaccess and then do what we need to do
For JITServer, we send a first remote message to client to read the globalreference's value, then after some operation send a second remote message to finish the rest of the work.",Investigation and Exploration,True,333,CONTRIBUTOR,False,False,False,1.0,0.328042328,0.5,0.6857142857,0.4485135262,0.5514864738,0.0006369645556,0.0001183702813
And I think the reason it does that is because CODE needs to be done on JITServer.,Investigation and Exploration,True,82,CONTRIBUTOR,False,False,False,0.2741935484,0.08994708995,0.75,0.6914285714,0.4485135262,0.5514864738,0.0006369645556,0.0001183702813
"On JITClient:
CODE

On JITServer
- JITServer vs. Regular JIT
CODE",Investigation and Exploration,True,70,CONTRIBUTOR,False,False,False,0.2258064516,0.07407407407,1.0,0.6971428571,0.4485135262,0.5514864738,0.0006369645556,0.0001183702813
"When GC happens, is the globalreference's value changed through CODE?",Investigation and Exploration,True,69,CONTRIBUTOR,False,False,False,0.3703703704,0.05291005291,0.5,0.7028571429,0.448572496,0.551427504,0.0001183702813,0.0002582624319
"I did not see this routine being called before the value changed.
CODE
Are there any other places that change the globalreference besides this one?",Investigation and Exploration,True,149,CONTRIBUTOR,False,False,False,1.0,0.1428571429,1.0,0.7085714286,0.448572496,0.551427504,0.0001183702813,0.0002582624319
"JITServer has this logic on the client to detect when GC happens, maybe there's something wrong here:
CODE",Investigation and Exploration,True,107,CONTRIBUTOR,False,False,False,1.0,0.1005291005,1.0,0.7142857143,0.4487011576,0.5512988424,0.0002582624319,4.84e-05
A GlobalReference is a pointer to an object that the GC knows about.,Investigation and Exploration,False,68,MEMBER,False,False,False,0.5,0.06878306878,0.1666666667,0.72,0.4487252816,0.5512747184,4.84e-05,0.0001510669674
"Anytime a GC occurs, the GlobalReference may be updated to point to the new location of the object.",Investigation and Exploration,False,99,MEMBER,False,False,False,0.6923076923,0.09523809524,0.3333333333,0.7257142857,0.4487252816,0.5512747184,4.84e-05,0.0001510669674
I think the JIT can also change the value if the MutableCallSite#setTarget() method is called.,Solution Discussion,False,94,MEMBER,False,False,False,0.5769230769,0.07936507937,0.5,0.7314285714,0.4487252816,0.5512747184,4.84e-05,0.0001510669674
"Would need to dig more to find it.

> And I think the reason it does that is because CODE needs to be done on JITServer.",Investigation and Exploration,True,122,MEMBER,False,False,False,1.0,0.1375661376,0.6666666667,0.7371428571,0.4487252816,0.5512747184,4.84e-05,0.0001510669674
How can you walk the heap objects of the client from the server?,Investigation and Exploration,False,64,MEMBER,False,False,False,0.5,0.06878306878,0.8333333333,0.7428571429,0.4487252816,0.5512747184,4.84e-05,0.0001510669674
You would need the server to get vmaccess on the client and hold it until the walk was complete,Investigation and Exploration,False,95,MEMBER,False,False,False,0.7307692308,0.1005291005,1.0,0.7485714286,0.4487252816,0.5512747184,4.84e-05,0.0001510669674
The client has to hold the vmaccess when the server walk the reference chain to prevent the object from being moved on the client side.,Expected Behaviour,False,135,CONTRIBUTOR,False,False,False,1.0,0.1322751323,1.0,0.7542857143,0.4488005404,0.5511994596,0.0001510669674,0.0001804525966
"- inside the routine CODE we have this:
- CODE
CODE
- ^for JITServer, this is another remote call to the client.",Investigation and Exploration,True,115,CONTRIBUTOR,False,False,False,0.4680851064,0.1164021164,0.3333333333,0.76,0.4488904385,0.5511095615,0.0001804525966,0.0003004784063
"- i think for the current implementation, during the walk JITServer does a bunch remote calls, Client does always acquire the vmaccess, but also always release the vmaccess after each reply.
CODE

We don't want to hold vmaccess while doing a blocking read() on the client.",Investigation and Exploration,True,275,CONTRIBUTOR,False,False,False,1.0,0.2486772487,0.6666666667,0.7657142857,0.4488904385,0.5511095615,0.0001804525966,0.0003004784063
So it ends up being acquire->release->acquire->release->acquire instead of just one pair of acquire and release.,Investigation and Exploration,False,112,CONTRIBUTOR,False,False,False,0.3191489362,0.07936507937,1.0,0.7714285714,0.4488904385,0.5511095615,0.0001804525966,0.0003004784063
Actually I just noticed JITClient's CODE did not acquire vmaccess.,Investigation and Exploration,True,66,CONTRIBUTOR,False,False,False,0.2272727273,0.05291005291,0.3333333333,0.7771428571,0.4490401313,0.5509598687,0.0003004784063,0.0005637074234
This could be one of the issues.,Investigation and Exploration,False,32,CONTRIBUTOR,False,False,False,0.1590909091,0.03703703704,0.6666666667,0.7828571429,0.4490401313,0.5509598687,0.0003004784063,0.0005637074234
"Also since GC can happen at any point, and instead of holding onto the vmaccess for the entire operation like regular JIT but a series of hold/release/hold/release, we potentially need to check for GC for all the client operations in between.",Investigation and Exploration,False,242,CONTRIBUTOR,False,False,False,1.0,0.2328042328,1.0,0.7885714286,0.4490401313,0.5509598687,0.0003004784063,0.0005637074234
CODE just walks through the indirect load chain using CODE.,Investigation and Exploration,True,59,CONTRIBUTOR,False,False,False,0.2173913043,0.05291005291,0.25,0.7942857143,0.4493209598,0.5506790402,0.0005637074234,0.0001208535739
The load chain is usually very short.,Investigation and Exploration,False,37,CONTRIBUTOR,False,False,False,0.152173913,0.03703703704,0.5,0.8,0.4493209598,0.5506790402,0.0005637074234,0.0001208535739
"Thus CODE is a very cheap operation, any reason why it has to live on the server side?",Investigation and Exploration,True,86,CONTRIBUTOR,False,False,False,0.3913043478,0.09523809524,0.75,0.8057142857,0.4493209598,0.5506790402,0.0005637074234,0.0001208535739
"The regular JIT tries to minimize the life span of a vmaccess by putting it into a local scope with only code that needs it, so it is supposed to perform better than breaking up the operation and using a series of hold/release/hold/release.",Investigation and Exploration,False,240,CONTRIBUTOR,False,False,False,1.0,0.2433862434,1.0,0.8114285714,0.4493209598,0.5506790402,0.0005637074234,0.0001208535739
"CODE
I think the CODE object used in this function is generated on the Server. 
CODE",Investigation and Exploration,True,86,CONTRIBUTOR,False,False,False,1.0,0.09523809524,1.0,0.8171428571,0.4493811668,0.5506188332,0.0001208535739,0.002313600952
Okay I think I misread and misunderstood something earlier.,Social Conversation,False,59,CONTRIBUTOR,False,False,False,0.25,0.04761904762,0.25,0.8228571429,0.4505337598,0.5494662402,0.002313600952,0.0001676222515
"So if globalreference's value just magically changed, it doens't necessarily mean the new value is bad, it's just that the GC has moved the object to a new location, and new object pointer is still valid?",Investigation and Exploration,False,204,CONTRIBUTOR,False,False,False,1.0,0.1904761905,0.5,0.8285714286,0.4505337598,0.5494662402,0.002313600952,0.0001676222515
"A new question, if GC moved the objects that globalreference pointed to to somewhere else, can the compilation still continue or do we have to abort?",Investigation and Exploration,False,149,CONTRIBUTOR,False,False,False,0.7222222222,0.1375661376,0.75,0.8342857143,0.4505337598,0.5494662402,0.002313600952,0.0001676222515
"I guess as long as we have the vmaccess in hand, we can assume the globalreference's value we are reading is a valid object pointer?",Investigation and Exploration,False,132,CONTRIBUTOR,False,False,False,0.6944444444,0.1322751323,1.0,0.84,0.4505337598,0.5494662402,0.002313600952,0.0001676222515
"Then this means since we don't have client's vmaccess when doing CODE at the server, at any point of the walk if the globalreference value changed by GC, the ""receiver"" object pointer used on the server becomes an outdated value.

CODE",Investigation and Exploration,True,237,CONTRIBUTOR,False,False,False,1.0,0.2222222222,1.0,0.8457142857,0.4506172661,0.5493827339,0.0001676222515,0.0001688638978
A fix may be to make the multiple remote messages into one so that client can have the vmaccess for the entire operation.,Solution Discussion,False,121,CONTRIBUTOR,False,False,False,1.0,0.1216931217,1.0,0.8514285714,0.450701391,0.549298609,0.0001688638978,0.09504926646
The JITServer can't talk about object addresses directly.,Investigation and Exploration,False,57,MEMBER,False,False,False,0.2285714286,0.04232804233,0.2,0.8571428571,0.4980531694,0.5019468306,0.09504926646,0.001840119827
It needs some kind of handle (a GlobalReference or some other GC root) to hold the object for it or you can't map the pointer the server has to a valid object in the client.,Expected Behaviour,False,173,MEMBER,False,False,False,1.0,0.1851851852,0.4,0.8628571429,0.4980531694,0.5019468306,0.09504926646,0.001840119827
"After the first call, you have a object pointer in hand.",Investigation and Exploration,False,56,MEMBER,False,False,False,0.3142857143,0.0582010582,0.6,0.8685714286,0.4980531694,0.5019468306,0.09504926646,0.001840119827
A GC occurs on the client and moves the object.,Investigation and Exploration,False,47,MEMBER,False,False,False,0.2857142857,0.05291005291,0.8,0.8742857143,0.4980531694,0.5019468306,0.09504926646,0.001840119827
"When the server makes its next request, how does it know the new address of the object it was talking to?",Investigation and Exploration,False,105,MEMBER,False,False,False,0.6,0.1111111111,1.0,0.88,0.4980531694,0.5019468306,0.09504926646,0.001840119827
"Yes, I think that's exactly what went wrong.",Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.1951219512,0.04232804233,0.125,0.8857142857,0.4989698829,0.5010301171,0.001840119827,0.003764671603
"JITServer uses globalreferences for almost all the requests except when there's CODE involved, where we use object addresses for the walk.",Investigation and Exploration,True,138,CONTRIBUTOR,False,False,False,0.512195122,0.1111111111,0.25,0.8914285714,0.4989698829,0.5010301171,0.001840119827,0.003764671603
"There are 3 ways to solve this:
1. create a new remote routine where instead of the object address, globalreference is used.",Solution Discussion,False,125,CONTRIBUTOR,False,False,False,0.5609756098,0.1216931217,0.375,0.8971428571,0.4989698829,0.5010301171,0.001840119827,0.003764671603
"currently the remote routine CODE used at the JITServer side takes an object address, we should create a new remote routine where it takes globalreference instead.",Solution Discussion,True,163,CONTRIBUTOR,False,False,False,0.6341463415,0.1375661376,0.5,0.9028571429,0.4989698829,0.5010301171,0.001840119827,0.003764671603
That way the dereferencing and the operations after that will all be done at the client with the vmaccess in hand.,Solution Discussion,False,114,CONTRIBUTOR,False,False,False,0.512195122,0.1111111111,0.625,0.9085714286,0.4989698829,0.5010301171,0.001840119827,0.003764671603
"(but we can't really make fej9->getReferenceFieldAt() return a globalreference though)

2. somehow do the entire CODE at the client, but I don't see how that's possible atm

3. during the walkReferenceChain at the JITServer, hold the vmaccess on JITClient.",Solution Discussion,True,260,CONTRIBUTOR,False,False,False,1.0,0.2169312169,0.75,0.9142857143,0.4989698829,0.5010301171,0.001840119827,0.003764671603
I think option 1 might be the most reasonable/feasible solution right now.,Solution Discussion,False,74,CONTRIBUTOR,False,False,False,0.3170731707,0.06878306878,0.875,0.92,0.4989698829,0.5010301171,0.001840119827,0.003764671603
and thanks for the help guys!,Social Conversation,False,29,CONTRIBUTOR,False,False,False,0.1463414634,0.03174603175,1.0,0.9257142857,0.4989698829,0.5010301171,0.001840119827,0.003764671603
"- We already have a mechanism that aborts the compilation if it detects that GC has happened.
- However, I didn't see the ""GC Counter"" getting incremented for this test, probably because we are dealing with a different GC mode/policy? 
- Looks like we are using CODE  in this case
- The GC Counter was never triggered
- Also, not sure if this is the way to go though.",Solution Discussion,True,371,CONTRIBUTOR,False,False,False,1.0,0.3703703704,0.5,0.9314285714,0.5008453723,0.4991546277,0.003764671603,0.001953523523
"(To abort the compilation if the object is moved)

CODE


- There is a CODE and a CODE, we only have the counter incremented in localGC",Solution Discussion,True,140,CONTRIBUTOR,False,False,False,0.3857142857,0.1428571429,1.0,0.9371428571,0.5008453723,0.4991546277,0.003764671603,0.001953523523
The complication with CODE is that the first object resides on JITServer and second object resides on JITClient.,Solution Discussion,True,112,CONTRIBUTOR,False,False,False,0.2465753425,0.09523809524,0.2,0.9485714286,0.5018185814,0.4981814186,0.001953523523,1.0
But it looks like these two can be separated out.,Solution Discussion,False,49,CONTRIBUTOR,False,False,False,0.1369863014,0.05291005291,0.3,0.9542857143,0.5018185814,0.4981814186,0.001953523523,1.0
The thing we need from TR::Node is the offsets.,Solution Discussion,False,47,CONTRIBUTOR,False,False,False,0.1232876712,0.04761904762,0.4,0.96,0.5018185814,0.4981814186,0.001953523523,1.0
"We can compute the offsets on JITServer using only TR::Node, then pass that vector to JITClient to compute for the actual object address.",Solution Discussion,False,137,CONTRIBUTOR,False,False,False,0.3150684932,0.1216931217,0.5,0.9657142857,0.5018185814,0.4981814186,0.001953523523,1.0
"- something like this: (rough draft)
CODE
- the walk on JITServer will create a vector of offsets
- then we need to send it to the JITClient
- JITClient just need to iterate through the vector in reverse order and apply the offsets

- Imagine we have 3 nodes (A, B, C) where C is the leaf node (A-->B-->C)
- this is pre-order traversal
- we can also do post-order",Solution Discussion,True,371,CONTRIBUTOR,False,False,False,1.0,0.3862433862,0.6,0.9714285714,0.5018185814,0.4981814186,0.001953523523,1.0
"so we don't need to reverse the list in the end
Step 1. walk(A, 1)
Step 2. vector.push_back(A.offset)",Solution Discussion,False,103,CONTRIBUTOR,False,False,False,0.2739726027,0.1058201058,0.7,0.9771428571,0.5018185814,0.4981814186,0.001953523523,1.0
"Step 3. getReferenceFieldAt(walk(B,1), A.offset) Step 9. returns 3
Step 4. vector.push_back(B.offset) 
Step 5. getReferenceFieldAt(walk(C,1), B.offset) Step 8. returns 2
Step 6. walk(C,1)",Solution Discussion,False,190,CONTRIBUTOR,False,False,False,0.3424657534,0.1322751323,0.8,0.9828571429,0.5018185814,0.4981814186,0.001953523523,1.0
"Step 7. returns 1

we end up with a vector:",Solution Discussion,False,45,CONTRIBUTOR,False,False,False,0.1506849315,0.0582010582,0.9,0.9885714286,0.5018185814,0.4981814186,0.001953523523,1.0
"[A.offset, B.offset]

- then on JITClient
CODE",Solution Discussion,True,49,CONTRIBUTOR,False,False,False,0.1095890411,0.04232804233,1.0,0.9942857143,0.5018185814,0.4981814186,0.001953523523,1.0
Fix was delivered in #8293,Action on Issue,False,26,CONTRIBUTOR,True,False,True,1.0,0.02645502646,1.0,1.0,1.0,0.0,1.0,0.0
Segmentation Error When compiling with debug enabled on PPC,Observed Bug Behaviour,False,59,CONTRIBUTOR,True,True,False,0.2571428571,0.0703125,0.1666666667,0.005555555556,0.0,1.0,0.0,0.009802165843
"This only occurs when building on PPCLE, and with java versions 10,11.",Observed Bug Behaviour,False,70,CONTRIBUTOR,True,True,False,0.3428571429,0.09375,0.3333333333,0.01111111111,0.0,1.0,0.0,0.009802165843
Java 8 builds perfectly.,Investigation and Exploration,False,24,CONTRIBUTOR,True,True,False,0.1142857143,0.03125,0.5,0.01666666667,0.0,1.0,0.0,0.009802165843
"This occurs during the DDR stage, when it uses the built jdk.",Observed Bug Behaviour,False,61,CONTRIBUTOR,True,True,False,0.3428571429,0.09375,0.6666666667,0.02222222222,0.0,1.0,0.0,0.009802165843
Passes with -Xint.,Solution Discussion,False,18,CONTRIBUTOR,True,True,False,0.08571428571,0.0234375,0.8333333333,0.02777777778,0.0,1.0,0.0,0.009802165843
"To reproduce,

I checked out the OpenJDK 11 with OpenJ9 project per
https://www.eclipse.org/openj9/oj9_build.html

Enabled debugging per https://blog.openj9.org/2018/06/05/debugging-openj9-in-docker-with-gdb/

CODE

To build:

CODE

We get the following error

CODE",Bug Reproduction,True,280,CONTRIBUTOR,True,True,False,1.0,0.2734375,1.0,0.03333333333,0.0,1.0,0.0,0.009802165843
There a number of methods that this is reproducible with.,Bug Reproduction,False,57,CONTRIBUTOR,True,False,False,0.1851851852,0.078125,0.1428571429,0.03888888889,0.006753802741,0.9932461973,0.009802165843,0.02838288421
"To name a few:
CODE
It can be reproduced with simply 

CODE

This fails with the following options:
CODE

Running through this in gdb, during the transition from execution within the jit compiled method, and CODE the TOC register r2 is attempted to be populated by register r12.",Bug Reproduction,True,287,CONTRIBUTOR,True,False,False,1.0,0.421875,0.2857142857,0.04444444444,0.006753802741,0.9932461973,0.009802165843,0.02838288421
"CODE

The address in r12 before these two instructions is not obvious to me, but it is a valid address.",Investigation and Exploration,True,105,CONTRIBUTOR,True,False,False,0.3888888889,0.1640625,0.4285714286,0.05,0.006753802741,0.9932461973,0.009802165843,0.02838288421
"After the two instructions above, an invalid (assumed TOC) address is fed into register r2.",Investigation and Exploration,False,91,CONTRIBUTOR,True,False,False,0.2777777778,0.1171875,0.5714285714,0.05555555556,0.006753802741,0.9932461973,0.009802165843,0.02838288421
As execution eventually reaches CODE we get the exception when the system tries loading from an invalid address inside of register r2.,Investigation and Exploration,True,134,CONTRIBUTOR,True,False,False,0.4074074074,0.171875,0.7142857143,0.06111111111,0.006753802741,0.9932461973,0.009802165843,0.02838288421
"Backtrace
CODE
*",Investigation and Exploration,True,18,CONTRIBUTOR,True,False,False,0.07407407407,0.03125,0.8571428571,0.06666666667,0.006753802741,0.9932461973,0.009802165843,0.02838288421
*There's a fair bit of missing debug data in this debug build.,Investigation and Exploration,False,62,CONTRIBUTOR,True,False,False,0.2222222222,0.09375,1.0,0.07222222222,0.006753802741,0.9932461973,0.009802165843,0.02838288421
"@AlenBadel will add an update shortly, so I am jumping slightly ahead.",Task Progress,False,70,CONTRIBUTOR,False,False,False,0.5217391304,0.09375,0.5,0.07777777778,0.02630992985,0.9736900702,0.02838288421,0.0003156516855
I wanted to ask @gacholio : what is the convention between JITted code and the helpers in cnathelp.cpp in terms of setting the TOC?,Solution Discussion,False,131,CONTRIBUTOR,False,False,False,1.0,0.1796875,1.0,0.08333333333,0.02630992985,0.9736900702,0.02838288421,0.0003156516855
The C code follows the C calling convention of the platform - there are no exceptions.,Solution Discussion,False,86,CONTRIBUTOR,False,False,False,0.75,0.1171875,0.3333333333,0.08888888889,0.02652741742,0.9734725826,0.0003156516855,0.00130769984
The wrapper helpers handle this.,Solution Discussion,False,32,CONTRIBUTOR,False,False,False,0.25,0.0390625,0.6666666667,0.09444444444,0.02652741742,0.9734725826,0.0003156516855,0.00130769984
"If the C code is called directly from the compiled code, you will need to follow the appropriate convention there.",Solution Discussion,False,114,CONTRIBUTOR,False,False,False,1.0,0.15625,1.0,0.1,0.02652741742,0.9734725826,0.0003156516855,0.00130769984
"See:

https://github.com/eclipse/openj9/blob/master/runtime/oti/phelpers.m4#L269",Social Conversation,False,82,CONTRIBUTOR,False,False,False,1.0,0.0234375,1.0,0.1055555556,0.02742843734,0.9725715627,0.00130769984,0.001090608783
"@gacholio @zl-wang, apparently with -O0 (@AlenBadel is verifying) gcc++ creates this at the beginning of external methods:

> 0x7ffff64376e4 <fast_jitInstanceOf(J9VMThread*, J9Class*, j9object_t)>          addis   r2,r12,60                                                      │*     
   │0x7ffff64376e8 <fast_jitInstanceOf(J9VMThread*, J9Class*,",Investigation and Exploration,False,349,CONTRIBUTOR,False,False,False,1.0,0.265625,0.3333333333,0.1111111111,0.02817987909,0.9718201209,0.001090608783,1.78e-05
"j9object_t)+4>        addi    r2,r2,-19940 

JIT definitely does not set R12 to be the entry point.",Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,0.5,0.1328125,0.6666666667,0.1166666667,0.02817987909,0.9718201209,0.001090608783,1.78e-05
How should the methods in cnathelp.cpp get the right TOC then?,Investigation and Exploration,False,62,CONTRIBUTOR,False,False,False,0.3235294118,0.0859375,1.0,0.1222222222,0.02817987909,0.9718201209,0.001090608783,1.78e-05
My feeling is we are the first ones who are trying to build DEBUG VM on PPC LE :),Social Conversation,False,81,CONTRIBUTOR,False,False,False,1.0,0.1484375,1.0,0.1277777778,0.028192159,0.971807841,1.78e-05,0.0001303405259
No mystery here.,Social Conversation,False,16,CONTRIBUTOR,False,False,False,0.06666666667,0.0234375,0.2,0.1333333333,0.02828196509,0.9717180349,0.0001303405259,0.0002282569671
JIT-ed code call-able helpers:  the TOC should be gotten by loading from J9VMThread->jitTOC.,Expected Behaviour,False,92,CONTRIBUTOR,False,False,False,0.3555555556,0.125,0.4,0.1388888889,0.02828196509,0.9717180349,0.0001303405259,0.0002282569671
"That has been the case for: AIX32/64, BE Linux64, and LE Linux.",Investigation and Exploration,False,63,CONTRIBUTOR,False,False,False,0.2666666667,0.09375,0.6,0.1444444444,0.02828196509,0.9717180349,0.0001303405259,0.0002282569671
Suppose there is such a load ...,Social Conversation,False,32,CONTRIBUTOR,False,False,False,0.1333333333,0.046875,0.8,0.15,0.02828196509,0.9717180349,0.0001303405259,0.0002282569671
"I don't see why the global-entry pre-prologue (addis/addi based off r12) can be harmful, i.e. even if r2 is set to garbage by the pre-prologue, it will be corrected by the load mentioned above (before TOC is used in that routine).",Investigation and Exploration,False,230,CONTRIBUTOR,False,False,False,1.0,0.3515625,1.0,0.1555555556,0.02828196509,0.9717180349,0.0001303405259,0.0002282569671
"So, is this issue due to:  in non-debug build,  JIT-ed code calls the wrapper containing the load;  in debug build, JIT-ed code calls the C routine directly?",Investigation and Exploration,False,157,CONTRIBUTOR,False,False,False,1.0,0.2578125,0.3333333333,0.1611111111,0.02843923671,0.9715607633,0.0002282569671,0.0003038415884
JIT-ed code doesn't set up either r12 or r2 definitely.,Solution Discussion,False,55,CONTRIBUTOR,False,False,False,0.3333333333,0.0859375,0.6666666667,0.1666666667,0.02843923671,0.9715607633,0.0002282569671,0.0003038415884
I just cannot see how this comes by.,Social Conversation,False,36,CONTRIBUTOR,False,False,False,0.2727272727,0.0703125,1.0,0.1722222222,0.02843923671,0.9715607633,0.0002282569671,0.0003038415884
"See:

https://github.com/eclipse/openj9/blob/master/runtime/oti/phelpers.m4#L269

Sorry, I missed where that CALL_INDIRECT macro is used.",Social Conversation,False,141,CONTRIBUTOR,False,False,False,0.65,0.1015625,0.3333333333,0.1777777778,0.02864858699,0.971351413,0.0003038415884,5.3e-05
From the earlier GAC's comment it sounded like it's JIT responsibility to set R2 if calling directly from JITtecd code.,Solution Discussion,False,119,CONTRIBUTOR,False,False,False,1.0,0.15625,0.6666666667,0.1833333333,0.02864858699,0.971351413,0.0003038415884,5.3e-05
But then global entry would override that.,Solution Discussion,False,42,CONTRIBUTOR,False,False,False,0.35,0.0546875,1.0,0.1888888889,0.02864858699,0.971351413,0.0003038415884,5.3e-05
GAC comment to me:  JIT-ed code should call the wrapper as we did always.,Solution Discussion,False,73,CONTRIBUTOR,False,False,False,1.0,0.125,0.5,0.1944444444,0.02868513082,0.9713148692,5.3e-05,6.94e-05
"If you call the C code directly, you need to set up r12.",Solution Discussion,False,56,CONTRIBUTOR,False,False,False,0.8125,0.1015625,1.0,0.2,0.02868513082,0.9713148692,5.3e-05,6.94e-05
"So, it is not an issue of production build vs.  debug build.",Investigation and Exploration,False,60,CONTRIBUTOR,False,False,False,0.4814814815,0.1015625,0.25,0.2055555556,0.0287329189,0.9712670811,6.94e-05,0.003185934733
It is an issue which helper target you call.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.3333333333,0.0703125,0.5,0.2111111111,0.0287329189,0.9712670811,6.94e-05,0.003185934733
"As it is, JIT-ed code doesn't set up either r12 or r2 (for helper calls...  we do set up r12 or r2 for JNI calls).",Solution Discussion,False,114,CONTRIBUTOR,False,False,False,1.0,0.2109375,0.75,0.2166666667,0.0287329189,0.9712670811,6.94e-05,0.003185934733
"If the target is wrong, it will not work for both production and debug builds.",Solution Discussion,False,78,CONTRIBUTOR,False,False,False,0.5555555556,0.1171875,1.0,0.2222222222,0.0287329189,0.9712670811,6.94e-05,0.003185934733
"Sure, debug build just exposed some confusion in the calling conventions for helper calls.",Investigation and Exploration,False,90,CONTRIBUTOR,False,False,False,0.8235294118,0.109375,0.5,0.2277777778,0.03092806384,0.9690719362,0.003185934733,0.001540680846
We need to  figure out what they actually should be and what is the correct target.,Investigation and Exploration,False,83,CONTRIBUTOR,False,False,False,1.0,0.1328125,1.0,0.2333333333,0.03092806384,0.9690719362,0.003185934733,0.001540680846
I can verify that the inclusion of the -O0 option directly causes this issue.,Investigation and Exploration,False,77,CONTRIBUTOR,True,False,False,0.1772151899,0.109375,0.1428571429,0.2388888889,0.03198961031,0.9680103897,0.001540680846,0.006548591463
"Either when 
export CODE is set
or -O0 is included in VMDEBUG.",Investigation and Exploration,True,64,CONTRIBUTOR,True,False,False,0.1772151899,0.109375,0.2857142857,0.2444444444,0.03198961031,0.9680103897,0.001540680846,0.006548591463
"Given that UMA_DO_NOT_OPTIMIZE_CCODE expands to
CODE",Investigation and Exploration,True,53,CONTRIBUTOR,True,False,False,0.08860759494,0.0546875,0.4285714286,0.25,0.03198961031,0.9680103897,0.001540680846,0.006548591463
"I checked before the direct call to getInstanceOf, at the beginning of getInstanceOf execution and right before the segmentation.",Investigation and Exploration,False,129,CONTRIBUTOR,True,False,False,0.2405063291,0.1484375,0.7142857143,0.2611111111,0.03198961031,0.9680103897,0.001540680846,0.006548591463
"As Gita has mentioned, r12 and r2 aren't used much in production builds and I wasn't able to find any instances where they would used in a way as they contained an expected value, or they're being used as a TOC.",Investigation and Exploration,False,211,CONTRIBUTOR,True,False,False,0.5189873418,0.3203125,0.8571428571,0.2666666667,0.03198961031,0.9680103897,0.001540680846,0.006548591463
"Even in the method that is called inside getInstanceOf, VMInlineCast assumes the data while there's no trace of such instructions on production. 
CODE",Investigation and Exploration,True,151,CONTRIBUTOR,True,False,False,0.3037974684,0.1875,1.0,0.2722222222,0.03198961031,0.9680103897,0.001540680846,0.006548591463
Is the compiled code loading r2 before calling the helper?,Solution Discussion,False,58,CONTRIBUTOR,False,False,False,0.7142857143,0.078125,0.5,0.2777777778,0.03650166363,0.9634983364,0.006548591463,0.0001058614156
The regular helpers load it before every call to the C code (INIT_GOT macro).,Solution Discussion,False,77,CONTRIBUTOR,False,False,False,1.0,0.109375,1.0,0.2833333333,0.03650166363,0.9634983364,0.006548591463,0.0001058614156
Last night Alen stepped through all the way from JITted code to fast_jitInstanceIOff in cnathelp.cpp and he did not see r2 set anywhere.,Investigation and Exploration,False,136,CONTRIBUTOR,False,False,False,1.0,0.1796875,0.3333333333,0.2888888889,0.03657460334,0.9634253967,0.0001058614156,4.42e-05
When we call other helpers via PicBuilder.m4 we do set r2.,Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.4782608696,0.0859375,0.6666666667,0.2944444444,0.03657460334,0.9634253967,0.0001058614156,4.42e-05
Nobody seems to ever set r12.,Investigation and Exploration,False,29,CONTRIBUTOR,False,False,False,0.2608695652,0.046875,1.0,0.3,0.03657460334,0.9634253967,0.0001058614156,4.42e-05
"So perhaps the fast path from the compiled code is always incorrect, and we get lucky in production builds.",Investigation and Exploration,False,107,CONTRIBUTOR,False,False,False,1.0,0.1484375,0.5,0.3055555556,0.03660508119,0.9633949188,4.42e-05,0.0004075557136
r2 is set in pnathelp.m4 for the normal helpers.,Investigation and Exploration,False,48,CONTRIBUTOR,False,False,False,0.4736842105,0.0703125,1.0,0.3111111111,0.03660508119,0.9633949188,4.42e-05,0.0004075557136
"Yes, looks like that from the Alen’s Investigation above.",Social Conversation,False,57,CONTRIBUTOR,False,False,False,1.0,0.078125,0.3333333333,0.3166666667,0.03688589167,0.9631141083,0.0004075557136,8.8e-05
What about setting r12?,Solution Discussion,False,23,CONTRIBUTOR,False,False,False,0.4,0.03125,0.6666666667,0.3222222222,0.03688589167,0.9631141083,0.0004075557136,8.8e-05
Or we should somehow jump to the local entry?,Solution Discussion,False,45,CONTRIBUTOR,False,False,False,0.9,0.0703125,1.0,0.3277777778,0.03688589167,0.9631141083,0.0004075557136,8.8e-05
"In the macros, r12 is used as the function pointer for indirect calls, nothing else.",Solution Discussion,False,84,CONTRIBUTOR,False,False,False,0.652173913,0.1171875,0.5,0.3333333333,0.03694655147,0.9630534485,8.8e-05,7.09e-06
"I don't recall if that was necessary, or simply conveinient.

CODE

This assumes that r2 is already loaded with the jitTOC.",Social Conversation,True,127,CONTRIBUTOR,False,False,False,1.0,0.1796875,1.0,0.3388888889,0.03694655147,0.9630534485,8.8e-05,7.09e-06
"The other way around, GAC.",Workarounds,False,26,CONTRIBUTOR,False,False,False,0.1851851852,0.0390625,0.3333333333,0.3444444444,0.03695143384,0.9630485662,7.09e-06,1.33e-05
"as long as it is the right target of helper for JIT-ed code, it is the helper's responsibility to restore the TOC if it is needed.",Solution Discussion,False,130,CONTRIBUTOR,False,False,False,1.0,0.2109375,0.6666666667,0.35,0.03695143384,0.9630485662,7.09e-06,1.33e-05
That has been the reason we initialized vm->jitTOC (and consequentially J9VMThread->jitTOC).,Solution Discussion,False,92,CONTRIBUTOR,False,False,False,0.4074074074,0.0859375,1.0,0.3555555556,0.03695143384,0.9630485662,7.09e-06,1.33e-05
@zl-wang I think you're missing the point.,Social Conversation,False,42,CONTRIBUTOR,False,False,False,0.347826087,0.0625,0.5,0.3611111111,0.03696060679,0.9630393932,1.33e-05,4.77e-05
"We're talking about calling the C code directly from the compiled code, not going via the helper (which does all the TOC work).",Social Conversation,False,127,CONTRIBUTOR,False,False,False,1.0,0.1796875,1.0,0.3666666667,0.03696060679,0.9630393932,1.33e-05,4.77e-05
"In general, the helpers don't use the indirect call - on LE the functions are called directly.

CODE

BRANCH_SYMBOL does no decoration.",Investigation and Exploration,True,139,CONTRIBUTOR,False,False,False,1.0,0.1796875,0.5,0.3722222222,0.03699345185,0.9630065482,4.77e-05,6.66e-06
I don't recall why the call is surrounded by the NOPs.,Social Conversation,False,54,CONTRIBUTOR,False,False,False,0.4782608696,0.0859375,1.0,0.3777777778,0.03699345185,0.9630065482,4.77e-05,6.66e-06
"For LE, that (r12 setting) is the requirement of the ABI definition.",Investigation and Exploration,False,68,CONTRIBUTOR,False,False,False,0.6315789474,0.09375,0.5,0.3833333333,0.03699803832,0.9630019617,6.66e-06,2e-05
(outside module) caller sets r12 to the callee global entry ... (shared lib) loader relocates TOC base out of it.,Investigation and Exploration,False,113,CONTRIBUTOR,False,False,False,1.0,0.1484375,1.0,0.3888888889,0.03699803832,0.9630019617,6.66e-06,2e-05
"If JIT-ed code calls C code directly (JNI code in essence), we do set r12 (on LE) to the global entry.",Investigation and Exploration,False,102,CONTRIBUTOR,False,False,False,1.0,0.171875,1.0,0.3944444444,0.03701179774,0.9629882023,2e-05,4.38e-05
where does JIT-ed code call C code directly except JNI targets?  that is the question to be answered.,Investigation and Exploration,False,101,CONTRIBUTOR,False,False,False,1.0,0.15625,1.0,0.4,0.03704197969,0.9629580203,4.38e-05,0.000131199442
"no matter the actual call is made through bl or bctrl, the ABI definition needs to be fulfilled (AIX glink or LE plink or something code for bl, for example).",Solution Discussion,False,158,CONTRIBUTOR,False,False,False,1.0,0.234375,0.3333333333,0.4055555556,0.03713237758,0.9628676224,0.000131199442,0.0001129474738
i guessed we are mixing up the meaning of direct/indirect call here.,Social Conversation,False,68,CONTRIBUTOR,False,False,False,0.4333333333,0.1015625,0.6666666667,0.4111111111,0.03713237758,0.9628676224,0.000131199442,0.0001129474738
I referred to call-directly as meaning JIT-ed code seeing it as a target (instead of meaning it through bl).,Social Conversation,False,108,CONTRIBUTOR,False,False,False,0.7,0.1640625,1.0,0.4166666667,0.03713237758,0.9628676224,0.000131199442,0.0001129474738
i can at least see why you have the second nop:  to restore TOC after return.,Social Conversation,False,77,CONTRIBUTOR,False,False,False,1.0,0.1328125,0.3333333333,0.4222222222,0.03721019966,0.9627898003,0.0001129474738,4.44e-05
maybe the first nop as well:  to save the TOC before call.,Social Conversation,False,58,CONTRIBUTOR,False,False,False,0.7647058824,0.1015625,0.6666666667,0.4277777778,0.03721019966,0.9627898003,0.0001129474738,4.44e-05
"Typically, the save is done in the glink code (AIX or BE Linux64) or plt_link code (LE).",Expected Behaviour,False,88,CONTRIBUTOR,False,False,False,1.0,0.1328125,1.0,0.4333333333,0.03721019966,0.9627898003,0.0001129474738,4.44e-05
"for example, you call read() in your code.",Solution Discussion,False,42,CONTRIBUTOR,False,False,False,0.6666666667,0.0625,0.5,0.4388888889,0.03724082546,0.9627591745,4.44e-05,0.0002304042575
the compiler generates bl to read()'s glink or plt_link inside your module.,Solution Discussion,False,75,CONTRIBUTOR,False,False,False,1.0,0.09375,1.0,0.4444444444,0.03724082546,0.9627591745,4.44e-05,0.0002304042575
Some of the C helpers (in particular instanceof) are called directly.,Solution Discussion,False,69,CONTRIBUTOR,False,False,False,1.0,0.0859375,1.0,0.45,0.03739957659,0.9626004234,0.0002304042575,0.0001713537721
"Sounds like the JIT will not need to load r12 for helper calls, if r2 is loaded - we're not using the linker/loader, so the target C code will simply expect r2 to be loaded.",Solution Discussion,False,173,CONTRIBUTOR,False,False,False,1.0,0.2734375,0.5,0.4555555556,0.03751764127,0.9624823587,0.0001713537721,0.0003858680808
"If you're going to generate a bctrl instead of a bl, r12 may as well be used to load CTR for complete safety.",Solution Discussion,False,109,CONTRIBUTOR,False,False,False,0.6571428571,0.1796875,1.0,0.4611111111,0.03751764127,0.9624823587,0.0001713537721,0.0003858680808
"Well, looks like if compiled with -O0 target code expects r12 to be set, from which it derives r2.",Solution Discussion,False,98,CONTRIBUTOR,False,False,False,0.7916666667,0.1484375,0.5,0.4666666667,0.03778350873,0.9622164913,0.0003858680808,2.53e-05
"Copying from above:

> 0x7ffff64376e4 <fast_jitInstanceOf(J9VMThread*, J9Class*, j9object_t)>          addis   r2,r12,60                                                      │*     
   │0x7ffff64376e8 <fast_jitInstanceOf(J9VMThread*, J9Class*, j9object_t)+4>        addi    r2,r2,-199",Social Conversation,False,287,CONTRIBUTOR,False,False,False,1.0,0.1875,1.0,0.4722222222,0.03778350873,0.9622164913,0.0003858680808,2.53e-05
I guessed this issue existed on AIX and BE Linux64 as well (TOC requirement).,Observed Bug Behaviour,False,77,CONTRIBUTOR,False,False,False,0.7,0.109375,0.3333333333,0.4777777778,0.03780096692,0.9621990331,2.53e-05,3.78e-05
We have been just lucky so far switching to call the C target(s) directly (instead of the helper wrapper target(s)).,Investigation and Exploration,False,116,CONTRIBUTOR,False,False,False,1.0,0.15625,0.6666666667,0.4833333333,0.03780096692,0.9621990331,2.53e-05,3.78e-05
Need to identify the set of C helpers called directly.,Solution Discussion,False,54,CONTRIBUTOR,False,False,False,0.5,0.078125,1.0,0.4888888889,0.03780096692,0.9621990331,2.53e-05,3.78e-05
"Yes, for LE:  ABI requires r12 to point at the callee global entry.",Solution Discussion,False,67,CONTRIBUTOR,False,False,False,0.9333333333,0.109375,0.3333333333,0.4944444444,0.03782700625,0.9621729938,3.78e-05,0.001226532263
"At the global entry, two instructions are used to calculate the TOC-base off r12.",Solution Discussion,False,81,CONTRIBUTOR,False,False,False,1.0,0.1171875,0.6666666667,0.5,0.03782700625,0.9621729938,3.78e-05,0.001226532263
60/-199 above are filled in resulting from loader relocations.,Solution Discussion,False,62,CONTRIBUTOR,False,False,False,0.6,0.0703125,1.0,0.5055555556,0.03782700625,0.9621729938,3.78e-05,0.001226532263
"I've actually been thinking for a while that I'd like to switch the direct calls in the helper wrappers to indirect calls, which would have the side-effect of loading r12.",Solution Discussion,False,171,CONTRIBUTOR,False,False,False,1.0,0.2578125,0.5,0.5111111111,0.0386721008,0.9613278992,0.001226532263,4.57e-05
"I expect that means I can stop loading r2, and we could likely eliminate the jitTOC entirely.",Solution Discussion,False,93,CONTRIBUTOR,False,False,False,0.5151515152,0.1328125,1.0,0.5166666667,0.0386721008,0.9613278992,0.001226532263,4.57e-05
"there are many uses of jitTOC in JIT runtime assembly (picBuilder, Crypto, arrayCopy, and recompilation etc etc).",Motivation,False,113,CONTRIBUTOR,False,False,False,1.0,0.1328125,1.0,0.5222222222,0.0387036143,0.9612963857,4.57e-05,0.0005651668273
AIX and BE Linux64 ABI(s):  they did require caller set up r2 before call.,Solution Discussion,False,74,CONTRIBUTOR,False,False,False,0.8421052632,0.125,0.1428571429,0.5277777778,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
But we didn't do that for general helper calls.,Solution Discussion,False,47,CONTRIBUTOR,False,False,False,0.4736842105,0.0703125,0.2857142857,0.5333333333,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
GAC/You set up r2 instead in helper with loading from jitTOC.,Solution Discussion,False,61,CONTRIBUTOR,False,False,False,0.6315789474,0.09375,0.4285714286,0.5388888889,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
LE Linux ABI:  it requires caller to set up r12 for callee global-entry address.,Solution Discussion,False,80,CONTRIBUTOR,False,False,False,0.8421052632,0.125,0.5714285714,0.5444444444,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
r2 is calculated from r12.,Solution Discussion,False,26,CONTRIBUTOR,False,False,False,0.2631578947,0.0390625,0.7142857143,0.55,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
We didn't do that either.,Solution Discussion,False,25,CONTRIBUTOR,False,False,False,0.2631578947,0.0390625,0.8571428571,0.5555555556,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
"It is assumed you set up r2 in helper with loading from jitTOC as well, if TOC is needed.",Solution Discussion,False,89,CONTRIBUTOR,False,False,False,1.0,0.1484375,1.0,0.5611111111,0.03909302062,0.9609069794,0.0005651668273,0.001397241848
"You'll probably want to make a change in this method, which is where most of the work for calls is done:

https://github.com/eclipse/openj9/blob/450399bbd37af823f4360f033ac0e48dbdcd1d6c/runtime/compiler/p/codegen/PPCPrivateLinkage.cpp#L1540

In that method we kill CODE; you'll need to change that to put the entry point in CODE instead.",Solution Discussion,True,341,MEMBER,False,False,False,1.0,0.3359375,0.2,0.5666666667,0.040055736,0.959944264,0.001397241848,3.37e-05
"The CODE parameter tells you what you're generating code for (one of CODE, CODE, CODE) so you can check for CODE.",Solution Discussion,True,113,MEMBER,False,False,False,0.488372093,0.1640625,0.4,0.5722222222,0.040055736,0.959944264,0.001397241848,3.37e-05
Alternatively you can put the TOC in CODE and call the local entry point if you want I guess.,Solution Discussion,True,93,MEMBER,False,False,False,0.4418604651,0.1484375,0.6,0.5777777778,0.040055736,0.959944264,0.001397241848,3.37e-05
"Not sure which is preferable, but doing it the global entry way probably makes the code easier to understand for observers.",Solution Discussion,False,123,MEMBER,False,False,False,0.488372093,0.1640625,0.8,0.5833333333,0.040055736,0.959944264,0.001397241848,3.37e-05
https://github.com/eclipse/openj9/blob/450399bbd37af823f4360f033ac0e48dbdcd1d6c/runtime/compiler/p/codegen/PPCPrivateLinkage.cpp#L1977-L1980,Solution Discussion,False,140,MEMBER,False,False,False,0.02325581395,0.0078125,1.0,0.5888888889,0.040055736,0.959944264,0.001397241848,3.37e-05
Doing the same thing as JNI is probably the right answer (loading r12 and using it to call indirect).,Solution Discussion,False,101,CONTRIBUTOR,False,False,False,1.0,0.1484375,0.5,0.5944444444,0.04007896426,0.9599210357,3.37e-05,0.0001975507147
This is what I'm attempting in the helpers.,Task Progress,False,43,CONTRIBUTOR,False,False,False,0.4210526316,0.0625,1.0,0.6,0.04007896426,0.9599210357,3.37e-05,0.0001975507147
"Now that I think about it this is going to end up being slightly inefficient because later on in the compilation process we'll be able to decide if the helper is reachable via a direct call or not, and if not we'll redirect the call through a trampoline which will correctly load CODE.",Solution Discussion,True,285,MEMBER,False,False,False,1.0,0.4140625,0.25,0.6055555556,0.04021507893,0.9597849211,0.0001975507147,0.0003594564091
By also loading CODE during argument setup we'll end up doing it twice if we end up going through a trampoline.,Solution Discussion,True,111,MEMBER,False,False,False,0.3962264151,0.1640625,0.5,0.6111111111,0.04021507893,0.9597849211,0.0001975507147,0.0003594564091
A bit of a shame.,Social Conversation,False,17,MEMBER,False,False,False,0.09433962264,0.0390625,0.75,0.6166666667,0.04021507893,0.9597849211,0.0001975507147,0.0003594564091
"That's likely why this bug hasn't been seen until now, the helper needs to end up being reachable via a direct call and has to make use of the TOC and the C compiler has to not optimize the usage away.",Solution Discussion,False,201,MEMBER,False,False,False,0.7735849057,0.3203125,1.0,0.6222222222,0.04021507893,0.9597849211,0.0001975507147,0.0003594564091
How about r2 on AIX and BE Linux64 for TR_CHelper?,Solution Discussion,False,50,CONTRIBUTOR,False,False,False,1.0,0.078125,1.0,0.6277777778,0.04046274845,0.9595372516,0.0003594564091,0.0002600368647
"You are right, CODE is not set up either and needs to be.",Solution Discussion,True,57,MEMBER,False,False,False,0.4482758621,0.1015625,0.5,0.6333333333,0.04064191678,0.9593580832,0.0002600368647,0.0001090823512
"Maybe we can remove r2/r12 setup from the trampolines for C helpers and assume jitted code will always do it, that way we don't pay the penalty twice.",Solution Discussion,False,150,MEMBER,False,False,False,1.0,0.2265625,1.0,0.6388888889,0.04064191678,0.9593580832,0.0002600368647,0.0001090823512
"No, we didn't do anything about r2 in trampoline.",Solution Discussion,False,49,CONTRIBUTOR,False,False,False,0.5,0.0703125,0.5,0.6444444444,0.04071707575,0.9592829243,0.0001090823512,0.0001623351525
"If it is decided to use bctrl for the call, then it will not go through trampoline anymore.",Solution Discussion,False,91,CONTRIBUTOR,False,False,False,1.0,0.140625,1.0,0.65,0.04071707575,0.9592829243,0.0001090823512,0.0001623351525
The drawback of course is target address prediction.,Solution Discussion,False,52,CONTRIBUTOR,False,False,False,0.7272727273,0.0625,0.5,0.6555555556,0.0408289265,0.9591710735,0.0001623351525,0.0570348239
bctrl is predicted by the countCache; while bl doesn't need prediction.,Solution Discussion,False,71,CONTRIBUTOR,False,False,False,1.0,0.0859375,1.0,0.6611111111,0.0408289265,0.9591710735,0.0001623351525,0.0570348239
"The reason the C calls from the helper wrappers work without loading r12 today is that the linker is assuming that r2 is already loaded for calls within the same shared library (note the +8 which the linker added below, skipping the r2 load from r12):

CODE

In pure C code, the compiler also seems to be assuming that any calls using CODE (i.e. within the same shared library) will return with r2 pointing to the TOC (it does not save/restore r2 across the call, and generates code assuming r2 is still the caller TOC, which is necessarily the same for all functions in the shared library).",Solution Discussion,True,595,CONTRIBUTOR,False,False,False,1.0,0.8671875,0.07692307692,0.6666666667,0.08012656297,0.919873437,0.0570348239,0.002818533349
"CODE

I'm not sure why the C compiler isn't doing the +8 trick with the above call (**update:*",Solution Discussion,True,96,CONTRIBUTOR,False,False,False,0.1801801802,0.15625,0.1538461538,0.6722222222,0.08012656297,0.919873437,0.0570348239,0.002818533349
it's because I need a CODE directive).,Solution Discussion,True,38,CONTRIBUTOR,False,False,False,0.06306306306,0.0546875,0.3076923077,0.6833333333,0.08012656297,0.919873437,0.0570348239,0.002818533349
I'll update the code to load the TOC from r12 on LE and add the directive to allow the optimized call.,Solution Discussion,False,102,CONTRIBUTOR,False,False,False,0.1891891892,0.1640625,0.3846153846,0.6888888889,0.08012656297,0.919873437,0.0570348239,0.002818533349
"The pre-NOP I'm generating seems unnecessary, but the C compiler is generating the post-NOP (perhaps to reload r2 if necessary after the call in some situations?).",Solution Discussion,False,163,CONTRIBUTOR,False,False,False,0.2522522523,0.21875,0.4615384615,0.6944444444,0.08012656297,0.919873437,0.0570348239,0.002818533349
"So, for direct C helpers calls from the compiled code, either r12 must be loaded with the function address, or r2 must be loaded with the TOC and the call must be to helper+8.",Solution Discussion,False,175,CONTRIBUTOR,False,False,False,0.3063063063,0.265625,0.5384615385,0.7,0.08012656297,0.919873437,0.0570348239,0.002818533349
"So, the call sequences need to be:

*",Solution Discussion,False,39,CONTRIBUTOR,False,False,False,0.07207207207,0.0625,0.6153846154,0.7055555556,0.08012656297,0.919873437,0.0570348239,0.002818533349
"*AIX32/64 / Linux64 BE**

CODE

*",Solution Discussion,True,37,CONTRIBUTOR,False,False,False,0.05405405405,0.046875,0.6923076923,0.7111111111,0.08012656297,0.919873437,0.0570348239,0.002818533349
"*Linux64 LE**

CODE

*OR*

CODE

*",Solution Discussion,True,42,CONTRIBUTOR,False,False,False,0.08108108108,0.0703125,0.7692307692,0.7166666667,0.08012656297,0.919873437,0.0570348239,0.002818533349
"*Linux32**

CODE",Solution Discussion,True,18,CONTRIBUTOR,False,False,False,0.02702702703,0.0234375,0.8461538462,0.7222222222,0.08012656297,0.919873437,0.0570348239,0.002818533349
"This means the trampolines for C helper calls need not contain any loading of r2 or r12, though I suppose as they're doing an indirect branch anyway, they may as well use r12 on LE.",Solution Discussion,False,181,CONTRIBUTOR,False,False,False,0.3153153153,0.2734375,0.9230769231,0.7277777778,0.08012656297,0.919873437,0.0570348239,0.002818533349
"Given that the TOC setup in the C code is technically variable-sized, it's probably safer to load r12 rather than r2 on LE, and it leaves open the possibility of removing the inline load r12 if a trampoline is going to be used.",Solution Discussion,False,227,CONTRIBUTOR,False,False,False,0.3963963964,0.34375,1.0,0.7333333333,0.08012656297,0.919873437,0.0570348239,0.002818533349
"@zl-wang While investigating all this,  I came across:

https://github.com/eclipse/omr/blob/master/util/omrutil/unix/linux/ppc/64le/gettoc.s#L31

Should that not be CODE rather than CODE?",Investigation and Exploration,True,191,CONTRIBUTOR,False,False,False,0.4468085106,0.1640625,0.3333333333,0.7388888889,0.08206856421,0.9179314358,0.002818533349,0.002348920944
"I'm basing this on what I see in the compiled code, and the doc here:

https://www.ibm.com/developerworks/library/l-improve-performance-openpower-abi/index.html

I bet this works because of the localentry directive, so those first two instructions are never executed, since this code is statically-linked with every module that uses it.",Investigation and Exploration,False,340,CONTRIBUTOR,False,False,False,1.0,0.3671875,0.6666666667,0.7444444444,0.08206856421,0.9179314358,0.002818533349,0.002348920944
Fixing this here: https://github.com/eclipse/omr/pull/3014,Action on Issue,False,58,CONTRIBUTOR,False,False,False,0.08510638298,0.03125,1.0,0.75,0.08206856421,0.9179314358,0.002818533349,0.002348920944
"As part of the TOC optimization work I'm doing in the VM, the jitTOC will be stored in the TOC slot in the current C stack frame, so the JIT will have the option of encoding the r2 load on the old ABI platforms as either potentially multiple instructions to load the compile-time constant, or a single instruction to fetch it from r1 (the offset will be CODE).",Solution Discussion,True,360,CONTRIBUTOR,False,False,False,1.0,0.5390625,1.0,0.7555555556,0.08368699722,0.9163130028,0.002348920944,0.0001223955515
"Ah, seems this is unnecessary as the jitTOC is already propagated into a slot in the J9VMThread which is also a single instruction fetch.",Solution Discussion,False,137,CONTRIBUTOR,False,False,False,1.0,0.1875,1.0,0.7611111111,0.08377132913,0.9162286709,0.0001223955515,0.005260431966
"@gacholio   Yes, that should be an addi.",Solution Discussion,False,40,CONTRIBUTOR,False,False,False,1.0,0.0625,1.0,0.7666666667,0.08739582604,0.912604174,0.005260431966,0.02385381934
FYi @AlenBadel @gita-omr I've tagged this for the 0.11.0 release as we're not calling the c code correctly and that may result in issues.,Action on Issue,False,137,MEMBER,False,False,False,1.0,0.203125,1.0,0.7722222222,0.1038313764,0.8961686236,0.02385381934,0.1292651629
@AlenBadel @gita-omr Is this still an open issue?,Social Conversation,False,49,MEMBER,False,False,False,1.0,0.0703125,0.5,0.7777777778,0.1928965305,0.8071034695,0.1292651629,0.000130769984
Will it close in time for the 0.11.0 release?,Action on Issue,False,45,MEMBER,False,False,False,1.0,0.0703125,1.0,0.7833333333,0.1928965305,0.8071034695,0.1292651629,0.000130769984
@AlenBadel is actively working on it.,Task Progress,False,37,CONTRIBUTOR,False,False,False,0.6,0.046875,0.3333333333,0.7888888889,0.1929866325,0.8070133675,0.000130769984,0.005357918949
There are a few places that need to be checked.,Investigation and Exploration,False,47,CONTRIBUTOR,False,False,False,1.0,0.078125,0.6666666667,0.7944444444,0.1929866325,0.8070133675,0.000130769984,0.005357918949
We are hoping for 0.11.0 release.,Task Progress,False,33,CONTRIBUTOR,False,False,False,0.6,0.046875,1.0,0.8,0.1929866325,0.8070133675,0.000130769984,0.005357918949
"@AlenBadel any news, we need to close off the release.",Task Progress,False,54,NONE,False,False,False,1.0,0.078125,1.0,0.8055555556,0.196678299,0.803321701,0.005357918949,0.009658941575
I'm currently finalising testing the solution.,Task Progress,False,46,CONTRIBUTOR,True,False,False,0.8571428571,0.046875,0.5,0.8111111111,0.2033334187,0.7966665813,0.009658941575,0.01920965971
I will have an update later today.,Task Progress,False,34,CONTRIBUTOR,True,False,False,1.0,0.0546875,1.0,0.8166666667,0.2033334187,0.7966665813,0.009658941575,0.01920965971
I've ran into additional conditions on AIX that need to be investigated and addressed.,Investigation and Exploration,False,86,CONTRIBUTOR,True,False,False,0.9375,0.1171875,0.2,0.8222222222,0.2165690907,0.7834309093,0.01920965971,0.0002757120844
"@irinarada @DanHeidinga
In regards to release 0.11.0,",Social Conversation,False,54,CONTRIBUTOR,True,False,False,0.5,0.0625,0.4,0.8277777778,0.2165690907,0.7834309093,0.01920965971,0.0002757120844
I would like to request that this issue is dropped off the required list.,Action on Issue,False,73,CONTRIBUTOR,True,False,False,0.875,0.109375,0.6,0.8333333333,0.2165690907,0.7834309093,0.01920965971,0.0002757120844
"This issue has never been reported on any sanity, or by any other user of OpenJ9.",Action on Issue,False,81,CONTRIBUTOR,True,False,False,1.0,0.125,0.8,0.8388888889,0.2165690907,0.7834309093,0.01920965971,0.0002757120844
It is only exposed when building with debug mode using the precise instructions above.,Investigation and Exploration,False,86,CONTRIBUTOR,True,False,False,0.875,0.109375,1.0,0.8444444444,0.2165690907,0.7834309093,0.01920965971,0.0002757120844
What are these additional things on AIX?,Investigation and Exploration,False,40,CONTRIBUTOR,False,False,False,0.875,0.0546875,0.5,0.85,0.2167590594,0.7832409406,0.0002757120844,0.0001546049072
Will the helper wrappers need to be updated?,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,1.0,0.0625,1.0,0.8555555556,0.2167590594,0.7832409406,0.0002757120844,0.0001546049072
"@AlenBadel I agree this isn't a user-focused issue so I'm fine with moving it out of 0.11.0.

I've moved it to the 0.12.0 release for now.",Action on Issue,False,140,MEMBER,False,False,False,1.0,0.2265625,1.0,0.8611111111,0.216865584,0.783134416,0.0001546049072,0.003365233479
"@gacholio I think @AlenBadel meant some specifics within JIT, e.g. AIX linkage code is taking different path, extra testing etc.",Social Conversation,False,128,CONTRIBUTOR,False,False,False,1.0,0.15625,0.5,0.8666666667,0.2191842677,0.7808157323,0.003365233479,0.1283873506
The register convention we agreed on stays the same.,Social Conversation,False,52,CONTRIBUTOR,False,False,False,0.45,0.0703125,1.0,0.8722222222,0.2191842677,0.7808157323,0.003365233479,0.1283873506
"Main issue:
PPC ABI is not being followed on Linux and AIX when calling VM Helpers from JIT compiled code.",Observed Bug Behaviour,False,107,CONTRIBUTOR,True,False,False,0.1640625,0.1640625,0.05263157895,0.8777777778,0.3076445993,0.6923554007,0.1283873506,1.0
ABI behavior requires that the caller of a C/C++ compiled method pass the TOC of the calle's library.,Expected Behaviour,False,101,CONTRIBUTOR,True,False,False,0.1484375,0.1484375,0.1052631579,0.8833333333,0.3076445993,0.6923554007,0.1283873506,1.0
In this case the JIT is calling the compiled method.,Investigation and Exploration,False,52,CONTRIBUTOR,True,False,False,0.078125,0.078125,0.1578947368,0.8888888889,0.3076445993,0.6923554007,0.1283873506,1.0
"Under ABI, the JIT(caller) is required to load r12(PPCLE) or r2(AIX, LinuxX64BE) with the jitTOC, or the target method's address respectively.",Expected Behaviour,False,142,CONTRIBUTOR,True,False,False,0.1640625,0.1640625,0.2105263158,0.8944444444,0.3076445993,0.6923554007,0.1283873506,1.0
Currently the VM Helper is expecting the JIT to pass the target's address in r12(PPCLEx64) or r2(AIX32/64 PPCBE).,Expected Behaviour,False,113,CONTRIBUTOR,True,False,False,0.140625,0.140625,0.2631578947,0.9,0.3076445993,0.6923554007,0.1283873506,1.0
"On Linux X64 PPCLE
load r12 with helper's address
bl helper

On AIX32/64 and Linux64 BE, the solution is to load r2 with the jitTOC then branching to the helper's address.",Solution Discussion,False,175,CONTRIBUTOR,True,False,False,0.265625,0.265625,0.3684210526,0.9111111111,0.3076445993,0.6923554007,0.1283873506,1.0
"load r2 with jitTOC
bl helper

On Linux32, no change is required.",Solution Discussion,False,68,CONTRIBUTOR,True,False,False,0.109375,0.109375,0.4210526316,0.9166666667,0.3076445993,0.6923554007,0.1283873506,1.0
We are able to directly branch to the helper.,Solution Discussion,False,45,CONTRIBUTOR,True,False,False,0.0703125,0.0703125,0.4736842105,0.9222222222,0.3076445993,0.6923554007,0.1283873506,1.0
"Implementation

There are several different types (Written in C/C++) of helpers used in the JIT, the only category we're interested in are the CHelpers used in the PPC Codgen, which are listed below.",Solution Discussion,False,201,CONTRIBUTOR,True,False,False,0.2734375,0.2734375,0.5263157895,0.9277777778,0.3076445993,0.6923554007,0.1283873506,1.0
"SET(TR_checkCast,                  (void *)jitCheckCast,              TR_CHelper);
SET(TR_checkCastForArrayStore, (void *)jitCheckCastForArrayStore, TR_CHelper);
SET(TR_instanceOf,                 (void *)fast_jitInstanceOf,        TR_CHelper);
SET(TR_checkAssignable, (void *)fast_jitCheckAssignable, TR_CHelper);
SET(TR_monitorEntry,               (void *)jitMonitorEntry,           TR_CHelper);
SET(TR_methodMonitorEntry,         (void *)jitMethodMonitorEntry,     TR_CHelper);
SET(TR_monitorExit,                (void *)jitMonitorExit,            TR_CHelper);
SET(TR_methodMonitorExit, (void *)jitMethodMonitorExit, TR_CHelper);
SET(TR_newObject,                  (void *)jitNewObject,              TR_CHelper);
SET(TR_newArray,                   (void *)jitNewArray,               TR_CHelper);
SET(TR_aNewArray,                  (void *)jitANewArray,              TR_CHelper);
SET(TR_newObjectNoZeroInit,        (void *)jitNewObjectNoZeroInit, TR_CHelper);
SET(TR_newArrayNoZeroInit,         (void *)jitNewArrayNoZeroInit,  TR_CHelper);
SET(TR_aNewArrayNoZeroInit, (void *)jitANewArrayNoZeroInit, TR_CHelper);
SET(TR_typeCheckArrayStore, (void *)jitTypeCheckArrayStoreWithNullCheck, TR_CHelper);

Within the codegen, CHelper calls are generated here
runtime/compiler/p/codegen/PPCPrivateLinkage.cpp - buildDirectDispatch

Therefore the best location to generate the instructions above will be within runtime/compiler/p/codegen/PPCPrivateLinkage.cpp - buildPrivateLinkageArgs.",Solution Discussion,False,1499,CONTRIBUTOR,True,False,False,1.0,1.0,0.5789473684,0.9333333333,0.3076445993,0.6923554007,0.1283873506,1.0
"This method is downstream in the linkage generation, and is an appropriate location to add CHelper specific code.",Solution Discussion,False,113,CONTRIBUTOR,True,False,False,0.140625,0.140625,0.6315789474,0.9388888889,0.3076445993,0.6923554007,0.1283873506,1.0
"Main-line/Out-of-line
Within the CHelper evaluators, within J9TreeEvaluator.cpp compilation can take two routes Main-Line or Out-of-line.",Solution Discussion,False,138,CONTRIBUTOR,True,False,False,0.1796875,0.1796875,0.6842105263,0.9444444444,0.3076445993,0.6923554007,0.1283873506,1.0
Main-line code is generated in a very optimised way.,Investigation and Exploration,False,52,CONTRIBUTOR,True,False,False,0.078125,0.078125,0.7368421053,0.95,0.3076445993,0.6923554007,0.1283873506,1.0
"Under certain conditions which are listed and contained within each evaluator itself, an evaluator may choose to compile it differently which is refereed to out-of-line code.",Solution Discussion,False,174,CONTRIBUTOR,True,False,False,0.21875,0.21875,0.7894736842,0.9555555556,0.3076445993,0.6923554007,0.1283873506,1.0
"There are several evaluators that are able to generate both mainline and out of line which includes jitInstanceOf, ArrayCHK, checkcast, jitMonitorExit and jitMonitorEntry.",Solution Discussion,False,171,CONTRIBUTOR,True,False,False,0.1796875,0.1796875,0.8421052632,0.9611111111,0.3076445993,0.6923554007,0.1283873506,1.0
I've verified that both these compilations will effectively call PPCPrivateLinkage and generate the proper linkage.,Solution Discussion,False,115,CONTRIBUTOR,True,False,False,0.125,0.125,0.8947368421,0.9666666667,0.3076445993,0.6923554007,0.1283873506,1.0
"PicBuilder
Other Helpers, like those called by PicBuilder are already called in proper ABI due to the wrappers they use.",Solution Discussion,False,121,CONTRIBUTOR,True,False,False,0.1640625,0.1640625,0.9473684211,0.9722222222,0.3076445993,0.6923554007,0.1283873506,1.0
"The CHelpers discussed above were only created to service the codegen
        
Current solution can be found here
https://github.com/AlenBadel/openj9/tree/2994",Solution Discussion,False,155,CONTRIBUTOR,True,False,False,0.15625,0.15625,1.0,0.9777777778,0.3076445993,0.6923554007,0.1283873506,1.0
#3354 is merged.,Action on Issue,False,16,CONTRIBUTOR,False,False,False,0.6,0.0234375,0.5,0.9833333333,0.9966558697,0.003344130284,1.0,0.00485352044
@AlenBadel can we close this?,Action on Issue,False,29,CONTRIBUTOR,False,False,False,1.0,0.0390625,1.0,0.9888888889,0.9966558697,0.003344130284,1.0,0.00485352044
Agreed.,Social Conversation,False,7,CONTRIBUTOR,True,False,True,0.5,0.0078125,0.5,0.9944444444,1.0,0.0,0.00485352044,0.0
Closing this.,Action on Issue,False,13,CONTRIBUTOR,True,False,True,1.0,0.015625,1.0,1.0,1.0,0.0,0.00485352044,0.0
Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR testing passed but failed,Testing,False,75,CONTRIBUTOR,True,True,False,0.8571428571,0.1034482759,0.5,0.009174311927,0.0,1.0,0.0,0.005144640352
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR/173
osx1011-x86-1
CODE",Testing,True,108,CONTRIBUTOR,True,True,False,1.0,0.1206896552,1.0,0.01834862385,0.0,1.0,0.0,0.005144640352
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly/87
osx1013-x86-4",Testing,False,105,CONTRIBUTOR,True,False,False,1.0,0.08620689655,1.0,0.02752293578,0.0008915394961,0.9991084605,0.005144640352,5.32e-05
"Changes in OMR build
https://github.com/eclipse/openj9/compare/05e9a0c...5b579fd
https://github.com/eclipse/openj9-omr/compare/8d17d5c...1fb4081

Changes in nightly build
https://github.com/eclipse/openj9/compare/2755f24...0922dee
https://github.com/eclipse/openj9-omr/compare/8a77e0c...8d17d5c",Testing,False,300,CONTRIBUTOR,True,False,False,1.0,0.2931034483,1.0,0.03669724771,0.0009007584818,0.9990992415,5.32e-05,0.05589632154
"Another one running memoryMXBeanShutdownTest_0
https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_extended.functional_x86-64_mac_Nightly/90
osx1011-x86-2
CODE",Testing,True,161,CONTRIBUTOR,True,False,False,1.0,0.2068965517,1.0,0.04587155963,0.01058730116,0.9894126988,0.05589632154,0.05762474144
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly/97
osx1013-x86-3
cmdLineTester_loopReduction_0
CODE",Testing,True,142,CONTRIBUTOR,True,False,False,1.0,0.1551724138,1.0,0.05504587156,0.02057337005,0.97942663,0.05762474144,8.78e-06
@andrewcraik @dsouzai Can somebody look at this failure please.,Contribution and Commitment,False,63,CONTRIBUTOR,True,False,False,1.0,0.1551724138,1.0,0.06422018349,0.02057489141,0.9794251086,8.78e-06,5.41e-05
"I see another problem in the output of that run:

00:40:53          at com.ibm.oti.jvmtests.GetNanoTimeAdjustment.test_LowerBound(GetNanoTimeAdjustment.java:139)
00:40:53          at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:40:53          at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:40:53          at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:40:53          at com.ibm.oti.jvmtests.AutoRun.main(AutoRun.java:34)
00:40:53  
00:40:53  FAILURES!!!
00:40:53  Tests run: 9,  Failures: 0,  Errors:",Observed Bug Behaviour,False,574,CONTRIBUTOR,False,False,False,1.0,1.0,0.5,0.07339449541,0.02058426934,0.9794157307,5.41e-05,0.0002366406152
"CODE
Why is this flagged as a JIT issue?",Investigation and Exploration,True,41,CONTRIBUTOR,False,False,False,0.7692307692,0.1724137931,0.3333333333,0.09174311927,0.02062527793,0.9793747221,0.0002366406152,0.0009727685091
Is there a good and bad build wherein there are only JIT changes?,Investigation and Exploration,False,65,CONTRIBUTOR,False,False,False,1.0,0.224137931,0.6666666667,0.1009174312,0.02062527793,0.9793747221,0.0002366406152,0.0009727685091
"https://github.com/eclipse/openj9/issues/6361#issuecomment-508929509 has two different ranges, both of which only affect aarch64.",Observed Bug Behaviour,False,129,CONTRIBUTOR,False,False,False,0.8461538462,0.1896551724,1.0,0.1100917431,0.02062527793,0.9793747221,0.0002366406152,0.0009727685091
"@dsouzai it is an intermittent problem, the first occurrence of the failure probably didn't line up with the change that caused the problem.",Investigation and Exploration,False,140,CONTRIBUTOR,True,False,False,1.0,0.3965517241,0.5,0.119266055,0.02079385367,0.9792061463,0.0009727685091,3.3e-05
"Given the problem is intermittent, I'm guessing the problem is JIT/AOT related.",Investigation and Exploration,False,79,CONTRIBUTOR,True,False,False,0.5652173913,0.224137931,1.0,0.128440367,0.02079385367,0.9792061463,0.0009727685091,3.3e-05
I'm guessing the problem is JIT/AOT related.,Investigation and Exploration,False,44,CONTRIBUTOR,False,False,False,0.6153846154,0.1379310345,0.3333333333,0.1376146789,0.0207995758,0.9792004242,3.3e-05,8.67e-05
There's nothing to suggest this is JIT/AOT though.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.6923076923,0.1551724138,0.6666666667,0.1467889908,0.0207995758,0.9792004242,3.3e-05,8.67e-05
"If anything, this seems like a CODE or CODE issue given

CODE",Investigation and Exploration,True,63,CONTRIBUTOR,False,False,False,1.0,0.224137931,1.0,0.1559633028,0.0207995758,0.9792004242,3.3e-05,8.67e-05
Intermittent problems like this are almost always the JIT.,Investigation and Exploration,False,58,CONTRIBUTOR,True,False,False,1.0,0.1551724138,1.0,0.1651376147,0.02081460774,0.9791853923,8.67e-05,9.15e-05
"Am assuming that despite the success and failure conditions being met, the test is marked as Failed because of the Errors:
14:40:31   [ERR] MessageDigest load - Native crypto library disabled.
14:40:31   [ERR] CipherCore Load - using native crypto library.",Investigation and Exploration,False,258,CONTRIBUTOR,False,False,False,1.0,0.7068965517,0.5,0.1743119266,0.02083045713,0.9791695429,9.15e-05,6.43e-05
which I believe that is the behaviour one should expect from the cmdlinetester framework,Expected Behaviour,False,88,CONTRIBUTOR,False,False,False,0.3414634146,0.2413793103,1.0,0.1834862385,0.02083045713,0.9791695429,9.15e-05,6.43e-05
I don't see how this is a valid criteria for saying something is a JIT problem.,Social Conversation,False,79,CONTRIBUTOR,False,False,False,0.5333333333,0.275862069,0.25,0.1926605505,0.0208416062,0.9791583938,6.43e-05,5.63e-06
It removes any sense of shared responsibility of the code base and puts all the onus on the JIT to always prove that it isn't at fault.,Investigation and Exploration,False,135,CONTRIBUTOR,False,False,False,0.9,0.4655172414,0.5,0.2018348624,0.0208416062,0.9791583938,6.43e-05,5.63e-06
"That said, given, as you say, the tendency of JIT bugs to cause intermittent failures, I'd be more sympathetic if this problem occurred during the execution of the JVM.",Social Conversation,False,168,CONTRIBUTOR,False,False,False,1.0,0.5172413793,0.75,0.2110091743,0.0208416062,0.9791583938,6.43e-05,5.63e-06
But to suggest that there's a JIT issue after the execution of the JVM just because the problem is intermittent is unfair.,Social Conversation,False,122,CONTRIBUTOR,False,False,False,0.7333333333,0.3793103448,1.0,0.2201834862,0.0208416062,0.9791583938,6.43e-05,5.63e-06
"the test is marked as Failed because of the Errors

Note CODE in this case means the output was written to stderr.",Investigation and Exploration,True,116,CONTRIBUTOR,True,False,False,1.0,0.3965517241,0.5,0.2293577982,0.02084258259,0.9791574174,5.63e-06,1.18e-05
"There are no ""errors"", just messages being printed and then interpreted by the cmdlinetester.",Investigation and Exploration,False,93,CONTRIBUTOR,True,False,False,0.6086956522,0.2413793103,1.0,0.2385321101,0.02084258259,0.9791574174,5.63e-06,1.18e-05
I'd be more sympathetic if this problem occurred during the execution of the JVM.,Social Conversation,False,81,CONTRIBUTOR,True,False,False,1.0,0.2586206897,0.3333333333,0.247706422,0.02084462621,0.9791553738,1.18e-05,4.43e-05
"The problem occurs when running the cmdlinetester Java application, using the JVM.",Bug Reproduction,False,82,CONTRIBUTOR,True,False,False,0.8,0.2068965517,0.6666666667,0.2568807339,0.02084462621,0.9791553738,1.18e-05,4.43e-05
I'm not sure what you mean.,Social Conversation,False,27,CONTRIBUTOR,True,False,False,0.4,0.1034482759,1.0,0.2660550459,0.02084462621,0.9791553738,1.18e-05,4.43e-05
"CODE

It runs the command CODE, then the test harness determines that it all the success conditions match and none of the failure conditions match.",Observed Bug Behaviour,True,149,CONTRIBUTOR,False,False,False,1.0,0.4482758621,0.25,0.2752293578,0.02085230113,0.9791476989,4.43e-05,0.0001834423374
"It proceeds to say :

CODE

and then CODE gets set.",Investigation and Exploration,True,55,CONTRIBUTOR,False,False,False,0.4615384615,0.2068965517,0.5,0.2844036697,0.02085230113,0.9791476989,4.43e-05,0.0001834423374
After the java command above has finished running.,Investigation and Exploration,False,50,CONTRIBUTOR,False,False,False,0.3076923077,0.1379310345,0.75,0.2935779817,0.02085230113,0.9791476989,4.43e-05,0.0001834423374
I don't see how the JIT is at fault here.,Investigation and Exploration,False,41,CONTRIBUTOR,False,False,False,0.3846153846,0.1724137931,1.0,0.3027522936,0.02085230113,0.9791476989,4.43e-05,0.0001834423374
There is still some Java code involved here.,Investigation and Exploration,False,44,CONTRIBUTOR,True,False,False,0.4444444444,0.1379310345,0.25,0.3119266055,0.02088409074,0.9791159093,0.0001834423374,0.001257628253
https://github.com/eclipse/openj9/blob/1c80abff8e9b63a6d8ad6ef224d3bb893e33a842/test/functional/cmdline_options_tester/src/MainTester.java#L111,Testing,False,143,CONTRIBUTOR,True,False,False,0.05555555556,0.01724137931,0.5,0.3211009174,0.02088409074,0.9791159093,0.0001834423374,0.001257628253
Anyway I've started some grinders and we'll see what we can figure out from that before proceeding.,Testing,False,99,CONTRIBUTOR,True,False,False,1.0,0.3103448276,0.75,0.3302752294,0.02088409074,0.9791159093,0.0001834423374,0.001257628253
"3x on a 0.15 release build: https://ci.eclipse.org/openj9/view/Test/job/Test-Grinder/450
3x on the last nightly build: https://ci.eclipse.org/openj9/view/Test/job/Test-Grinder/451",Testing,False,180,CONTRIBUTOR,True,False,False,0.8333333333,0.2586206897,1.0,0.3394495413,0.02088409074,0.9791159093,0.0001834423374,0.001257628253
"@smlambert for some reason the grinder isn't passing all the sanity.functionality testing, there are 4 failures, not sure why.",Testing,False,126,CONTRIBUTOR,True,False,False,1.0,0.3275862069,1.0,0.3486238532,0.02110203119,0.9788979688,0.001257628253,0.0002379509176
"I do not see any failures in the 3x grinder links you shared (450/451), can you share a link to the grinders that reported problems?",Social Conversation,False,132,CONTRIBUTOR,False,False,False,1.0,0.4310344828,1.0,0.3577981651,0.02114326685,0.9788567331,0.0002379509176,0.0003140794877
"@smlambert ok sorry, I must have been looking at old links by accident, please ignore.",Social Conversation,False,86,CONTRIBUTOR,True,False,False,1.0,0.2586206897,1.0,0.3669724771,0.0211976952,0.9788023048,0.0003140794877,7.08e-05
happy to ignore for now ;),Social Conversation,False,26,CONTRIBUTOR,False,False,False,1.0,0.1034482759,1.0,0.376146789,0.0212099569,0.9787900431,7.08e-05,4.7e-05
"Actually the failures are there in the 450 grinder, but the problem is that I used the test material from master in order to test the 0.15 branch.",Testing,False,146,CONTRIBUTOR,True,False,False,1.0,0.4827586207,0.5,0.3853211009,0.02121810867,0.9787818913,4.7e-05,0.00651377534
I thought the failures were in both runs.,Social Conversation,False,41,CONTRIBUTOR,True,False,False,0.2857142857,0.1379310345,1.0,0.3944954128,0.02121810867,0.9787818913,4.7e-05,0.00651377534
"6x grinders, on the same JVMs as above:
0.15: https://ci.eclipse.org/openj9/view/Test/job/Test-Grinder/452
head: https://ci.eclipse.org/openj9/view/Test/job/Test-Grinder/453 - 1 failure",Testing,False,187,CONTRIBUTOR,True,False,False,1.0,0.275862069,1.0,0.4036697248,0.02234691216,0.9776530878,0.00651377534,0.003900901305
I'll run more grinders when the 0.15 release is done.,Task Progress,False,53,CONTRIBUTOR,True,False,False,1.0,0.1724137931,1.0,0.4128440367,0.02302291813,0.9769770819,0.003900901305,0.002548931278
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Personal/55
CODE",Testing,True,97,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.4220183486,0.0234646347,0.9765353653,0.002548931278,0.006110333228
"6x, same JVMs, no failures
0.15: https://ci.eclipse.org/openj9/view/Test/job/Test-Grinder/457
head: https://ci.eclipse.org/openj9/view/Test/job/Test-Grinder/462/",Testing,False,163,CONTRIBUTOR,True,False,False,1.0,0.1896551724,1.0,0.4311926606,0.02452352376,0.9754764762,0.006110333228,0.06240341433
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR/199
cmdLineTester_CryptoTest_0",Testing,False,115,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.4403669725,0.03533771188,0.9646622881,0.06240341433,0.5740636644
"Haven't seen this in a while, assuming fixed.",Task Progress,False,45,CONTRIBUTOR,True,False,False,1.0,0.1379310345,1.0,0.4495412844,0.1348199682,0.8651800318,0.5740636644,1.0
"It's back.
https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR/381
cmdLineTester_CryptoTest_0",Task Progress,False,127,CONTRIBUTOR,True,False,False,1.0,0.1034482759,1.0,0.4587155963,0.3081147828,0.6918852172,1.0,0.2951562313
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly/241
cmdLineTester_CryptoTest_0",Testing,False,119,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.4678899083,0.3592638272,0.6407361728,0.2951562313,0.6523644538
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Personal/295/
cmdLineTester_loopReduction_0

CODE",Testing,True,132,CONTRIBUTOR,True,False,False,1.0,0.08620689655,1.0,0.4770642202,0.4723152043,0.5276847957,0.6523644538,0.4317150312
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR/498
cmdLineTester_CryptoTest_0",Testing,False,115,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.4862385321,0.5471291806,0.4528708194,0.4317150312,0.7240121827
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR_testList_1/20
cmdLineTester_CryptoTest_0",Testing,False,125,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.495412844,0.6725967376,0.3274032624,0.7240121827,0.04001375293
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly_testList_1/20
cmdLineTester_CryptoTest_0",Testing,False,129,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.504587156,0.6795309135,0.3204690865,0.04001375293,0.2838986371
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR_testList_0/47
cmdLineTester_CryptoTest_0",Testing,False,125,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.5137614679,0.7287290752,0.2712709248,0.2838986371,0.1023406456
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly_testList_0/51 - osx1013-x86-3
cmdLineTester_CryptoTest_0",Testing,False,145,CONTRIBUTOR,True,False,False,1.0,0.1034482759,1.0,0.5229357798,0.7464641784,0.2535358216,0.1023406456,0.03333540361
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR_testList_0/58 - osx1011-x86-1
cmdLineTester_CryptoTest_0",Testing,False,141,CONTRIBUTOR,True,False,False,1.0,0.1034482759,1.0,0.5321100917,0.752241031,0.247758969,0.03333540361,1.24e-05
@llxia can you help diagnose this problem please.,Contribution and Commitment,False,49,CONTRIBUTOR,True,False,False,0.4,0.1379310345,0.5,0.5412844037,0.7522431881,0.2477568119,1.24e-05,0.001356949176
We need to add some additional debugging to see why the overall result is failure even though the cmdLineTest passed.,Task Progress,False,117,CONTRIBUTOR,True,False,False,1.0,0.3448275862,1.0,0.5504587156,0.7522431881,0.2477568119,1.24e-05,0.001356949176
"sure, I will look into this.",Contribution and Commitment,False,28,CONTRIBUTOR,False,False,False,1.0,0.1034482759,1.0,0.5596330275,0.7524783404,0.2475216596,0.001356949176,0.06662049161
"Here is what I found so far:

- The failure rate varies.",Investigation and Exploration,False,58,CONTRIBUTOR,False,False,False,0.2666666667,0.2068965517,0.5,0.5688073394,0.7640233261,0.2359766739,0.06662049161,0.7024860106
"It can be as low as 0.4% ([500x Grinder] URL 
- The exit code is 255 in TKG
- Reran only the java program (without cmdlinetester) 1200x ([500x] URL  / [500x] URL  / [200x] URL  in 3 Grinder jobs) cannot reproduce the failure",Investigation and Exploration,False,226,CONTRIBUTOR,False,False,False,1.0,0.775862069,1.0,0.5779816514,0.7640233261,0.2359766739,0.06662049161,0.7024860106
https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly_testList_0/120,Testing,False,102,CONTRIBUTOR,True,False,False,1.0,0.01724137931,1.0,0.5871559633,0.8857605091,0.1142394909,0.7024860106,0.02225954837
We noticed the same issue in another cmdlinetest,Bug Reproduction,False,48,CONTRIBUTOR,False,False,False,1.0,0.1379310345,0.5,0.5963302752,0.8896179734,0.1103820266,0.02225954837,0.05033867386
"[cmdLineTester_EnableAssertionStatusTest on mac] URL :

CODE",Testing,True,62,CONTRIBUTOR,False,False,False,0.75,0.1034482759,1.0,0.6055045872,0.8896179734,0.1103820266,0.02225954837,0.05033867386
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_Nightly_testList_0/125
cmdLineTester_CryptoTest_0",Testing,False,130,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.6146788991,0.8983414046,0.1016585954,0.05033867386,0.07858840073
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_extended.functional_x86-64_mac_Release_testList_0/10
cmdLineTester_EnableAssertionStatusTest_0
CODE",Testing,True,152,CONTRIBUTOR,True,False,False,1.0,0.08620689655,1.0,0.623853211,0.9119603669,0.0880396331,0.07858840073,0.1102578859
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_sanity.functional_x86-64_mac_OMR_testList_0/127
cmdLineTester_CryptoTest_0",Testing,False,126,CONTRIBUTOR,True,False,False,1.0,0.05172413793,1.0,0.6330275229,0.9310674868,0.06893251321,0.1102578859,0.0007046806361
@OscarQQ Could you check if this can be reproduced using JDK11 on mac?,Contribution and Commitment,False,70,CONTRIBUTOR,False,False,False,1.0,0.224137931,0.3333333333,0.6422018349,0.9311896043,0.06881039571,0.0007046806361,0.3152815591
It seems the problem is specific to JDK8.,Investigation and Exploration,False,41,CONTRIBUTOR,False,False,False,0.6153846154,0.1379310345,1.0,0.6605504587,0.9311896043,0.06881039571,0.0007046806361,0.3152815591
"https://ci.eclipse.org/openj9/job/Test_openjdk8_j9_extended.functional_x86-64_mac_Nightly/547
cmdLineTester_locales_0
CODE",Testing,True,124,CONTRIBUTOR,True,False,False,1.0,0.08620689655,1.0,0.6697247706,0.9858262636,0.01417373637,0.3152815591,0.01346912259
"cmdLineTester_locales failure rate is 8% (40 / 500 runs) on machine osx1013-x86-4: https://ci.eclipse.org/openj9/job/Grinder/1193/
We are going test with -Xint",Testing,False,160,CONTRIBUTOR,False,False,False,1.0,0.3620689655,1.0,0.6788990826,0.9881603927,0.01183960727,0.01346912259,0.02651069351
"JDK8 Having **-Xint** right before -cp, we get failures https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/4944
CODE

JDK8 Removing JIT completely, still get failures https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/4946/
CODE

JDK11 works perfectly fine with the same command https://ci.adoptopenjdk.net/view/Test_grinder/job/Grinder/4947/
CODE",Bug Reproduction,True,368,CONTRIBUTOR,False,False,False,1.0,0.6034482759,0.5,0.6880733945,0.9927545584,0.007245441552,0.02651069351,0.006864019174
So we suspect it might not be a JIT related issue,Investigation and Exploration,False,49,CONTRIBUTOR,False,False,False,0.3142857143,0.1896551724,1.0,0.6972477064,0.9927545584,0.007245441552,0.02651069351,0.006864019174
You are adding CODE in the wrong place.,Investigation and Exploration,True,39,CONTRIBUTOR,True,False,False,0.347826087,0.1379310345,0.1428571429,0.7064220183,0.9939440574,0.006055942622,0.006864019174,0.0128898379
"Using CODE for the individual tests doesn't change the CODE behavior, or change how TKG determines PASS/FAIL.",Investigation and Exploration,True,109,CONTRIBUTOR,True,False,False,0.7826086957,0.3103448276,0.2857142857,0.7155963303,0.9939440574,0.006055942622,0.006864019174,0.0128898379
"It's the cmdline tester which is responsible for the following (which always shows the correct result), and then optionally returning an exit code.",Investigation and Exploration,False,147,CONTRIBUTOR,True,False,False,1.0,0.3965517241,0.4285714286,0.7247706422,0.9939440574,0.006055942622,0.006864019174,0.0128898379
"CODE

I see the cmdline tester for cmdLineTester_locales is run with CODE.",Investigation and Exploration,True,76,CONTRIBUTOR,True,False,False,0.5652173913,0.224137931,0.5714285714,0.7339449541,0.9939440574,0.006055942622,0.006864019174,0.0128898379
"We don't know if cmdline tester is returning the wrong exit code, or something is going wrong in TKG.",Investigation and Exploration,False,101,CONTRIBUTOR,True,False,False,0.8260869565,0.3275862069,0.7142857143,0.7431192661,0.9939440574,0.006055942622,0.006864019174,0.0128898379
How does TKG determine CODE or CODE?,Investigation and Exploration,True,36,CONTRIBUTOR,True,False,False,0.3043478261,0.1206896552,0.8571428571,0.752293578,0.9939440574,0.006055942622,0.006864019174,0.0128898379
Is TKG itself running in Java?,Investigation and Exploration,False,30,CONTRIBUTOR,True,False,False,0.2608695652,0.1034482759,1.0,0.7614678899,0.9939440574,0.006055942622,0.006864019174,0.0128898379
TKG is running Java to generate make targets only.,Solution Discussion,False,50,CONTRIBUTOR,False,False,False,0.4736842105,0.1551724138,0.5,0.7706422018,0.9961777994,0.003822200553,0.0128898379,0.003909680331
"To determine test passed or failed, we use shell to check the return code of the test command: https://github.com/AdoptOpenJDK/TKG/blob/master/settings.mk#L198",Investigation and Exploration,False,159,CONTRIBUTOR,False,False,False,1.0,0.3275862069,1.0,0.7798165138,0.9961777994,0.003822200553,0.0128898379,0.003909680331
I notice the cmdline tester for cmdLineTester_locales is already running with -Xint.,Investigation and Exploration,False,84,CONTRIBUTOR,True,False,False,0.2727272727,0.2068965517,0.1428571429,0.7889908257,0.9968553268,0.003144673225,0.003909680331,0.004205153524
The cmdline tester code is doing the following.,Investigation and Exploration,False,47,CONTRIBUTOR,True,False,False,0.1818181818,0.1379310345,0.2857142857,0.7981651376,0.9968553268,0.003144673225,0.003909680331,0.004205153524
"There is no explicit exit with a zero error code for success. 
https://github.com/eclipse/openj9/blob/master/test/functional/cmdline_options_tester/src/MainTester.java#L111

As far as I can tell from the java launcher code, after invoking the main method the return code is set to zero as long as no exception occurs.",Investigation and Exploration,False,320,CONTRIBUTOR,True,False,False,1.0,0.7586206897,0.4285714286,0.8073394495,0.9968553268,0.003144673225,0.003909680331,0.004205153524
"When an exception occurs it should be printed to stderr, and we're not seeing that.",Investigation and Exploration,False,83,CONTRIBUTOR,True,False,False,0.3409090909,0.2586206897,0.5714285714,0.8165137615,0.9968553268,0.003144673225,0.003909680331,0.004205153524
"If DetachCurrentThread() isn't JNI_OK, a message is printed to stderr and the return code is set to 1. DestroyJavaVM() is called, which doesn't affect the return code, and then the return code is returned.",Solution Discussion,False,205,CONTRIBUTOR,True,False,False,0.7727272727,0.5862068966,0.7142857143,0.8256880734,0.9968553268,0.003144673225,0.003909680331,0.004205153524
I can try to create a debug VM which prints the return code to stderr and we can grind the test with that to see the value when TKG detects failure.,Task Progress,False,148,CONTRIBUTOR,True,False,False,0.7045454545,0.5344827586,0.8571428571,0.8348623853,0.9968553268,0.003144673225,0.003909680331,0.004205153524
Not sure if printing to stderr will cause a problem in the JVM build.,Investigation and Exploration,False,69,CONTRIBUTOR,True,False,False,0.3181818182,0.2413793103,1.0,0.8440366972,0.9968553268,0.003144673225,0.003909680331,0.004205153524
"The JVM is here https://140-211-168-230-openstack.osuosl.org/artifactory/ci-eclipse-openj9/Build_JDK8_x86-64_mac_Personal/597/OpenJ9-JDK8-x86-64_mac-20201125-021416.tar.gz

It prints output to stderr like CODE.",Investigation and Exploration,True,212,CONTRIBUTOR,True,False,False,1.0,0.224137931,0.5,0.8532110092,0.9975840581,0.002415941924,0.004205153524,0.0006064079553
Trying a grinder https://ci.eclipse.org/openj9/view/Test/job/Grinder/1202/,Testing,False,74,CONTRIBUTOR,True,False,False,0.3076923077,0.06896551724,1.0,0.8623853211,0.9975840581,0.002415941924,0.004205153524,0.0006064079553
The runs which passed are printing CODE but the failures don't print anything.,Testing,True,78,CONTRIBUTOR,True,False,False,0.619047619,0.224137931,0.5,0.871559633,0.9976891454,0.00231085457,0.0006064079553,0.003302748254
"It seems the JVM is exiting in a different way, I'll have to figure out what other exit paths are possible.",Investigation and Exploration,False,107,CONTRIBUTOR,True,False,False,1.0,0.3620689655,1.0,0.880733945,0.9976891454,0.00231085457,0.0006064079553,0.003302748254
"I think I've tracked it to runExitStages() as called from protectedDestroyJavaVM(), exiting with 255 or -1.",Investigation and Exploration,False,107,CONTRIBUTOR,True,False,False,0.7727272727,0.2931034483,0.5,0.8899082569,0.9982614946,0.001738505423,0.003302748254,0.002428514487
"I'm attempting to recreate the problem with CODE to track it further, but so far there haven't been any failures with CODE.",Bug Reproduction,True,123,CONTRIBUTOR,True,False,False,1.0,0.3793103448,1.0,0.8990825688,0.9982614946,0.001738505423,0.003302748254,0.002428514487
I had to add prints instead of using CODE.,Investigation and Exploration,True,42,CONTRIBUTOR,True,False,False,0.4285714286,0.1551724138,0.2,0.9082568807,0.9986823435,0.001317656456,0.002428514487,0.005742138251
"Not sure why the failures don't occur with CODE, but it's probably a timing thing.",Investigation and Exploration,True,82,CONTRIBUTOR,True,False,False,0.7142857143,0.2586206897,0.4,0.9174311927,0.9986823435,0.001317656456,0.002428514487,0.005742138251
Seems to be failing in the j9shr component.,Investigation and Exploration,False,43,CONTRIBUTOR,True,False,False,0.380952381,0.1379310345,0.6,0.9266055046,0.9986823435,0.001317656456,0.002428514487,0.005742138251
"I'm guessing one of the asserts is failing, but the trace engine is already shut down so there are no messages.",Investigation and Exploration,False,111,CONTRIBUTOR,True,False,False,1.0,0.3620689655,0.8,0.9357798165,0.9986823435,0.001317656456,0.002428514487,0.005742138251
Will trace it further.,Investigation and Exploration,False,22,CONTRIBUTOR,True,False,False,0.1904761905,0.06896551724,1.0,0.9449541284,0.9986823435,0.001317656456,0.002428514487,0.005742138251
"The following assert is failing, which seems to be timing related.",Investigation and Exploration,False,66,CONTRIBUTOR,True,False,False,0.5,0.1896551724,0.2,0.9541284404,0.9996774263,0.000322573672,0.005742138251,0.001861415604
"I expect it's invalid to access the variable outside of holding the mutex, as the value can be modified by other threads.",Expected Behaviour,False,121,CONTRIBUTOR,True,False,False,1.0,0.3793103448,0.4,0.9633027523,0.9996774263,0.000322573672,0.005742138251,0.001861415604
The assert isn't providing any value considering the tracepoint engine is already disabled.,Investigation and Exploration,False,91,CONTRIBUTOR,True,False,False,0.5909090909,0.224137931,0.6,0.9724770642,0.9996774263,0.000322573672,0.005742138251,0.001861415604
I'll open a PR to remove it.,Action on Issue,False,28,CONTRIBUTOR,True,False,False,0.3181818182,0.1206896552,0.8,0.9816513761,0.9996774263,0.000322573672,0.005742138251,0.001861415604
"I'm checking if any subsequent asserts fail as well.

https://github.com/eclipse/openj9/blob/master/runtime/shared_common/CompositeCache.cpp#L3721",Investigation and Exploration,False,148,CONTRIBUTOR,True,False,False,0.5,0.1896551724,1.0,0.9908256881,0.9996774263,0.000322573672,0.005742138251,0.001861415604
Created https://github.com/eclipse/openj9/pull/11285,Action on Issue,False,52,CONTRIBUTOR,True,False,True,1.0,0.03448275862,1.0,1.0,1.0,0.0,0.001861415604,0.0
